import * as fs from 'fs'
import * as path from 'path'
import { fileURLToPath } from 'url'

// ESM replacement for __filename / __dirname
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

/**
 * Script: get-unique-item-tags.ts
 * --------------------------------
 * Reads the raw SpacetimeDB `item_desc.json` dump and extracts a sorted list
 * of unique `tag` strings. The result is written to:
 *   src/lib/spacetime-db/constants/item-tags.ts
 *
 * Run with:
 *   npx ts-node scripts/tags/get-unique-item-tags.ts
 */

function getWorkspaceRoot(): string {
  // Current file is <workspace>/scripts/tags/get-unique-item-tags.ts
  return path.resolve(__dirname, '../../')
}

function readItemDescJson(root: string): unknown[] {
  const dataPath = path.join(root, 'src/data/global/item_desc.json')
  if (!fs.existsSync(dataPath)) {
    throw new Error(`item_desc.json not found at ${dataPath}`)
  }
  const raw = fs.readFileSync(dataPath, 'utf-8')
  return JSON.parse(raw) as unknown[]
}

function extractUniqueTags(items: any[]): string[] {
  const tagSet = new Set<string>()

  for (const item of items) {
    if (!item || typeof item !== 'object') continue

    // Only include items explicitly marked as compendium entries
    if (item.compendium_entry !== true) continue

    if (typeof (item as any).tag === 'string') {
      tagSet.add((item as any).tag)
    }
  }

  return Array.from(tagSet).sort((a, b) => a.localeCompare(b))
}

function toEnumKey(tag: string): string {
  // Remove non-alphanumeric, split by space/underscore/dash, capitalize, join
  return tag
    .replace(/[^a-zA-Z0-9 ]+/g, ' ') // keep spaces for splitting
    .split(/\s+/)
    .filter(Boolean)
    .map((w) => w.charAt(0).toUpperCase() + w.slice(1))
    .join('')
}

function writeConstantFile(root: string, tags: string[]): void {
  const constDir = path.join(root, 'src/lib/spacetime-db/constants')
  if (!fs.existsSync(constDir)) {
    fs.mkdirSync(constDir, { recursive: true })
  }
  const constPath = path.join(constDir, 'item-tags.ts')

  const enumLines = tags.map((tag) => `  ${toEnumKey(tag)} = ${JSON.stringify(tag)},`).join('\n')

  const fileContents = `/**\n * Auto-generated by scripts/tags/get-unique-item-tags.ts\n * Do not edit manually.\n */\n\nexport enum ItemTag {\n${enumLines}\n}\n\nexport const ITEM_TAGS = Object.values(ItemTag) as string[];\n`

  fs.writeFileSync(constPath, fileContents, 'utf-8')
}

function main(): void {
  try {
    const root = getWorkspaceRoot()
    const items = readItemDescJson(root)
    const tags = extractUniqueTags(items)
    writeConstantFile(root, tags)
  } catch (err) {
    console.error('ðŸ’¥ Tag extraction failed:', err)
    process.exit(1)
  }
}

// Run only when invoked directly (not imported)
if (process.argv[1] === __filename) {
  main()
}
