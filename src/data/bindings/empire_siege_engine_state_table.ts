// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { TableCache, deepEqual } from '@clockworklabs/spacetimedb-sdk'
import { type EventContext } from '.'
import { EmpireSiegeEngineState } from './empire_siege_engine_state_type'

/**
 * Table handle for the table `empire_siege_engine_state`.
 *
 * Obtain a handle from the [`empireSiegeEngineState`] property on [`RemoteTables`],
 * like `ctx.db.empireSiegeEngineState`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.empireSiegeEngineState.on_insert(...)`.
 */
export class EmpireSiegeEngineStateTableHandle {
  tableCache: TableCache<EmpireSiegeEngineState>

  constructor(tableCache: TableCache<EmpireSiegeEngineState>) {
    this.tableCache = tableCache
  }

  count(): number {
    return this.tableCache.count()
  }

  iter(): Iterable<EmpireSiegeEngineState> {
    return this.tableCache.iter()
  }
  /**
   * Access to the `entityId` unique index on the table `empire_siege_engine_state`,
   * which allows point queries on the field of the same name
   * via the [`EmpireSiegeEngineStateEntityIdUnique.find`] method.
   *
   * Users are encouraged not to explicitly reference this type,
   * but to directly chain method calls,
   * like `ctx.db.empireSiegeEngineState.entityId().find(...)`.
   *
   * Get a handle on the `entityId` unique index on the table `empire_siege_engine_state`.
   */
  entityId = {
    // Find the subscribed row whose `entityId` column value is equal to `col_val`,
    // if such a row is present in the client cache.
    find: (col_val: bigint): EmpireSiegeEngineState | undefined => {
      for (let row of this.tableCache.iter()) {
        if (deepEqual(row.entityId, col_val)) {
          return row
        }
      }
    }
  }
  /**
   * Access to the `buildingEntityId` unique index on the table `empire_siege_engine_state`,
   * which allows point queries on the field of the same name
   * via the [`EmpireSiegeEngineStateBuildingEntityIdUnique.find`] method.
   *
   * Users are encouraged not to explicitly reference this type,
   * but to directly chain method calls,
   * like `ctx.db.empireSiegeEngineState.buildingEntityId().find(...)`.
   *
   * Get a handle on the `buildingEntityId` unique index on the table `empire_siege_engine_state`.
   */
  buildingEntityId = {
    // Find the subscribed row whose `buildingEntityId` column value is equal to `col_val`,
    // if such a row is present in the client cache.
    find: (col_val: bigint): EmpireSiegeEngineState | undefined => {
      for (let row of this.tableCache.iter()) {
        if (deepEqual(row.buildingEntityId, col_val)) {
          return row
        }
      }
    }
  }

  onInsert = (cb: (ctx: EventContext, row: EmpireSiegeEngineState) => void) => {
    return this.tableCache.onInsert(cb)
  }

  removeOnInsert = (cb: (ctx: EventContext, row: EmpireSiegeEngineState) => void) => {
    return this.tableCache.removeOnInsert(cb)
  }

  onDelete = (cb: (ctx: EventContext, row: EmpireSiegeEngineState) => void) => {
    return this.tableCache.onDelete(cb)
  }

  removeOnDelete = (cb: (ctx: EventContext, row: EmpireSiegeEngineState) => void) => {
    return this.tableCache.removeOnDelete(cb)
  }

  // Updates are only defined for tables with primary keys.
  onUpdate = (cb: (ctx: EventContext, oldRow: EmpireSiegeEngineState, newRow: EmpireSiegeEngineState) => void) => {
    return this.tableCache.onUpdate(cb)
  }

  removeOnUpdate = (cb: (ctx: EventContext, onRow: EmpireSiegeEngineState, newRow: EmpireSiegeEngineState) => void) => {
    return this.tableCache.removeOnUpdate(cb)
  }
}
