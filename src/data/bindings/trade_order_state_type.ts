// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  BinaryReader,
  BinaryWriter,
  ProductTypeElement
} from '@clockworklabs/spacetimedb-sdk'
import { ItemStack as __ItemStack } from './item_stack_type'

export type TradeOrderState = {
  entityId: bigint
  shopEntityId: bigint
  remainingStock: number
  offerItems: __ItemStack[]
  offerCargoId: number[]
  requiredItems: __ItemStack[]
  requiredCargoId: number[]
  travelerTradeOrderId: number | undefined
}

/**
 * A namespace for generated helper functions.
 */
export namespace TradeOrderState {
  /**
   * A function which returns this type represented as an AlgebraicType.
   * This function is derived from the AlgebraicType used to generate this type.
   */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement('entityId', AlgebraicType.createU64Type()),
      new ProductTypeElement('shopEntityId', AlgebraicType.createU64Type()),
      new ProductTypeElement('remainingStock', AlgebraicType.createI32Type()),
      new ProductTypeElement(
        'offerItems',
        AlgebraicType.createArrayType(__ItemStack.getTypeScriptAlgebraicType())
      ),
      new ProductTypeElement(
        'offerCargoId',
        AlgebraicType.createArrayType(AlgebraicType.createI32Type())
      ),
      new ProductTypeElement(
        'requiredItems',
        AlgebraicType.createArrayType(__ItemStack.getTypeScriptAlgebraicType())
      ),
      new ProductTypeElement(
        'requiredCargoId',
        AlgebraicType.createArrayType(AlgebraicType.createI32Type())
      ),
      new ProductTypeElement(
        'travelerTradeOrderId',
        AlgebraicType.createOptionType(AlgebraicType.createI32Type())
      )
    ])
  }

  export function serialize(
    writer: BinaryWriter,
    value: TradeOrderState
  ): void {
    TradeOrderState.getTypeScriptAlgebraicType().serialize(writer, value)
  }

  export function deserialize(reader: BinaryReader): TradeOrderState {
    return TradeOrderState.getTypeScriptAlgebraicType().deserialize(reader)
  }
}
