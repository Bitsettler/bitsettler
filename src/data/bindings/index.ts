// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  BinaryWriter,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  SubscriptionBuilderImpl,
  type CallReducerFlags,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface
} from '@clockworklabs/spacetimedb-sdk'

// Import and reexport all reducer arg types
import { AdminBroadcastMsg } from './admin_broadcast_msg_reducer.ts'
import { AdminGrantShards } from './admin_grant_shards_reducer.ts'
import { AdminMarkUserReportAsActioned } from './admin_mark_user_report_as_actioned_reducer.ts'
import { AdminNotifyPlayerByIdentity } from './admin_notify_player_by_identity_reducer.ts'
import { AdminNotifyPlayer } from './admin_notify_player_reducer.ts'
import { AdminRenameEmpireEntity } from './admin_rename_empire_entity_reducer.ts'
import { AdminRenameEmpireRankEntity } from './admin_rename_empire_rank_entity_reducer.ts'
import { AdminRenameEmpireRank } from './admin_rename_empire_rank_reducer.ts'
import { AdminRenameEmpire } from './admin_rename_empire_reducer.ts'
import { AdminRenamePlayerEntity } from './admin_rename_player_entity_reducer.ts'
import { AdminRenamePlayer } from './admin_rename_player_reducer.ts'
import { AdminSignOutAll } from './admin_sign_out_all_reducer.ts'
import { AdminSkipQueueEntity } from './admin_skip_queue_entity_reducer.ts'
import { AdminSkipQueueIdentity } from './admin_skip_queue_identity_reducer.ts'
import { AdminSkipQueueName } from './admin_skip_queue_name_reducer.ts'
import { AdminUpdateGrantedHubItemState } from './admin_update_granted_hub_item_state_reducer.ts'
import { AdminUpdateSignInParameters } from './admin_update_sign_in_parameters_reducer.ts'
import { Authenticate } from './authenticate_reducer.ts'
import { BlockIdentity } from './block_identity_reducer.ts'
import { CheatEmpireSiegeAddSupplies } from './cheat_empire_siege_add_supplies_reducer.ts'
import { CheatEmpireSiegeCancel } from './cheat_empire_siege_cancel_reducer.ts'
import { CheatPlayerSetName } from './cheat_player_set_name_reducer.ts'
import { CheatShardsGrant } from './cheat_shards_grant_reducer.ts'
import { ClearStagedStaticData } from './clear_staged_static_data_reducer.ts'
import { CommitStagedStaticData } from './commit_staged_static_data_reducer.ts'
import { CurrentVersion } from './current_version_reducer.ts'
import { EmpireChangeEmblem } from './empire_change_emblem_reducer.ts'
import { EmpireCraftSupplies } from './empire_craft_supplies_reducer.ts'
import { EmpireCraftSuppliesScheduled } from './empire_craft_supplies_scheduled_reducer.ts'
import { EmpireDecayAgentLoop } from './empire_decay_agent_loop_reducer.ts'
import { EmpireDismantle } from './empire_dismantle_reducer.ts'
import { EmpireDonateShards } from './empire_donate_shards_reducer.ts'
import { EmpireForm } from './empire_form_reducer.ts'
import { EmpireLeave } from './empire_leave_reducer.ts'
import { EmpireMarkForExpansion } from './empire_mark_for_expansion_reducer.ts'
import { EmpireMarkForSiege } from './empire_mark_for_siege_reducer.ts'
import { EmpirePlayerJoin } from './empire_player_join_reducer.ts'
import { EmpirePlayerLeave } from './empire_player_leave_reducer.ts'
import { EmpireSetDirectiveMessage } from './empire_set_directive_message_reducer.ts'
import { EmpireSetNobilityThreshold } from './empire_set_nobility_threshold_reducer.ts'
import { EmpireSetPlayerRank } from './empire_set_player_rank_reducer.ts'
import { EmpireSetRankTitle } from './empire_set_rank_title_reducer.ts'
import { EmpireSiegeAgentLoop } from './empire_siege_agent_loop_reducer.ts'
import { EmpireSubmit } from './empire_submit_reducer.ts'
import { EmpireTransferEmperorship } from './empire_transfer_emperorship_reducer.ts'
import { EmpireUpdatePermissions } from './empire_update_permissions_reducer.ts'
import { IdentityConnected } from './identity_connected_reducer.ts'
import { IdentityDisconnected } from './identity_disconnected_reducer.ts'
import { ImportAchievementDesc } from './import_achievement_desc_reducer.ts'
import { ImportActiveBuffState } from './import_active_buff_state_reducer.ts'
import { ImportAdminBroadcast } from './import_admin_broadcast_reducer.ts'
import { ImportAlertDesc } from './import_alert_desc_reducer.ts'
import { ImportAlertState } from './import_alert_state_reducer.ts'
import { ImportAttackOutcomeState } from './import_attack_outcome_state_reducer.ts'
import { ImportBiomeDesc } from './import_biome_desc_reducer.ts'
import { ImportBuffDesc } from './import_buff_desc_reducer.ts'
import { ImportBuffTypeDesc } from './import_buff_type_desc_reducer.ts'
import { ImportBuildingClaimDesc } from './import_building_claim_desc_reducer.ts'
import { ImportBuildingDesc } from './import_building_desc_reducer.ts'
import { ImportBuildingPortalDesc } from './import_building_portal_desc_reducer.ts'
import { ImportBuildingRepairsDesc } from './import_building_repairs_desc_reducer.ts'
import { ImportBuildingSpawnDesc } from './import_building_spawn_desc_reducer.ts'
import { ImportBuildingState } from './import_building_state_reducer.ts'
import { ImportBuildingTypeDesc } from './import_building_type_desc_reducer.ts'
import { ImportCargoDesc } from './import_cargo_desc_reducer.ts'
import { ImportCharacterStatDesc } from './import_character_stat_desc_reducer.ts'
import { ImportCharacterStatsState } from './import_character_stats_state_reducer.ts'
import { ImportChatMessageState } from './import_chat_message_state_reducer.ts'
import { ImportChestRarityDesc } from './import_chest_rarity_desc_reducer.ts'
import { ImportClaimLocalState } from './import_claim_local_state_reducer.ts'
import { ImportClaimRecruitmentState } from './import_claim_recruitment_state_reducer.ts'
import { ImportClaimState } from './import_claim_state_reducer.ts'
import { ImportClaimTechDesc } from './import_claim_tech_desc_reducer.ts'
import { ImportClaimTechState } from './import_claim_tech_state_reducer.ts'
import { ImportClaimTileCost } from './import_claim_tile_cost_reducer.ts'
import { ImportClaimTileState } from './import_claim_tile_state_reducer.ts'
import { ImportClimbRequirementDesc } from './import_climb_requirement_desc_reducer.ts'
import { ImportClothingDesc } from './import_clothing_desc_reducer.ts'
import { ImportCollectibleDesc } from './import_collectible_desc_reducer.ts'
import { ImportCombatActionDesc } from './import_combat_action_desc_reducer.ts'
import { ImportCombatState } from './import_combat_state_reducer.ts'
import { ImportConfig } from './import_config_reducer.ts'
import { ImportConstructionRecipeDesc } from './import_construction_recipe_desc_reducer.ts'
import { ImportCraftingRecipeDesc } from './import_crafting_recipe_desc_reducer.ts'
import { ImportDeconstructionRecipeDesc } from './import_deconstruction_recipe_desc_reducer.ts'
import { ImportDeployableDesc } from './import_deployable_desc_reducer.ts'
import { ImportDeployableState } from './import_deployable_state_reducer.ts'
import { ImportDimensionDescriptionState } from './import_dimension_description_state_reducer.ts'
import { ImportDimensionNetworkDescriptionState } from './import_dimension_network_description_state_reducer.ts'
import { ImportDistantVisibleEntityDesc } from './import_distant_visible_entity_desc_reducer.ts'
import { ImportDroppedInventoryState } from './import_dropped_inventory_state_reducer.ts'
import { ImportElevatorDesc } from './import_elevator_desc_reducer.ts'
import { ImportEmoteDesc } from './import_emote_desc_reducer.ts'
import { ImportEmpireColorsDesc } from './import_empire_colors_desc_reducer.ts'
import { ImportEmpireNotificationDesc } from './import_empire_notification_desc_reducer.ts'
import { ImportEmpireRankDesc } from './import_empire_rank_desc_reducer.ts'
import { ImportEmpireSuppliesDesc } from './import_empire_supplies_desc_reducer.ts'
import { ImportEmpireTerritoryDesc } from './import_empire_territory_desc_reducer.ts'
import { ImportEnemyAiParamsDesc } from './import_enemy_ai_params_desc_reducer.ts'
import { ImportEnemyDesc } from './import_enemy_desc_reducer.ts'
import { ImportEnemyState } from './import_enemy_state_reducer.ts'
import { ImportEnvironmentDebuffDesc } from './import_environment_debuff_desc_reducer.ts'
import { ImportEquipmentDesc } from './import_equipment_desc_reducer.ts'
import { ImportEquipmentState } from './import_equipment_state_reducer.ts'
import { ImportExperienceState } from './import_experience_state_reducer.ts'
import { ImportExplorationChunksState } from './import_exploration_chunks_state_reducer.ts'
import { ImportExtractionRecipeDesc } from './import_extraction_recipe_desc_reducer.ts'
import { ImportFoodDesc } from './import_food_desc_reducer.ts'
import { ImportFootprintTileState } from './import_footprint_tile_state_reducer.ts'
import { ImportGateDesc } from './import_gate_desc_reducer.ts'
import { ImportGlobals } from './import_globals_reducer.ts'
import { ImportGrowthState } from './import_growth_state_reducer.ts'
import { ImportHealthState } from './import_health_state_reducer.ts'
import { ImportHerdCache } from './import_herd_cache_reducer.ts'
import { ImportHexiteExchangeEntryDesc } from './import_hexite_exchange_entry_desc_reducer.ts'
import { ImportIdentityRole } from './import_identity_role_reducer.ts'
import { ImportInteriorCollapseTriggerState } from './import_interior_collapse_trigger_state_reducer.ts'
import { ImportInteriorInstanceDesc } from './import_interior_instance_desc_reducer.ts'
import { ImportInteriorNetworkDesc } from './import_interior_network_desc_reducer.ts'
import { ImportInteriorPortalConnectionsDesc } from './import_interior_portal_connections_desc_reducer.ts'
import { ImportInteriorShapeDesc } from './import_interior_shape_desc_reducer.ts'
import { ImportInteriorSpawnDesc } from './import_interior_spawn_desc_reducer.ts'
import { ImportInventoryState } from './import_inventory_state_reducer.ts'
import { ImportItemConversionRecipeDesc } from './import_item_conversion_recipe_desc_reducer.ts'
import { ImportItemDesc } from './import_item_desc_reducer.ts'
import { ImportItemListDesc } from './import_item_list_desc_reducer.ts'
import { ImportKnowledgeAchievementState } from './import_knowledge_achievement_state_reducer.ts'
import { ImportKnowledgeBattleActionState } from './import_knowledge_battle_action_state_reducer.ts'
import { ImportKnowledgeBuildingState } from './import_knowledge_building_state_reducer.ts'
import { ImportKnowledgeCargoState } from './import_knowledge_cargo_state_reducer.ts'
import { ImportKnowledgeConstructionState } from './import_knowledge_construction_state_reducer.ts'
import { ImportKnowledgeCraftState } from './import_knowledge_craft_state_reducer.ts'
import { ImportKnowledgeDeployableState } from './import_knowledge_deployable_state_reducer.ts'
import { ImportKnowledgeEnemyState } from './import_knowledge_enemy_state_reducer.ts'
import { ImportKnowledgeExtractState } from './import_knowledge_extract_state_reducer.ts'
import { ImportKnowledgeItemState } from './import_knowledge_item_state_reducer.ts'
import { ImportKnowledgeLoreState } from './import_knowledge_lore_state_reducer.ts'
import { ImportKnowledgeNpcState } from './import_knowledge_npc_state_reducer.ts'
import { ImportKnowledgePavingState } from './import_knowledge_paving_state_reducer.ts'
import { ImportKnowledgeResourcePlacementState } from './import_knowledge_resource_placement_state_reducer.ts'
import { ImportKnowledgeResourceState } from './import_knowledge_resource_state_reducer.ts'
import { ImportKnowledgeRuinsState } from './import_knowledge_ruins_state_reducer.ts'
import { ImportKnowledgeScrollDesc } from './import_knowledge_scroll_desc_reducer.ts'
import { ImportKnowledgeScrollTypeDesc } from './import_knowledge_scroll_type_desc_reducer.ts'
import { ImportKnowledgeSecondaryState } from './import_knowledge_secondary_state_reducer.ts'
import { ImportKnowledgeStatModifierDesc } from './import_knowledge_stat_modifier_desc_reducer.ts'
import { ImportKnowledgeVaultState } from './import_knowledge_vault_state_reducer.ts'
import { ImportLocationState } from './import_location_state_reducer.ts'
import { ImportLootChestDesc } from './import_loot_chest_desc_reducer.ts'
import { ImportLootChestState } from './import_loot_chest_state_reducer.ts'
import { ImportLootRarityDesc } from './import_loot_rarity_desc_reducer.ts'
import { ImportLootTableDesc } from './import_loot_table_desc_reducer.ts'
import { ImportMobileEntityState } from './import_mobile_entity_state_reducer.ts'
import { ImportMountingState } from './import_mounting_state_reducer.ts'
import { ImportNpcDesc } from './import_npc_desc_reducer.ts'
import { ImportNpcState } from './import_npc_state_reducer.ts'
import { ImportOnboardingRewardDesc } from './import_onboarding_reward_desc_reducer.ts'
import { ImportOnboardingState } from './import_onboarding_state_reducer.ts'
import { ImportParametersDesc } from './import_parameters_desc_reducer.ts'
import { ImportPathfindingDesc } from './import_pathfinding_desc_reducer.ts'
import { ImportPavedTileState } from './import_paved_tile_state_reducer.ts'
import { ImportPavingTileDesc } from './import_paving_tile_desc_reducer.ts'
import { ImportPlayerActionDesc } from './import_player_action_desc_reducer.ts'
import { ImportPlayerActionState } from './import_player_action_state_reducer.ts'
import { ImportPlayerPrefsState } from './import_player_prefs_state_reducer.ts'
import { ImportPlayerState } from './import_player_state_reducer.ts'
import { ImportPlayerVoteState } from './import_player_vote_state_reducer.ts'
import { ImportPortalState } from './import_portal_state_reducer.ts'
import { ImportPrivateParametersDesc } from './import_private_parameters_desc_reducer.ts'
import { ImportProgressiveActionState } from './import_progressive_action_state_reducer.ts'
import { ImportProjectSiteState } from './import_project_site_state_reducer.ts'
import { ImportRegionConnectionInfo } from './import_region_connection_info_reducer.ts'
import { ImportRegionSignInParameters } from './import_region_sign_in_parameters_reducer.ts'
import { ImportRentState } from './import_rent_state_reducer.ts'
import { ImportResourceClumpDesc } from './import_resource_clump_desc_reducer.ts'
import { ImportResourceCount } from './import_resource_count_reducer.ts'
import { ImportResourceDesc } from './import_resource_desc_reducer.ts'
import { ImportResourceGrowthRecipeDesc } from './import_resource_growth_recipe_desc_reducer.ts'
import { ImportResourcePlacementRecipeDesc } from './import_resource_placement_recipe_desc_reducer.ts'
import { ImportResourceState } from './import_resource_state_reducer.ts'
import { ImportSatiationState } from './import_satiation_state_reducer.ts'
import { ImportSecondaryKnowledgeDesc } from './import_secondary_knowledge_desc_reducer.ts'
import { ImportServerIdentity } from './import_server_identity_reducer.ts'
import { ImportSignedInPlayerState } from './import_signed_in_player_state_reducer.ts'
import { ImportSkillDesc } from './import_skill_desc_reducer.ts'
import { ImportStaminaState } from './import_stamina_state_reducer.ts'
import { ImportTargetState } from './import_target_state_reducer.ts'
import { ImportTargetableState } from './import_targetable_state_reducer.ts'
import { ImportTargetingMatrixDesc } from './import_targeting_matrix_desc_reducer.ts'
import { ImportTeleportItemDesc } from './import_teleport_item_desc_reducer.ts'
import { ImportTerraformRecipeDesc } from './import_terraform_recipe_desc_reducer.ts'
import { ImportTerrainChunkState } from './import_terrain_chunk_state_reducer.ts'
import { ImportToolDesc } from './import_tool_desc_reducer.ts'
import { ImportToolTypeDesc } from './import_tool_type_desc_reducer.ts'
import { ImportTradeOrderState } from './import_trade_order_state_reducer.ts'
import { ImportTradeSessionState } from './import_trade_session_state_reducer.ts'
import { ImportTravelerTaskDesc } from './import_traveler_task_desc_reducer.ts'
import { ImportTravelerTradeOrderDesc } from './import_traveler_trade_order_desc_reducer.ts'
import { ImportUserModerationState } from './import_user_moderation_state_reducer.ts'
import { ImportUserState } from './import_user_state_reducer.ts'
import { ImportVaultState } from './import_vault_state_reducer.ts'
import { ImportWallDesc } from './import_wall_desc_reducer.ts'
import { ImportWeaponDesc } from './import_weapon_desc_reducer.ts'
import { ImportWeaponTypeDesc } from './import_weapon_type_desc_reducer.ts'
import { ImportWorldRegionNameState } from './import_world_region_name_state_reducer.ts'
import { ImportWorldRegionState } from './import_world_region_state_reducer.ts'
import { LoadConfig } from './load_config_reducer.ts'
import { LogEmpireLeaderboard } from './log_empire_leaderboard_reducer.ts'
import { LogPlayerWith } from './log_player_with_reducer.ts'
import { OnInterModuleMessageProcessed } from './on_inter_module_message_processed_reducer.ts'
import { PlayerClaimDailyShards } from './player_claim_daily_shards_reducer.ts'
import { PlayerCreate } from './player_create_reducer.ts'
import { PlayerDismissNotification } from './player_dismiss_notification_reducer.ts'
import { PlayerNotificationEventReducer } from './player_notification_event_reducer_reducer.ts'
import { PlayerSetName } from './player_set_name_reducer.ts'
import { PlayerVoteAnswer } from './player_vote_answer_reducer.ts'
import { PlayerVoteConclude } from './player_vote_conclude_reducer.ts'
import { ProcessInterModuleMessage } from './process_inter_module_message_reducer.ts'
import { SetRoleForIdentity } from './set_role_for_identity_reducer.ts'
import { SignIn } from './sign_in_reducer.ts'
import { StageAchievementDesc } from './stage_achievement_desc_reducer.ts'
import { StageAlertDesc } from './stage_alert_desc_reducer.ts'
import { StageBiomeDesc } from './stage_biome_desc_reducer.ts'
import { StageBuffDesc } from './stage_buff_desc_reducer.ts'
import { StageBuffTypeDesc } from './stage_buff_type_desc_reducer.ts'
import { StageBuildingClaimDesc } from './stage_building_claim_desc_reducer.ts'
import { StageBuildingDesc } from './stage_building_desc_reducer.ts'
import { StageBuildingPortalDesc } from './stage_building_portal_desc_reducer.ts'
import { StageBuildingRepairsDesc } from './stage_building_repairs_desc_reducer.ts'
import { StageBuildingSpawnDesc } from './stage_building_spawn_desc_reducer.ts'
import { StageBuildingTypeDesc } from './stage_building_type_desc_reducer.ts'
import { StageCargoDesc } from './stage_cargo_desc_reducer.ts'
import { StageCharacterStatDesc } from './stage_character_stat_desc_reducer.ts'
import { StageChestRarityDesc } from './stage_chest_rarity_desc_reducer.ts'
import { StageClaimTechDesc } from './stage_claim_tech_desc_reducer.ts'
import { StageClaimTileCost } from './stage_claim_tile_cost_reducer.ts'
import { StageClimbRequirementDesc } from './stage_climb_requirement_desc_reducer.ts'
import { StageClothingDesc } from './stage_clothing_desc_reducer.ts'
import { StageCollectibleDesc } from './stage_collectible_desc_reducer.ts'
import { StageCombatActionDesc } from './stage_combat_action_desc_reducer.ts'
import { StageConstructionRecipeDesc } from './stage_construction_recipe_desc_reducer.ts'
import { StageCraftingRecipeDesc } from './stage_crafting_recipe_desc_reducer.ts'
import { StageDeconstructionRecipeDesc } from './stage_deconstruction_recipe_desc_reducer.ts'
import { StageDeployableDesc } from './stage_deployable_desc_reducer.ts'
import { StageDistantVisibleEntityDesc } from './stage_distant_visible_entity_desc_reducer.ts'
import { StageElevatorDesc } from './stage_elevator_desc_reducer.ts'
import { StageEmoteDesc } from './stage_emote_desc_reducer.ts'
import { StageEmpireColorsDesc } from './stage_empire_colors_desc_reducer.ts'
import { StageEmpireIconDesc } from './stage_empire_icon_desc_reducer.ts'
import { StageEmpireNotificationDesc } from './stage_empire_notification_desc_reducer.ts'
import { StageEmpireRankDesc } from './stage_empire_rank_desc_reducer.ts'
import { StageEmpireSuppliesDesc } from './stage_empire_supplies_desc_reducer.ts'
import { StageEmpireTerritoryDesc } from './stage_empire_territory_desc_reducer.ts'
import { StageEnemyAiParamsDesc } from './stage_enemy_ai_params_desc_reducer.ts'
import { StageEnemyDesc } from './stage_enemy_desc_reducer.ts'
import { StageEnvironmentDebuffDesc } from './stage_environment_debuff_desc_reducer.ts'
import { StageEquipmentDesc } from './stage_equipment_desc_reducer.ts'
import { StageExtractionRecipeDesc } from './stage_extraction_recipe_desc_reducer.ts'
import { StageFoodDesc } from './stage_food_desc_reducer.ts'
import { StageGateDesc } from './stage_gate_desc_reducer.ts'
import { StageHexiteExchangeEntryDesc } from './stage_hexite_exchange_entry_desc_reducer.ts'
import { StageInteriorEnvironmentDesc } from './stage_interior_environment_desc_reducer.ts'
import { StageInteriorInstanceDesc } from './stage_interior_instance_desc_reducer.ts'
import { StageInteriorNetworkDesc } from './stage_interior_network_desc_reducer.ts'
import { StageInteriorPortalConnectionsDesc } from './stage_interior_portal_connections_desc_reducer.ts'
import { StageInteriorShapeDesc } from './stage_interior_shape_desc_reducer.ts'
import { StageInteriorSpawnDesc } from './stage_interior_spawn_desc_reducer.ts'
import { StageItemConversionRecipeDesc } from './stage_item_conversion_recipe_desc_reducer.ts'
import { StageItemDesc } from './stage_item_desc_reducer.ts'
import { StageItemListDesc } from './stage_item_list_desc_reducer.ts'
import { StageKnowledgeScrollDesc } from './stage_knowledge_scroll_desc_reducer.ts'
import { StageKnowledgeScrollTypeDesc } from './stage_knowledge_scroll_type_desc_reducer.ts'
import { StageKnowledgeStatModifierDesc } from './stage_knowledge_stat_modifier_desc_reducer.ts'
import { StageLootChestDesc } from './stage_loot_chest_desc_reducer.ts'
import { StageLootRarityDesc } from './stage_loot_rarity_desc_reducer.ts'
import { StageLootTableDesc } from './stage_loot_table_desc_reducer.ts'
import { StageNpcDesc } from './stage_npc_desc_reducer.ts'
import { StageOnboardingRewardDesc } from './stage_onboarding_reward_desc_reducer.ts'
import { StageParametersDesc } from './stage_parameters_desc_reducer.ts'
import { StagePathfindingDesc } from './stage_pathfinding_desc_reducer.ts'
import { StagePavingTileDesc } from './stage_paving_tile_desc_reducer.ts'
import { StagePillarShapingDesc } from './stage_pillar_shaping_desc_reducer.ts'
import { StagePlayerActionDesc } from './stage_player_action_desc_reducer.ts'
import { StagePlayerHousingDesc } from './stage_player_housing_desc_reducer.ts'
import { StagePrivateParametersDesc } from './stage_private_parameters_desc_reducer.ts'
import { StageReservedNameDesc } from './stage_reserved_name_desc_reducer.ts'
import { StageResourceClumpDesc } from './stage_resource_clump_desc_reducer.ts'
import { StageResourceDesc } from './stage_resource_desc_reducer.ts'
import { StageResourceGrowthRecipeDesc } from './stage_resource_growth_recipe_desc_reducer.ts'
import { StageResourcePlacementRecipeDesc } from './stage_resource_placement_recipe_desc_reducer.ts'
import { StageSecondaryKnowledgeDesc } from './stage_secondary_knowledge_desc_reducer.ts'
import { StageSkillDesc } from './stage_skill_desc_reducer.ts'
import { StageTargetingMatrixDesc } from './stage_targeting_matrix_desc_reducer.ts'
import { StageTeleportItemDesc } from './stage_teleport_item_desc_reducer.ts'
import { StageTerraformRecipeDesc } from './stage_terraform_recipe_desc_reducer.ts'
import { StageToolDesc } from './stage_tool_desc_reducer.ts'
import { StageToolTypeDesc } from './stage_tool_type_desc_reducer.ts'
import { StageTravelerTaskDesc } from './stage_traveler_task_desc_reducer.ts'
import { StageTravelerTradeOrderDesc } from './stage_traveler_trade_order_desc_reducer.ts'
import { StageWallDesc } from './stage_wall_desc_reducer.ts'
import { StageWeaponDesc } from './stage_weapon_desc_reducer.ts'
import { StageWeaponTypeDesc } from './stage_weapon_type_desc_reducer.ts'
import { UpdateRoleForPlayer } from './update_role_for_player_reducer.ts'
import { UpdateScheduledTimersFromStaticData } from './update_scheduled_timers_from_static_data_reducer.ts'
import { UserModerationClearAll } from './user_moderation_clear_all_reducer.ts'
import { UserModerationCreate } from './user_moderation_create_reducer.ts'
import { UserModerationDelete } from './user_moderation_delete_reducer.ts'
import { UserModerationListAll } from './user_moderation_list_all_reducer.ts'
export {
  AdminBroadcastMsg,
  AdminGrantShards,
  AdminMarkUserReportAsActioned,
  AdminNotifyPlayer,
  AdminNotifyPlayerByIdentity,
  AdminRenameEmpire,
  AdminRenameEmpireEntity,
  AdminRenameEmpireRank,
  AdminRenameEmpireRankEntity,
  AdminRenamePlayer,
  AdminRenamePlayerEntity,
  AdminSignOutAll,
  AdminSkipQueueEntity,
  AdminSkipQueueIdentity,
  AdminSkipQueueName,
  AdminUpdateGrantedHubItemState,
  AdminUpdateSignInParameters,
  Authenticate,
  BlockIdentity,
  CheatEmpireSiegeAddSupplies,
  CheatEmpireSiegeCancel,
  CheatPlayerSetName,
  CheatShardsGrant,
  ClearStagedStaticData,
  CommitStagedStaticData,
  CurrentVersion,
  EmpireChangeEmblem,
  EmpireCraftSupplies,
  EmpireCraftSuppliesScheduled,
  EmpireDecayAgentLoop,
  EmpireDismantle,
  EmpireDonateShards,
  EmpireForm,
  EmpireLeave,
  EmpireMarkForExpansion,
  EmpireMarkForSiege,
  EmpirePlayerJoin,
  EmpirePlayerLeave,
  EmpireSetDirectiveMessage,
  EmpireSetNobilityThreshold,
  EmpireSetPlayerRank,
  EmpireSetRankTitle,
  EmpireSiegeAgentLoop,
  EmpireSubmit,
  EmpireTransferEmperorship,
  EmpireUpdatePermissions,
  IdentityConnected,
  IdentityDisconnected,
  ImportAchievementDesc,
  ImportActiveBuffState,
  ImportAdminBroadcast,
  ImportAlertDesc,
  ImportAlertState,
  ImportAttackOutcomeState,
  ImportBiomeDesc,
  ImportBuffDesc,
  ImportBuffTypeDesc,
  ImportBuildingClaimDesc,
  ImportBuildingDesc,
  ImportBuildingPortalDesc,
  ImportBuildingRepairsDesc,
  ImportBuildingSpawnDesc,
  ImportBuildingState,
  ImportBuildingTypeDesc,
  ImportCargoDesc,
  ImportCharacterStatDesc,
  ImportCharacterStatsState,
  ImportChatMessageState,
  ImportChestRarityDesc,
  ImportClaimLocalState,
  ImportClaimRecruitmentState,
  ImportClaimState,
  ImportClaimTechDesc,
  ImportClaimTechState,
  ImportClaimTileCost,
  ImportClaimTileState,
  ImportClimbRequirementDesc,
  ImportClothingDesc,
  ImportCollectibleDesc,
  ImportCombatActionDesc,
  ImportCombatState,
  ImportConfig,
  ImportConstructionRecipeDesc,
  ImportCraftingRecipeDesc,
  ImportDeconstructionRecipeDesc,
  ImportDeployableDesc,
  ImportDeployableState,
  ImportDimensionDescriptionState,
  ImportDimensionNetworkDescriptionState,
  ImportDistantVisibleEntityDesc,
  ImportDroppedInventoryState,
  ImportElevatorDesc,
  ImportEmoteDesc,
  ImportEmpireColorsDesc,
  ImportEmpireNotificationDesc,
  ImportEmpireRankDesc,
  ImportEmpireSuppliesDesc,
  ImportEmpireTerritoryDesc,
  ImportEnemyAiParamsDesc,
  ImportEnemyDesc,
  ImportEnemyState,
  ImportEnvironmentDebuffDesc,
  ImportEquipmentDesc,
  ImportEquipmentState,
  ImportExperienceState,
  ImportExplorationChunksState,
  ImportExtractionRecipeDesc,
  ImportFoodDesc,
  ImportFootprintTileState,
  ImportGateDesc,
  ImportGlobals,
  ImportGrowthState,
  ImportHealthState,
  ImportHerdCache,
  ImportHexiteExchangeEntryDesc,
  ImportIdentityRole,
  ImportInteriorCollapseTriggerState,
  ImportInteriorInstanceDesc,
  ImportInteriorNetworkDesc,
  ImportInteriorPortalConnectionsDesc,
  ImportInteriorShapeDesc,
  ImportInteriorSpawnDesc,
  ImportInventoryState,
  ImportItemConversionRecipeDesc,
  ImportItemDesc,
  ImportItemListDesc,
  ImportKnowledgeAchievementState,
  ImportKnowledgeBattleActionState,
  ImportKnowledgeBuildingState,
  ImportKnowledgeCargoState,
  ImportKnowledgeConstructionState,
  ImportKnowledgeCraftState,
  ImportKnowledgeDeployableState,
  ImportKnowledgeEnemyState,
  ImportKnowledgeExtractState,
  ImportKnowledgeItemState,
  ImportKnowledgeLoreState,
  ImportKnowledgeNpcState,
  ImportKnowledgePavingState,
  ImportKnowledgeResourcePlacementState,
  ImportKnowledgeResourceState,
  ImportKnowledgeRuinsState,
  ImportKnowledgeScrollDesc,
  ImportKnowledgeScrollTypeDesc,
  ImportKnowledgeSecondaryState,
  ImportKnowledgeStatModifierDesc,
  ImportKnowledgeVaultState,
  ImportLocationState,
  ImportLootChestDesc,
  ImportLootChestState,
  ImportLootRarityDesc,
  ImportLootTableDesc,
  ImportMobileEntityState,
  ImportMountingState,
  ImportNpcDesc,
  ImportNpcState,
  ImportOnboardingRewardDesc,
  ImportOnboardingState,
  ImportParametersDesc,
  ImportPathfindingDesc,
  ImportPavedTileState,
  ImportPavingTileDesc,
  ImportPlayerActionDesc,
  ImportPlayerActionState,
  ImportPlayerPrefsState,
  ImportPlayerState,
  ImportPlayerVoteState,
  ImportPortalState,
  ImportPrivateParametersDesc,
  ImportProgressiveActionState,
  ImportProjectSiteState,
  ImportRegionConnectionInfo,
  ImportRegionSignInParameters,
  ImportRentState,
  ImportResourceClumpDesc,
  ImportResourceCount,
  ImportResourceDesc,
  ImportResourceGrowthRecipeDesc,
  ImportResourcePlacementRecipeDesc,
  ImportResourceState,
  ImportSatiationState,
  ImportSecondaryKnowledgeDesc,
  ImportServerIdentity,
  ImportSignedInPlayerState,
  ImportSkillDesc,
  ImportStaminaState,
  ImportTargetableState,
  ImportTargetingMatrixDesc,
  ImportTargetState,
  ImportTeleportItemDesc,
  ImportTerraformRecipeDesc,
  ImportTerrainChunkState,
  ImportToolDesc,
  ImportToolTypeDesc,
  ImportTradeOrderState,
  ImportTradeSessionState,
  ImportTravelerTaskDesc,
  ImportTravelerTradeOrderDesc,
  ImportUserModerationState,
  ImportUserState,
  ImportVaultState,
  ImportWallDesc,
  ImportWeaponDesc,
  ImportWeaponTypeDesc,
  ImportWorldRegionNameState,
  ImportWorldRegionState,
  LoadConfig,
  LogEmpireLeaderboard,
  LogPlayerWith,
  OnInterModuleMessageProcessed,
  PlayerClaimDailyShards,
  PlayerCreate,
  PlayerDismissNotification,
  PlayerNotificationEventReducer,
  PlayerSetName,
  PlayerVoteAnswer,
  PlayerVoteConclude,
  ProcessInterModuleMessage,
  SetRoleForIdentity,
  SignIn,
  StageAchievementDesc,
  StageAlertDesc,
  StageBiomeDesc,
  StageBuffDesc,
  StageBuffTypeDesc,
  StageBuildingClaimDesc,
  StageBuildingDesc,
  StageBuildingPortalDesc,
  StageBuildingRepairsDesc,
  StageBuildingSpawnDesc,
  StageBuildingTypeDesc,
  StageCargoDesc,
  StageCharacterStatDesc,
  StageChestRarityDesc,
  StageClaimTechDesc,
  StageClaimTileCost,
  StageClimbRequirementDesc,
  StageClothingDesc,
  StageCollectibleDesc,
  StageCombatActionDesc,
  StageConstructionRecipeDesc,
  StageCraftingRecipeDesc,
  StageDeconstructionRecipeDesc,
  StageDeployableDesc,
  StageDistantVisibleEntityDesc,
  StageElevatorDesc,
  StageEmoteDesc,
  StageEmpireColorsDesc,
  StageEmpireIconDesc,
  StageEmpireNotificationDesc,
  StageEmpireRankDesc,
  StageEmpireSuppliesDesc,
  StageEmpireTerritoryDesc,
  StageEnemyAiParamsDesc,
  StageEnemyDesc,
  StageEnvironmentDebuffDesc,
  StageEquipmentDesc,
  StageExtractionRecipeDesc,
  StageFoodDesc,
  StageGateDesc,
  StageHexiteExchangeEntryDesc,
  StageInteriorEnvironmentDesc,
  StageInteriorInstanceDesc,
  StageInteriorNetworkDesc,
  StageInteriorPortalConnectionsDesc,
  StageInteriorShapeDesc,
  StageInteriorSpawnDesc,
  StageItemConversionRecipeDesc,
  StageItemDesc,
  StageItemListDesc,
  StageKnowledgeScrollDesc,
  StageKnowledgeScrollTypeDesc,
  StageKnowledgeStatModifierDesc,
  StageLootChestDesc,
  StageLootRarityDesc,
  StageLootTableDesc,
  StageNpcDesc,
  StageOnboardingRewardDesc,
  StageParametersDesc,
  StagePathfindingDesc,
  StagePavingTileDesc,
  StagePillarShapingDesc,
  StagePlayerActionDesc,
  StagePlayerHousingDesc,
  StagePrivateParametersDesc,
  StageReservedNameDesc,
  StageResourceClumpDesc,
  StageResourceDesc,
  StageResourceGrowthRecipeDesc,
  StageResourcePlacementRecipeDesc,
  StageSecondaryKnowledgeDesc,
  StageSkillDesc,
  StageTargetingMatrixDesc,
  StageTeleportItemDesc,
  StageTerraformRecipeDesc,
  StageToolDesc,
  StageToolTypeDesc,
  StageTravelerTaskDesc,
  StageTravelerTradeOrderDesc,
  StageWallDesc,
  StageWeaponDesc,
  StageWeaponTypeDesc,
  UpdateRoleForPlayer,
  UpdateScheduledTimersFromStaticData,
  UserModerationClearAll,
  UserModerationCreate,
  UserModerationDelete,
  UserModerationListAll
}

// Import and reexport all table handle types
import { AIDebugStateTableHandle } from './a_i_debug_state_table.ts'
import { AchievementDescTableHandle } from './achievement_desc_table.ts'
import { ActionStateTableHandle } from './action_state_table.ts'
import { ActiveBuffStateTableHandle } from './active_buff_state_table.ts'
import { AdminBroadcastTableHandle } from './admin_broadcast_table.ts'
import { AlertDescTableHandle } from './alert_desc_table.ts'
import { AlertStateTableHandle } from './alert_state_table.ts'
import { AttachedHerdsStateTableHandle } from './attached_herds_state_table.ts'
import { AttackOutcomeStateTableHandle } from './attack_outcome_state_table.ts'
import { AutoClaimStateTableHandle } from './auto_claim_state_table.ts'
import { BarterStallStateTableHandle } from './barter_stall_state_table.ts'
import { BiomeDescTableHandle } from './biome_desc_table.ts'
import { BlockedIdentityTableHandle } from './blocked_identity_table.ts'
import { BuffDescTableHandle } from './buff_desc_table.ts'
import { BuffTypeDescTableHandle } from './buff_type_desc_table.ts'
import { BuildingClaimDescTableHandle } from './building_claim_desc_table.ts'
import { BuildingDescTableHandle } from './building_desc_table.ts'
import { BuildingFunctionTypeMappingDescTableHandle } from './building_function_type_mapping_desc_table.ts'
import { BuildingNicknameStateTableHandle } from './building_nickname_state_table.ts'
import { BuildingPortalDescTableHandle } from './building_portal_desc_table.ts'
import { BuildingRepairsDescTableHandle } from './building_repairs_desc_table.ts'
import { BuildingSpawnDescTableHandle } from './building_spawn_desc_table.ts'
import { BuildingStateTableHandle } from './building_state_table.ts'
import { BuildingTypeDescTableHandle } from './building_type_desc_table.ts'
import { BuyOrderStateTableHandle } from './buy_order_state_table.ts'
import { CargoDescTableHandle } from './cargo_desc_table.ts'
import { CharacterStatDescTableHandle } from './character_stat_desc_table.ts'
import { CharacterStatsStateTableHandle } from './character_stats_state_table.ts'
import { ChatMessageStateTableHandle } from './chat_message_state_table.ts'
import { ChestRarityDescTableHandle } from './chest_rarity_desc_table.ts'
import { ClaimLocalStateTableHandle } from './claim_local_state_table.ts'
import { ClaimMemberStateTableHandle } from './claim_member_state_table.ts'
import { ClaimRecruitmentStateTableHandle } from './claim_recruitment_state_table.ts'
import { ClaimStateTableHandle } from './claim_state_table.ts'
import { ClaimTechDescTableHandle } from './claim_tech_desc_table.ts'
import { ClaimTechStateTableHandle } from './claim_tech_state_table.ts'
import { ClaimTileCostTableHandle } from './claim_tile_cost_table.ts'
import { ClaimTileStateTableHandle } from './claim_tile_state_table.ts'
import { ClimbRequirementDescTableHandle } from './climb_requirement_desc_table.ts'
import { ClosedListingStateTableHandle } from './closed_listing_state_table.ts'
import { ClothingDescTableHandle } from './clothing_desc_table.ts'
import { CollectibleDescTableHandle } from './collectible_desc_table.ts'
import { CombatActionDescTableHandle } from './combat_action_desc_table.ts'
import { CombatStateTableHandle } from './combat_state_table.ts'
import { ConfigTableHandle } from './config_table.ts'
import { ConstructionRecipeDescTableHandle } from './construction_recipe_desc_table.ts'
import { CraftingRecipeDescTableHandle } from './crafting_recipe_desc_table.ts'
import { DeconstructionRecipeDescTableHandle } from './deconstruction_recipe_desc_table.ts'
import { DeployableCollectibleStateTableHandle } from './deployable_collectible_state_table.ts'
import { DeployableDescTableHandle } from './deployable_desc_table.ts'
import { DeployableStateTableHandle } from './deployable_state_table.ts'
import { DimensionDescriptionStateTableHandle } from './dimension_description_state_table.ts'
import { DimensionNetworkStateTableHandle } from './dimension_network_state_table.ts'
import { DistantVisibleEntityDescTableHandle } from './distant_visible_entity_desc_table.ts'
import { DistantVisibleEntityTableHandle } from './distant_visible_entity_table.ts'
import { DroppedInventoryStateTableHandle } from './dropped_inventory_state_table.ts'
import { DuelStateTableHandle } from './duel_state_table.ts'
import { ElevatorDescTableHandle } from './elevator_desc_table.ts'
import { EmoteDescTableHandle } from './emote_desc_table.ts'
import { EmpireChunkStateTableHandle } from './empire_chunk_state_table.ts'
import { EmpireColorDescTableHandle } from './empire_color_desc_table.ts'
import { EmpireCraftSuppliesTimerTableHandle } from './empire_craft_supplies_timer_table.ts'
import { EmpireDecayLoopTimerTableHandle } from './empire_decay_loop_timer_table.ts'
import { EmpireDirectiveStateTableHandle } from './empire_directive_state_table.ts'
import { EmpireEmblemStateTableHandle } from './empire_emblem_state_table.ts'
import { EmpireExpansionStateTableHandle } from './empire_expansion_state_table.ts'
import { EmpireFoundryStateTableHandle } from './empire_foundry_state_table.ts'
import { EmpireIconDescTableHandle } from './empire_icon_desc_table.ts'
import { EmpireLogStateTableHandle } from './empire_log_state_table.ts'
import { EmpireNodeSiegeStateTableHandle } from './empire_node_siege_state_table.ts'
import { EmpireNodeStateTableHandle } from './empire_node_state_table.ts'
import { EmpireNotificationDescTableHandle } from './empire_notification_desc_table.ts'
import { EmpireNotificationStateTableHandle } from './empire_notification_state_table.ts'
import { EmpirePlayerDataStateTableHandle } from './empire_player_data_state_table.ts'
import { EmpirePlayerLogStateTableHandle } from './empire_player_log_state_table.ts'
import { EmpireRankDescTableHandle } from './empire_rank_desc_table.ts'
import { EmpireRankStateTableHandle } from './empire_rank_state_table.ts'
import { EmpireSettlementStateTableHandle } from './empire_settlement_state_table.ts'
import { EmpireSiegeEngineStateTableHandle } from './empire_siege_engine_state_table.ts'
import { EmpireSiegeLoopTimerTableHandle } from './empire_siege_loop_timer_table.ts'
import { EmpireStateTableHandle } from './empire_state_table.ts'
import { EmpireSuppliesDescTableHandle } from './empire_supplies_desc_table.ts'
import { EmpireTerritoryDescTableHandle } from './empire_territory_desc_table.ts'
import { EnemyAiParamsDescTableHandle } from './enemy_ai_params_desc_table.ts'
import { EnemyDescTableHandle } from './enemy_desc_table.ts'
import { EnemyMobMonitorStateTableHandle } from './enemy_mob_monitor_state_table.ts'
import { EnemyStateTableHandle } from './enemy_state_table.ts'
import { EnvironmentDebuffDescTableHandle } from './environment_debuff_desc_table.ts'
import { EquipmentDescTableHandle } from './equipment_desc_table.ts'
import { EquipmentStateTableHandle } from './equipment_state_table.ts'
import { ExperienceStateTableHandle } from './experience_state_table.ts'
import { ExplorationChunksStateTableHandle } from './exploration_chunks_state_table.ts'
import { ExtractOutcomeStateTableHandle } from './extract_outcome_state_table.ts'
import { ExtractionRecipeDescTableHandle } from './extraction_recipe_desc_table.ts'
import { FoodDescTableHandle } from './food_desc_table.ts'
import { FootprintTileStateTableHandle } from './footprint_tile_state_table.ts'
import { ForceGenerateTypesTableHandle } from './force_generate_types_table.ts'
import { GateDescTableHandle } from './gate_desc_table.ts'
import { GlobalSearchStateTableHandle } from './global_search_state_table.ts'
import { GlobalsTableHandle } from './globals_table.ts'
import { GrantedHubItemStateTableHandle } from './granted_hub_item_state_table.ts'
import { GrowthStateTableHandle } from './growth_state_table.ts'
import { HealthStateTableHandle } from './health_state_table.ts'
import { HerdStateTableHandle } from './herd_state_table.ts'
import { HexiteExchangeEntryDescTableHandle } from './hexite_exchange_entry_desc_table.ts'
import { IdentityRoleTableHandle } from './identity_role_table.ts'
import { InterModuleMessageCounterTableHandle } from './inter_module_message_counter_table.ts'
import { InterModuleMessageTableHandle } from './inter_module_message_table.ts'
import { InterModuleResponseMessageCounterTableHandle } from './inter_module_response_message_counter_table.ts'
import { InteriorCollapseTriggerStateTableHandle } from './interior_collapse_trigger_state_table.ts'
import { InteriorEnvironmentDescTableHandle } from './interior_environment_desc_table.ts'
import { InteriorInstanceDescTableHandle } from './interior_instance_desc_table.ts'
import { InteriorNetworkDescTableHandle } from './interior_network_desc_table.ts'
import { InteriorPortalConnectionsDescTableHandle } from './interior_portal_connections_desc_table.ts'
import { InteriorShapeDescTableHandle } from './interior_shape_desc_table.ts'
import { InteriorSpawnDescTableHandle } from './interior_spawn_desc_table.ts'
import { InventoryStateTableHandle } from './inventory_state_table.ts'
import { ItemConversionRecipeDescTableHandle } from './item_conversion_recipe_desc_table.ts'
import { ItemDescTableHandle } from './item_desc_table.ts'
import { ItemListDescTableHandle } from './item_list_desc_table.ts'
import { KnowledgeAchievementStateTableHandle } from './knowledge_achievement_state_table.ts'
import { KnowledgeBattleActionStateTableHandle } from './knowledge_battle_action_state_table.ts'
import { KnowledgeBuildingStateTableHandle } from './knowledge_building_state_table.ts'
import { KnowledgeCargoStateTableHandle } from './knowledge_cargo_state_table.ts'
import { KnowledgeClaimStateTableHandle } from './knowledge_claim_state_table.ts'
import { KnowledgeConstructionStateTableHandle } from './knowledge_construction_state_table.ts'
import { KnowledgeCraftStateTableHandle } from './knowledge_craft_state_table.ts'
import { KnowledgeDeployableStateTableHandle } from './knowledge_deployable_state_table.ts'
import { KnowledgeEnemyStateTableHandle } from './knowledge_enemy_state_table.ts'
import { KnowledgeExtractStateTableHandle } from './knowledge_extract_state_table.ts'
import { KnowledgeItemStateTableHandle } from './knowledge_item_state_table.ts'
import { KnowledgeLoreStateTableHandle } from './knowledge_lore_state_table.ts'
import { KnowledgeNpcStateTableHandle } from './knowledge_npc_state_table.ts'
import { KnowledgePavingStateTableHandle } from './knowledge_paving_state_table.ts'
import { KnowledgePillarShapingStateTableHandle } from './knowledge_pillar_shaping_state_table.ts'
import { KnowledgeResourcePlacementStateTableHandle } from './knowledge_resource_placement_state_table.ts'
import { KnowledgeResourceStateTableHandle } from './knowledge_resource_state_table.ts'
import { KnowledgeRuinsStateTableHandle } from './knowledge_ruins_state_table.ts'
import { KnowledgeScrollDescTableHandle } from './knowledge_scroll_desc_table.ts'
import { KnowledgeScrollTypeDescTableHandle } from './knowledge_scroll_type_desc_table.ts'
import { KnowledgeSecondaryStateTableHandle } from './knowledge_secondary_state_table.ts'
import { KnowledgeStatModifierDescTableHandle } from './knowledge_stat_modifier_desc_table.ts'
import { KnowledgeVaultStateTableHandle } from './knowledge_vault_state_table.ts'
import { LightSourceStateTableHandle } from './light_source_state_table.ts'
import { LocationStateTableHandle } from './location_state_table.ts'
import { LootChestDescTableHandle } from './loot_chest_desc_table.ts'
import { LootChestStateTableHandle } from './loot_chest_state_table.ts'
import { LootRarityDescTableHandle } from './loot_rarity_desc_table.ts'
import { LootTableDescTableHandle } from './loot_table_desc_table.ts'
import { LostItemsStateTableHandle } from './lost_items_state_table.ts'
import { MobileEntityStateTableHandle } from './mobile_entity_state_table.ts'
import { MountingStateTableHandle } from './mounting_state_table.ts'
import { MoveValidationStrikeCounterStateTableHandle } from './move_validation_strike_counter_state_table.ts'
import { NpcDescTableHandle } from './npc_desc_table.ts'
import { NpcStateTableHandle } from './npc_state_table.ts'
import { OnboardingRewardDescTableHandle } from './onboarding_reward_desc_table.ts'
import { OnboardingStateTableHandle } from './onboarding_state_table.ts'
import { ParametersDescTableHandle } from './parameters_desc_table.ts'
import { ParametersPlayerMoveDescTableHandle } from './parameters_player_move_desc_table.ts'
import { PassiveCraftStateTableHandle } from './passive_craft_state_table.ts'
import { PathfindingDescTableHandle } from './pathfinding_desc_table.ts'
import { PavedTileStateTableHandle } from './paved_tile_state_table.ts'
import { PavingTileDescTableHandle } from './paving_tile_desc_table.ts'
import { PermissionStateTableHandle } from './permission_state_table.ts'
import { PillarShapingDescTableHandle } from './pillar_shaping_desc_table.ts'
import { PillarShapingStateTableHandle } from './pillar_shaping_state_table.ts'
import { PlayerActionDescTableHandle } from './player_action_desc_table.ts'
import { PlayerActionStateTableHandle } from './player_action_state_table.ts'
import { PlayerDeveloperNotificationStateTableHandle } from './player_developer_notification_state_table.ts'
import { PlayerHousingDescTableHandle } from './player_housing_desc_table.ts'
import { PlayerHousingStateTableHandle } from './player_housing_state_table.ts'
import { PlayerLowercaseUsernameStateTableHandle } from './player_lowercase_username_state_table.ts'
import { PlayerNoteStateTableHandle } from './player_note_state_table.ts'
import { PlayerNotificationEventTableHandle } from './player_notification_event_table.ts'
import { PlayerPrefsStateTableHandle } from './player_prefs_state_table.ts'
import { PlayerQueueStateTableHandle } from './player_queue_state_table.ts'
import { PlayerReportStateTableHandle } from './player_report_state_table.ts'
import { PlayerReportStateTimestampTableHandle } from './player_report_state_timestamp_table.ts'
import { PlayerShardStateTableHandle } from './player_shard_state_table.ts'
import { PlayerStateTableHandle } from './player_state_table.ts'
import { PlayerTimestampStateTableHandle } from './player_timestamp_state_table.ts'
import { PlayerUsernameStateTableHandle } from './player_username_state_table.ts'
import { PlayerVoteConcludeTimerTableHandle } from './player_vote_conclude_timer_table.ts'
import { PlayerVoteStateTableHandle } from './player_vote_state_table.ts'
import { PortalStateTableHandle } from './portal_state_table.ts'
import { PrivateParametersDescTableHandle } from './private_parameters_desc_table.ts'
import { ProgressiveActionStateTableHandle } from './progressive_action_state_table.ts'
import { ProjectSiteStateTableHandle } from './project_site_state_table.ts'
import { RegionConnectionInfoTableHandle } from './region_connection_info_table.ts'
import { RegionPopulationInfoTableHandle } from './region_population_info_table.ts'
import { RegionSignInParametersTableHandle } from './region_sign_in_parameters_table.ts'
import { RentStateTableHandle } from './rent_state_table.ts'
import { ReservedNameDescTableHandle } from './reserved_name_desc_table.ts'
import { ResourceClumpDescTableHandle } from './resource_clump_desc_table.ts'
import { ResourceCountTableHandle } from './resource_count_table.ts'
import { ResourceDescTableHandle } from './resource_desc_table.ts'
import { ResourceGrowthRecipeDescTableHandle } from './resource_growth_recipe_desc_table.ts'
import { ResourceHealthStateTableHandle } from './resource_health_state_table.ts'
import { ResourcePlacementRecipeDescTableHandle } from './resource_placement_recipe_desc_table.ts'
import { ResourceStateTableHandle } from './resource_state_table.ts'
import { RezSickLongTermStateTableHandle } from './rez_sick_long_term_state_table.ts'
import { SatiationStateTableHandle } from './satiation_state_table.ts'
import { SecondaryKnowledgeDescTableHandle } from './secondary_knowledge_desc_table.ts'
import { SellOrderStateTableHandle } from './sell_order_state_table.ts'
import { ServerIdentityTableHandle } from './server_identity_table.ts'
import { SignedInPlayerStateTableHandle } from './signed_in_player_state_table.ts'
import { SingleResourceToClumpDescTableHandle } from './single_resource_to_clump_desc_table.ts'
import { SkillDescTableHandle } from './skill_desc_table.ts'
import { StagedStaticDataTableHandle } from './staged_static_data_table.ts'
import { StaminaStateTableHandle } from './stamina_state_table.ts'
import { StarvingPlayerStateTableHandle } from './starving_player_state_table.ts'
import { TargetStateTableHandle } from './target_state_table.ts'
import { TargetableStateTableHandle } from './targetable_state_table.ts'
import { TargetingMatrixDescTableHandle } from './targeting_matrix_desc_table.ts'
import { TeleportItemDescTableHandle } from './teleport_item_desc_table.ts'
import { TeleportationEnergyStateTableHandle } from './teleportation_energy_state_table.ts'
import { TerraformProgressStateTableHandle } from './terraform_progress_state_table.ts'
import { TerraformRecipeDescTableHandle } from './terraform_recipe_desc_table.ts'
import { TerrainChunkStateTableHandle } from './terrain_chunk_state_table.ts'
import { TheGreatPlaceholderTableTableHandle } from './the_great_placeholder_table_table.ts'
import { ThreatStateTableHandle } from './threat_state_table.ts'
import { ToolDescTableHandle } from './tool_desc_table.ts'
import { ToolTypeDescTableHandle } from './tool_type_desc_table.ts'
import { ToolbarStateTableHandle } from './toolbar_state_table.ts'
import { TradeOrderStateTableHandle } from './trade_order_state_table.ts'
import { TradeSessionStateTableHandle } from './trade_session_state_table.ts'
import { TravelerTaskDescTableHandle } from './traveler_task_desc_table.ts'
import { TravelerTaskStateTableHandle } from './traveler_task_state_table.ts'
import { TravelerTradeOrderDescTableHandle } from './traveler_trade_order_desc_table.ts'
import { UnclaimedCollectiblesStateTableHandle } from './unclaimed_collectibles_state_table.ts'
import { UnclaimedShardsStateTableHandle } from './unclaimed_shards_state_table.ts'
import { UserAuthenticationStateTableHandle } from './user_authentication_state_table.ts'
import { UserModerationStateTableHandle } from './user_moderation_state_table.ts'
import { UserPreviousRegionStateTableHandle } from './user_previous_region_state_table.ts'
import { UserRegionStateTableHandle } from './user_region_state_table.ts'
import { UserStateTableHandle } from './user_state_table.ts'
import { VaultStateTableHandle } from './vault_state_table.ts'
import { WallDescTableHandle } from './wall_desc_table.ts'
import { WeaponDescTableHandle } from './weapon_desc_table.ts'
import { WeaponTypeDescTableHandle } from './weapon_type_desc_table.ts'
import { WorldRegionNameStateTableHandle } from './world_region_name_state_table.ts'
import { WorldRegionStateTableHandle } from './world_region_state_table.ts'
export {
  AchievementDescTableHandle,
  ActionStateTableHandle,
  ActiveBuffStateTableHandle,
  AdminBroadcastTableHandle,
  AIDebugStateTableHandle,
  AlertDescTableHandle,
  AlertStateTableHandle,
  AttachedHerdsStateTableHandle,
  AttackOutcomeStateTableHandle,
  AutoClaimStateTableHandle,
  BarterStallStateTableHandle,
  BiomeDescTableHandle,
  BlockedIdentityTableHandle,
  BuffDescTableHandle,
  BuffTypeDescTableHandle,
  BuildingClaimDescTableHandle,
  BuildingDescTableHandle,
  BuildingFunctionTypeMappingDescTableHandle,
  BuildingNicknameStateTableHandle,
  BuildingPortalDescTableHandle,
  BuildingRepairsDescTableHandle,
  BuildingSpawnDescTableHandle,
  BuildingStateTableHandle,
  BuildingTypeDescTableHandle,
  BuyOrderStateTableHandle,
  CargoDescTableHandle,
  CharacterStatDescTableHandle,
  CharacterStatsStateTableHandle,
  ChatMessageStateTableHandle,
  ChestRarityDescTableHandle,
  ClaimLocalStateTableHandle,
  ClaimMemberStateTableHandle,
  ClaimRecruitmentStateTableHandle,
  ClaimStateTableHandle,
  ClaimTechDescTableHandle,
  ClaimTechStateTableHandle,
  ClaimTileCostTableHandle,
  ClaimTileStateTableHandle,
  ClimbRequirementDescTableHandle,
  ClosedListingStateTableHandle,
  ClothingDescTableHandle,
  CollectibleDescTableHandle,
  CombatActionDescTableHandle,
  CombatStateTableHandle,
  ConfigTableHandle,
  ConstructionRecipeDescTableHandle,
  CraftingRecipeDescTableHandle,
  DeconstructionRecipeDescTableHandle,
  DeployableCollectibleStateTableHandle,
  DeployableDescTableHandle,
  DeployableStateTableHandle,
  DimensionDescriptionStateTableHandle,
  DimensionNetworkStateTableHandle,
  DistantVisibleEntityDescTableHandle,
  DistantVisibleEntityTableHandle,
  DroppedInventoryStateTableHandle,
  DuelStateTableHandle,
  ElevatorDescTableHandle,
  EmoteDescTableHandle,
  EmpireChunkStateTableHandle,
  EmpireColorDescTableHandle,
  EmpireCraftSuppliesTimerTableHandle,
  EmpireDecayLoopTimerTableHandle,
  EmpireDirectiveStateTableHandle,
  EmpireEmblemStateTableHandle,
  EmpireExpansionStateTableHandle,
  EmpireFoundryStateTableHandle,
  EmpireIconDescTableHandle,
  EmpireLogStateTableHandle,
  EmpireNodeSiegeStateTableHandle,
  EmpireNodeStateTableHandle,
  EmpireNotificationDescTableHandle,
  EmpireNotificationStateTableHandle,
  EmpirePlayerDataStateTableHandle,
  EmpirePlayerLogStateTableHandle,
  EmpireRankDescTableHandle,
  EmpireRankStateTableHandle,
  EmpireSettlementStateTableHandle,
  EmpireSiegeEngineStateTableHandle,
  EmpireSiegeLoopTimerTableHandle,
  EmpireStateTableHandle,
  EmpireSuppliesDescTableHandle,
  EmpireTerritoryDescTableHandle,
  EnemyAiParamsDescTableHandle,
  EnemyDescTableHandle,
  EnemyMobMonitorStateTableHandle,
  EnemyStateTableHandle,
  EnvironmentDebuffDescTableHandle,
  EquipmentDescTableHandle,
  EquipmentStateTableHandle,
  ExperienceStateTableHandle,
  ExplorationChunksStateTableHandle,
  ExtractionRecipeDescTableHandle,
  ExtractOutcomeStateTableHandle,
  FoodDescTableHandle,
  FootprintTileStateTableHandle,
  ForceGenerateTypesTableHandle,
  GateDescTableHandle,
  GlobalSearchStateTableHandle,
  GlobalsTableHandle,
  GrantedHubItemStateTableHandle,
  GrowthStateTableHandle,
  HealthStateTableHandle,
  HerdStateTableHandle,
  HexiteExchangeEntryDescTableHandle,
  IdentityRoleTableHandle,
  InteriorCollapseTriggerStateTableHandle,
  InteriorEnvironmentDescTableHandle,
  InteriorInstanceDescTableHandle,
  InteriorNetworkDescTableHandle,
  InteriorPortalConnectionsDescTableHandle,
  InteriorShapeDescTableHandle,
  InteriorSpawnDescTableHandle,
  InterModuleMessageCounterTableHandle,
  InterModuleMessageTableHandle,
  InterModuleResponseMessageCounterTableHandle,
  InventoryStateTableHandle,
  ItemConversionRecipeDescTableHandle,
  ItemDescTableHandle,
  ItemListDescTableHandle,
  KnowledgeAchievementStateTableHandle,
  KnowledgeBattleActionStateTableHandle,
  KnowledgeBuildingStateTableHandle,
  KnowledgeCargoStateTableHandle,
  KnowledgeClaimStateTableHandle,
  KnowledgeConstructionStateTableHandle,
  KnowledgeCraftStateTableHandle,
  KnowledgeDeployableStateTableHandle,
  KnowledgeEnemyStateTableHandle,
  KnowledgeExtractStateTableHandle,
  KnowledgeItemStateTableHandle,
  KnowledgeLoreStateTableHandle,
  KnowledgeNpcStateTableHandle,
  KnowledgePavingStateTableHandle,
  KnowledgePillarShapingStateTableHandle,
  KnowledgeResourcePlacementStateTableHandle,
  KnowledgeResourceStateTableHandle,
  KnowledgeRuinsStateTableHandle,
  KnowledgeScrollDescTableHandle,
  KnowledgeScrollTypeDescTableHandle,
  KnowledgeSecondaryStateTableHandle,
  KnowledgeStatModifierDescTableHandle,
  KnowledgeVaultStateTableHandle,
  LightSourceStateTableHandle,
  LocationStateTableHandle,
  LootChestDescTableHandle,
  LootChestStateTableHandle,
  LootRarityDescTableHandle,
  LootTableDescTableHandle,
  LostItemsStateTableHandle,
  MobileEntityStateTableHandle,
  MountingStateTableHandle,
  MoveValidationStrikeCounterStateTableHandle,
  NpcDescTableHandle,
  NpcStateTableHandle,
  OnboardingRewardDescTableHandle,
  OnboardingStateTableHandle,
  ParametersDescTableHandle,
  ParametersPlayerMoveDescTableHandle,
  PassiveCraftStateTableHandle,
  PathfindingDescTableHandle,
  PavedTileStateTableHandle,
  PavingTileDescTableHandle,
  PermissionStateTableHandle,
  PillarShapingDescTableHandle,
  PillarShapingStateTableHandle,
  PlayerActionDescTableHandle,
  PlayerActionStateTableHandle,
  PlayerDeveloperNotificationStateTableHandle,
  PlayerHousingDescTableHandle,
  PlayerHousingStateTableHandle,
  PlayerLowercaseUsernameStateTableHandle,
  PlayerNoteStateTableHandle,
  PlayerNotificationEventTableHandle,
  PlayerPrefsStateTableHandle,
  PlayerQueueStateTableHandle,
  PlayerReportStateTableHandle,
  PlayerReportStateTimestampTableHandle,
  PlayerShardStateTableHandle,
  PlayerStateTableHandle,
  PlayerTimestampStateTableHandle,
  PlayerUsernameStateTableHandle,
  PlayerVoteConcludeTimerTableHandle,
  PlayerVoteStateTableHandle,
  PortalStateTableHandle,
  PrivateParametersDescTableHandle,
  ProgressiveActionStateTableHandle,
  ProjectSiteStateTableHandle,
  RegionConnectionInfoTableHandle,
  RegionPopulationInfoTableHandle,
  RegionSignInParametersTableHandle,
  RentStateTableHandle,
  ReservedNameDescTableHandle,
  ResourceClumpDescTableHandle,
  ResourceCountTableHandle,
  ResourceDescTableHandle,
  ResourceGrowthRecipeDescTableHandle,
  ResourceHealthStateTableHandle,
  ResourcePlacementRecipeDescTableHandle,
  ResourceStateTableHandle,
  RezSickLongTermStateTableHandle,
  SatiationStateTableHandle,
  SecondaryKnowledgeDescTableHandle,
  SellOrderStateTableHandle,
  ServerIdentityTableHandle,
  SignedInPlayerStateTableHandle,
  SingleResourceToClumpDescTableHandle,
  SkillDescTableHandle,
  StagedStaticDataTableHandle,
  StaminaStateTableHandle,
  StarvingPlayerStateTableHandle,
  TargetableStateTableHandle,
  TargetingMatrixDescTableHandle,
  TargetStateTableHandle,
  TeleportationEnergyStateTableHandle,
  TeleportItemDescTableHandle,
  TerraformProgressStateTableHandle,
  TerraformRecipeDescTableHandle,
  TerrainChunkStateTableHandle,
  TheGreatPlaceholderTableTableHandle,
  ThreatStateTableHandle,
  ToolbarStateTableHandle,
  ToolDescTableHandle,
  ToolTypeDescTableHandle,
  TradeOrderStateTableHandle,
  TradeSessionStateTableHandle,
  TravelerTaskDescTableHandle,
  TravelerTaskStateTableHandle,
  TravelerTradeOrderDescTableHandle,
  UnclaimedCollectiblesStateTableHandle,
  UnclaimedShardsStateTableHandle,
  UserAuthenticationStateTableHandle,
  UserModerationStateTableHandle,
  UserPreviousRegionStateTableHandle,
  UserRegionStateTableHandle,
  UserStateTableHandle,
  VaultStateTableHandle,
  WallDescTableHandle,
  WeaponDescTableHandle,
  WeaponTypeDescTableHandle,
  WorldRegionNameStateTableHandle,
  WorldRegionStateTableHandle
}

// Import and reexport all types
import { AchievementDesc } from './achievement_desc_type.ts'
import { ActionCooldown } from './action_cooldown_type.ts'
import { ActionState } from './action_state_type.ts'
import { ActiveBuffState } from './active_buff_state_type.ts'
import { ActiveBuff } from './active_buff_type.ts'
import { AdminBroadcastMessageMsg } from './admin_broadcast_message_msg_type.ts'
import { AdminBroadcast } from './admin_broadcast_type.ts'
import { AiDebugState } from './ai_debug_state_type.ts'
import { AlertDesc } from './alert_desc_type.ts'
import { AlertState } from './alert_state_type.ts'
import { AlertType } from './alert_type_type.ts'
import { AttachedHerdsState } from './attached_herds_state_type.ts'
import { AttackOutcomeState } from './attack_outcome_state_type.ts'
import { AuctionListingState } from './auction_listing_state_type.ts'
import { AutoClaimState } from './auto_claim_state_type.ts'
import { BarterStallState } from './barter_stall_state_type.ts'
import { BiomeDesc } from './biome_desc_type.ts'
import { Biome } from './biome_type.ts'
import { BlockedIdentityOp } from './blocked_identity_op_type.ts'
import { BlockedIdentity } from './blocked_identity_type.ts'
import { BuffCategory } from './buff_category_type.ts'
import { BuffDesc } from './buff_desc_type.ts'
import { BuffEffect } from './buff_effect_type.ts'
import { BuffTypeDesc } from './buff_type_desc_type.ts'
import { BuildingCategory } from './building_category_type.ts'
import { BuildingClaimDesc } from './building_claim_desc_type.ts'
import { BuildingDesc } from './building_desc_type.ts'
import { BuildingFunction } from './building_function_type.ts'
import { BuildingFunctionTypeMappingDesc } from './building_function_type_mapping_desc_type.ts'
import { BuildingInteractionLevel } from './building_interaction_level_type.ts'
import { BuildingNicknameStateOp } from './building_nickname_state_op_type.ts'
import { BuildingNicknameState } from './building_nickname_state_type.ts'
import { BuildingPortalDesc } from './building_portal_desc_type.ts'
import { BuildingRepairsDesc } from './building_repairs_desc_type.ts'
import { BuildingRequirement } from './building_requirement_type.ts'
import { BuildingSpawnDesc } from './building_spawn_desc_type.ts'
import { BuildingSpawnType } from './building_spawn_type_type.ts'
import { BuildingStateOp } from './building_state_op_type.ts'
import { BuildingState } from './building_state_type.ts'
import { BuildingTypeDesc } from './building_type_desc_type.ts'
import { CappedLevelRequirement } from './capped_level_requirement_type.ts'
import { CargoDesc } from './cargo_desc_type.ts'
import { CharacterStatDesc } from './character_stat_desc_type.ts'
import { CharacterStatType } from './character_stat_type_type.ts'
import { CharacterStatsState } from './character_stats_state_type.ts'
import { ChatChannel } from './chat_channel_type.ts'
import { ChatMessageState } from './chat_message_state_type.ts'
import { CheatShardsGrantRequest } from './cheat_shards_grant_request_type.ts'
import { ChestLootRarity } from './chest_loot_rarity_type.ts'
import { ChestRarityDesc } from './chest_rarity_desc_type.ts'
import { ChunkCoordinatesMessage } from './chunk_coordinates_message_type.ts'
import { ClaimCreateEmpireSettlementMsg } from './claim_create_empire_settlement_msg_type.ts'
import { ClaimLocalState } from './claim_local_state_type.ts'
import { ClaimMemberStateOp } from './claim_member_state_op_type.ts'
import { ClaimMemberState } from './claim_member_state_type.ts'
import { ClaimPermission } from './claim_permission_type.ts'
import { ClaimRecruitmentState } from './claim_recruitment_state_type.ts'
import { ClaimStateOp } from './claim_state_op_type.ts'
import { ClaimState } from './claim_state_type.ts'
import { ClaimTechDesc } from './claim_tech_desc_type.ts'
import { ClaimTechState } from './claim_tech_state_type.ts'
import { ClaimTileCost } from './claim_tile_cost_type.ts'
import { ClaimTileState } from './claim_tile_state_type.ts'
import { ClaimType } from './claim_type_type.ts'
import { ClimbRequirementDesc } from './climb_requirement_desc_type.ts'
import { ClosedListingState } from './closed_listing_state_type.ts'
import { ClothingDesc } from './clothing_desc_type.ts'
import { ClothingMask } from './clothing_mask_type.ts'
import { ClothingVisual } from './clothing_visual_type.ts'
import { CollectibleDesc } from './collectible_desc_type.ts'
import { CollectibleType } from './collectible_type_type.ts'
import { CombatActionDesc } from './combat_action_desc_type.ts'
import { CombatState } from './combat_state_type.ts'
import { Config } from './config_type.ts'
import { ConstructionRecipeDesc } from './construction_recipe_desc_type.ts'
import { CraftingRecipeDesc } from './crafting_recipe_desc_type.ts'
import { CsvStatEntry } from './csv_stat_entry_type.ts'
import { DeconstructionRecipeDesc } from './deconstruction_recipe_desc_type.ts'
import { DeleteEmpireMsg } from './delete_empire_msg_type.ts'
import { DeployableCollectibleState } from './deployable_collectible_state_type.ts'
import { DeployableDesc } from './deployable_desc_type.ts'
import { DeployableState } from './deployable_state_type.ts'
import { DeployableType } from './deployable_type_type.ts'
import { DimensionDescriptionState } from './dimension_description_state_type.ts'
import { DimensionNetworkState } from './dimension_network_state_type.ts'
import { DimensionType } from './dimension_type_type.ts'
import { DistantVisibleEntityDesc } from './distant_visible_entity_desc_type.ts'
import { DistantVisibleEntity } from './distant_visible_entity_type.ts'
import { DroppedInventoryState } from './dropped_inventory_state_type.ts'
import { DuelState } from './duel_state_type.ts'
import { ElevatorDesc } from './elevator_desc_type.ts'
import { EmoteDesc } from './emote_desc_type.ts'
import { EmpireChangeEmblemRequest } from './empire_change_emblem_request_type.ts'
import { EmpireChunkStateOp } from './empire_chunk_state_op_type.ts'
import { EmpireChunkState } from './empire_chunk_state_type.ts'
import { EmpireClaimJoinMsg } from './empire_claim_join_msg_type.ts'
import { EmpireCollectHexiteCapsuleMsg } from './empire_collect_hexite_capsule_msg_type.ts'
import { EmpireColorDesc } from './empire_color_desc_type.ts'
import { EmpireCraftSuppliesTimer } from './empire_craft_supplies_timer_type.ts'
import { EmpireCreateBuildingMsg } from './empire_create_building_msg_type.ts'
import { EmpireDecayLoopTimer } from './empire_decay_loop_timer_type.ts'
import { EmpireDirectiveState } from './empire_directive_state_type.ts'
import { EmpireDismantleRequest } from './empire_dismantle_request_type.ts'
import { EmpireDonateShardsRequest } from './empire_donate_shards_request_type.ts'
import { EmpireEmblemState } from './empire_emblem_state_type.ts'
import { EmpireExpansionStateOp } from './empire_expansion_state_op_type.ts'
import { EmpireExpansionState } from './empire_expansion_state_type.ts'
import { EmpireFormRequest } from './empire_form_request_type.ts'
import { EmpireFoundryState } from './empire_foundry_state_type.ts'
import { EmpireIconDesc } from './empire_icon_desc_type.ts'
import { EmpireLeaveRequest } from './empire_leave_request_type.ts'
import { EmpireLogState } from './empire_log_state_type.ts'
import { EmpireMarkForExpansionRequest } from './empire_mark_for_expansion_request_type.ts'
import { EmpireMarkForSiegeRequest } from './empire_mark_for_siege_request_type.ts'
import { EmpireNodeSiegeStateOp } from './empire_node_siege_state_op_type.ts'
import { EmpireNodeSiegeState } from './empire_node_siege_state_type.ts'
import { EmpireNodeStateOp } from './empire_node_state_op_type.ts'
import { EmpireNodeState } from './empire_node_state_type.ts'
import { EmpireNotificationDesc } from './empire_notification_desc_type.ts'
import { EmpireNotificationState } from './empire_notification_state_type.ts'
import { EmpireNotificationType } from './empire_notification_type_type.ts'
import { EmpirePermission } from './empire_permission_type.ts'
import { EmpirePlayerDataStateOp } from './empire_player_data_state_op_type.ts'
import { EmpirePlayerDataState } from './empire_player_data_state_type.ts'
import { EmpirePlayerJoinRequest } from './empire_player_join_request_type.ts'
import { EmpirePlayerLeaveRequest } from './empire_player_leave_request_type.ts'
import { EmpirePlayerLogState } from './empire_player_log_state_type.ts'
import { EmpireQueueSuppliesMsg } from './empire_queue_supplies_msg_type.ts'
import { EmpireRankDesc } from './empire_rank_desc_type.ts'
import { EmpireRankStateOp } from './empire_rank_state_op_type.ts'
import { EmpireRankState } from './empire_rank_state_type.ts'
import { EmpireRemoveCrownMsg } from './empire_remove_crown_msg_type.ts'
import { EmpireResupplyNodeMsg } from './empire_resupply_node_msg_type.ts'
import { EmpireSetDirectiveMessageRequest } from './empire_set_directive_message_request_type.ts'
import { EmpireSetPlayerRankRequest } from './empire_set_player_rank_request_type.ts'
import { EmpireSetRankTitleRequest } from './empire_set_rank_title_request_type.ts'
import { EmpireSettlementStateOp } from './empire_settlement_state_op_type.ts'
import { EmpireSettlementState } from './empire_settlement_state_type.ts'
import { EmpireSiegeAddSuppliesMsg } from './empire_siege_add_supplies_msg_type.ts'
import { EmpireSiegeEngineState } from './empire_siege_engine_state_type.ts'
import { EmpireSiegeLoopTimer } from './empire_siege_loop_timer_type.ts'
import { EmpireStartSiegeMsg } from './empire_start_siege_msg_type.ts'
import { EmpireStateOp } from './empire_state_op_type.ts'
import { EmpireState } from './empire_state_type.ts'
import { EmpireSuppliesDesc } from './empire_supplies_desc_type.ts'
import { EmpireTerritoryDesc } from './empire_territory_desc_type.ts'
import { EmpireUpdateEmperorCrownMsg } from './empire_update_emperor_crown_msg_type.ts'
import { EmpireUpdatePermissionsRequest } from './empire_update_permissions_request_type.ts'
import { EnemyAiParamsDesc } from './enemy_ai_params_desc_type.ts'
import { EnemyDesc } from './enemy_desc_type.ts'
import { EnemyMobMonitorState } from './enemy_mob_monitor_state_type.ts'
import { EnemyState } from './enemy_state_type.ts'
import { EnemyStatus } from './enemy_status_type.ts'
import { EnemyType } from './enemy_type_type.ts'
import { EntityType } from './entity_type_type.ts'
import { EnvironmentDebuffDesc } from './environment_debuff_desc_type.ts'
import { EnvironmentResistanceType } from './environment_resistance_type_type.ts'
import { EquipmentDesc } from './equipment_desc_type.ts'
import { EquipmentSlot } from './equipment_slot_type.ts'
import { EquipmentSlotType } from './equipment_slot_type_type.ts'
import { EquipmentState } from './equipment_state_type.ts'
import { EquipmentVisualType } from './equipment_visual_type_type.ts'
import { ExperienceStackF32 } from './experience_stack_f_32_type.ts'
import { ExperienceStack } from './experience_stack_type.ts'
import { ExperienceState } from './experience_state_type.ts'
import { ExplorationChunksState } from './exploration_chunks_state_type.ts'
import { ExtractOutcomeState } from './extract_outcome_state_type.ts'
import { ExtractionRecipeDesc } from './extraction_recipe_desc_type.ts'
import { FloatHexTileMessage } from './float_hex_tile_message_type.ts'
import { FoodDesc } from './food_desc_type.ts'
import { FootprintTileState } from './footprint_tile_state_type.ts'
import { FootprintTile } from './footprint_tile_type.ts'
import { FootprintType } from './footprint_type_type.ts'
import { ForceGenerateTypes } from './force_generate_types_type.ts'
import { GateDesc } from './gate_desc_type.ts'
import { GlobalDeleteEmpireBuildingMsg } from './global_delete_empire_building_msg_type.ts'
import { GlobalSearchState } from './global_search_state_type.ts'
import { Globals } from './globals_type.ts'
import { GrantHubItemMsg } from './grant_hub_item_msg_type.ts'
import { GrantedHubItemState } from './granted_hub_item_state_type.ts'
import { GrowthState } from './growth_state_type.ts'
import { HandEquipmentVisual } from './hand_equipment_visual_type.ts'
import { HealthState } from './health_state_type.ts'
import { HerdState } from './herd_state_type.ts'
import { HexDirection } from './hex_direction_type.ts'
import { HexiteExchangeEntryDesc } from './hexite_exchange_entry_desc_type.ts'
import { HubItemType } from './hub_item_type_type.ts'
import { IdentityRoleOp } from './identity_role_op_type.ts'
import { IdentityRole } from './identity_role_type.ts'
import { InputItemStack } from './input_item_stack_type.ts'
import { InterModuleMessageCounter } from './inter_module_message_counter_type.ts'
import { InterModuleMessage } from './inter_module_message_type.ts'
import { InterModuleResponseMessageCounter } from './inter_module_response_message_counter_type.ts'
import { InterModuleTableUpdates } from './inter_module_table_updates_type.ts'
import { InteriorCollapseTriggerState } from './interior_collapse_trigger_state_type.ts'
import { InteriorEnvironmentDesc } from './interior_environment_desc_type.ts'
import { InteriorInstanceDesc } from './interior_instance_desc_type.ts'
import { InteriorNetworkDesc } from './interior_network_desc_type.ts'
import { InteriorPortalConnectionsDesc } from './interior_portal_connections_desc_type.ts'
import { InteriorShapeDesc } from './interior_shape_desc_type.ts'
import { InteriorSpawnDesc } from './interior_spawn_desc_type.ts'
import { InteriorSpawnType } from './interior_spawn_type_type.ts'
import { InventoryState } from './inventory_state_type.ts'
import { ItemConversionLocationContext } from './item_conversion_location_context_type.ts'
import { ItemConversionRecipeDesc } from './item_conversion_recipe_desc_type.ts'
import { ItemDesc } from './item_desc_type.ts'
import { ItemListDesc } from './item_list_desc_type.ts'
import { ItemListPossibility } from './item_list_possibility_type.ts'
import { ItemStack } from './item_stack_type.ts'
import { ItemType } from './item_type_type.ts'
import { KnowledgeAchievementState } from './knowledge_achievement_state_type.ts'
import { KnowledgeBattleActionState } from './knowledge_battle_action_state_type.ts'
import { KnowledgeBuildingState } from './knowledge_building_state_type.ts'
import { KnowledgeCargoState } from './knowledge_cargo_state_type.ts'
import { KnowledgeClaimState } from './knowledge_claim_state_type.ts'
import { KnowledgeConstructionState } from './knowledge_construction_state_type.ts'
import { KnowledgeCraftState } from './knowledge_craft_state_type.ts'
import { KnowledgeDeployableState } from './knowledge_deployable_state_type.ts'
import { KnowledgeEnemyState } from './knowledge_enemy_state_type.ts'
import { KnowledgeEntityEntry } from './knowledge_entity_entry_type.ts'
import { KnowledgeEntry } from './knowledge_entry_type.ts'
import { KnowledgeExtractState } from './knowledge_extract_state_type.ts'
import { KnowledgeItemState } from './knowledge_item_state_type.ts'
import { KnowledgeLocationEntry } from './knowledge_location_entry_type.ts'
import { KnowledgeLoreState } from './knowledge_lore_state_type.ts'
import { KnowledgeNpcState } from './knowledge_npc_state_type.ts'
import { KnowledgePavingState } from './knowledge_paving_state_type.ts'
import { KnowledgePillarShapingState } from './knowledge_pillar_shaping_state_type.ts'
import { KnowledgeResourcePlacementState } from './knowledge_resource_placement_state_type.ts'
import { KnowledgeResourceState } from './knowledge_resource_state_type.ts'
import { KnowledgeRuinsState } from './knowledge_ruins_state_type.ts'
import { KnowledgeScrollDesc } from './knowledge_scroll_desc_type.ts'
import { KnowledgeScrollTypeDesc } from './knowledge_scroll_type_desc_type.ts'
import { KnowledgeSecondaryState } from './knowledge_secondary_state_type.ts'
import { KnowledgeStatModifierDesc } from './knowledge_stat_modifier_desc_type.ts'
import { KnowledgeState } from './knowledge_state_type.ts'
import { KnowledgeVaultState } from './knowledge_vault_state_type.ts'
import { LargeHexTileMessage } from './large_hex_tile_message_type.ts'
import { LevelRequirement } from './level_requirement_type.ts'
import { LightSourceState } from './light_source_state_type.ts'
import { LocationStateOp } from './location_state_op_type.ts'
import { LocationState } from './location_state_type.ts'
import { LootChestDesc } from './loot_chest_desc_type.ts'
import { LootChestState } from './loot_chest_state_type.ts'
import { LootRarityDesc } from './loot_rarity_desc_type.ts'
import { LootTableDesc } from './loot_table_desc_type.ts'
import { LostItemsState } from './lost_items_state_type.ts'
import { MessageContents } from './message_contents_type.ts'
import { MobileEntityState } from './mobile_entity_state_type.ts'
import { MountingState } from './mounting_state_type.ts'
import { MoveValidationParamsDesc } from './move_validation_params_desc_type.ts'
import { MoveValidationStrikeCounterState } from './move_validation_strike_counter_state_type.ts'
import { MovementSpeed } from './movement_speed_type.ts'
import { MovementType } from './movement_type_type.ts'
import { NotificationSeverity } from './notification_severity_type.ts'
import { NpcDesc } from './npc_desc_type.ts'
import { NpcState } from './npc_state_type.ts'
import { NpcType } from './npc_type_type.ts'
import { OffsetCoordinatesFloat } from './offset_coordinates_float_type.ts'
import { OffsetCoordinatesSmallMessage } from './offset_coordinates_small_message_type.ts'
import { OnClaimMembersChangedMsg } from './on_claim_members_changed_msg_type.ts'
import { OnDeployableRecoveredMsg } from './on_deployable_recovered_msg_type.ts'
import { OnEmpireBuildingDeletedMsg } from './on_empire_building_deleted_msg_type.ts'
import { OnPlayerJoinedEmpireMsg } from './on_player_joined_empire_msg_type.ts'
import { OnPlayerLeftEmpireMsg } from './on_player_left_empire_msg_type.ts'
import { OnPlayerNameSetMsg } from './on_player_name_set_msg_type.ts'
import { OnRegionPlayerCreatedMsg } from './on_region_player_created_msg_type.ts'
import { OnboardingRewardDesc } from './onboarding_reward_desc_type.ts'
import { OnboardingState } from './onboarding_state_type.ts'
import { OnlineTimestamp } from './online_timestamp_type.ts'
import { ParametersDesc } from './parameters_desc_type.ts'
import { ParametersPlayerMoveDesc } from './parameters_player_move_desc_type.ts'
import { PassiveCraftState } from './passive_craft_state_type.ts'
import { PassiveCraftStatus } from './passive_craft_status_type.ts'
import { PathfindingDesc } from './pathfinding_desc_type.ts'
import { PathfindingTraversalOption } from './pathfinding_traversal_option_type.ts'
import { PavedTileState } from './paved_tile_state_type.ts'
import { PavingTileDesc } from './paving_tile_desc_type.ts'
import { PermissionGroup } from './permission_group_type.ts'
import { PermissionState } from './permission_state_type.ts'
import { Permission } from './permission_type.ts'
import { PillarShapingDesc } from './pillar_shaping_desc_type.ts'
import { PillarShapingState } from './pillar_shaping_state_type.ts'
import { PlayerActionDesc } from './player_action_desc_type.ts'
import { PlayerActionLayer } from './player_action_layer_type.ts'
import { PlayerActionResult } from './player_action_result_type.ts'
import { PlayerActionState } from './player_action_state_type.ts'
import { PlayerActionType } from './player_action_type_type.ts'
import { PlayerCreateMsg } from './player_create_msg_type.ts'
import { PlayerDeveloperNotificationState } from './player_developer_notification_state_type.ts'
import { PlayerHousingDesc } from './player_housing_desc_type.ts'
import { PlayerHousingStateOp } from './player_housing_state_op_type.ts'
import { PlayerHousingState } from './player_housing_state_type.ts'
import { PlayerLowercaseUsernameState } from './player_lowercase_username_state_type.ts'
import { PlayerNoteState } from './player_note_state_type.ts'
import { PlayerNotificationEvent } from './player_notification_event_type.ts'
import { PlayerPrefsState } from './player_prefs_state_type.ts'
import { PlayerQueueState } from './player_queue_state_type.ts'
import { PlayerReportStateOp } from './player_report_state_op_type.ts'
import { PlayerReportStateTimestamp } from './player_report_state_timestamp_type.ts'
import { PlayerReportState } from './player_report_state_type.ts'
import { PlayerSetNameRequest } from './player_set_name_request_type.ts'
import { PlayerShardState } from './player_shard_state_type.ts'
import { PlayerSignInRequest } from './player_sign_in_request_type.ts'
import { PlayerSkipQueueMsg } from './player_skip_queue_msg_type.ts'
import { PlayerState } from './player_state_type.ts'
import { PlayerTimestampState } from './player_timestamp_state_type.ts'
import { PlayerUsernameState } from './player_username_state_type.ts'
import { PlayerVoteAnswerRequest } from './player_vote_answer_request_type.ts'
import { PlayerVoteConcludeTimer } from './player_vote_conclude_timer_type.ts'
import { PlayerVoteState } from './player_vote_state_type.ts'
import { PlayerVoteType } from './player_vote_type_type.ts'
import { Pocket } from './pocket_type.ts'
import { PortalState } from './portal_state_type.ts'
import { PrivateParametersDesc } from './private_parameters_desc_type.ts'
import { ProbabilisticItemStack } from './probabilistic_item_stack_type.ts'
import { ProgressiveActionState } from './progressive_action_state_type.ts'
import { ProgressiveActionStatus } from './progressive_action_status_type.ts'
import { ProjectSiteState } from './project_site_state_type.ts'
import { Rarity } from './rarity_type.ts'
import { RecoverDeployableMsg } from './recover_deployable_msg_type.ts'
import { RegionConnectionInfoOp } from './region_connection_info_op_type.ts'
import { RegionConnectionInfo } from './region_connection_info_type.ts'
import { RegionDestroySiegeEngineMsg } from './region_destroy_siege_engine_msg_type.ts'
import { RegionPopulationInfoOp } from './region_population_info_op_type.ts'
import { RegionPopulationInfo } from './region_population_info_type.ts'
import { RegionSignInParametersOp } from './region_sign_in_parameters_op_type.ts'
import { RegionSignInParameters } from './region_sign_in_parameters_type.ts'
import { RentState } from './rent_state_type.ts'
import { ReservedNameDesc } from './reserved_name_desc_type.ts'
import { ResourceClumpDesc } from './resource_clump_desc_type.ts'
import { ResourceCount } from './resource_count_type.ts'
import { ResourceDesc } from './resource_desc_type.ts'
import { ResourceGrowthRecipeDesc } from './resource_growth_recipe_desc_type.ts'
import { ResourceHealthState } from './resource_health_state_type.ts'
import { ResourcePlacementRecipeDesc } from './resource_placement_recipe_desc_type.ts'
import { ResourceState } from './resource_state_type.ts'
import { RezSickLongTermState } from './rez_sick_long_term_state_type.ts'
import { Role } from './role_type.ts'
import { SatiationState } from './satiation_state_type.ts'
import { SecondaryKnowledgeDesc } from './secondary_knowledge_desc_type.ts'
import { ServerIdentity } from './server_identity_type.ts'
import { SignPlayerOutMsg } from './sign_player_out_msg_type.ts'
import { SignedInPlayerState } from './signed_in_player_state_type.ts'
import { SingleResourceToClumpDesc } from './single_resource_to_clump_desc_type.ts'
import { SkillCategory } from './skill_category_type.ts'
import { SkillDesc } from './skill_desc_type.ts'
import { SkillType } from './skill_type_type.ts'
import { StagedStaticData } from './staged_static_data_type.ts'
import { StaminaState } from './stamina_state_type.ts'
import { StarvingPlayerState } from './starving_player_state_type.ts'
import { StaticDataUpload } from './static_data_upload_type.ts'
import { SurfaceType } from './surface_type_type.ts'
import { TargetState } from './target_state_type.ts'
import { TargetableState } from './targetable_state_type.ts'
import { TargetingMatrixDesc } from './targeting_matrix_desc_type.ts'
import { TeleportItemDesc } from './teleport_item_desc_type.ts'
import { TeleportLocation } from './teleport_location_type.ts'
import { TeleportLocationType } from './teleport_location_type_type.ts'
import { TeleportationEnergyState } from './teleportation_energy_state_type.ts'
import { TerraformProgressState } from './terraform_progress_state_type.ts'
import { TerraformRecipeDesc } from './terraform_recipe_desc_type.ts'
import { TerrainCell } from './terrain_cell_type.ts'
import { TerrainChunkState } from './terrain_chunk_state_type.ts'
import { TheGreatPlaceHolderTable } from './the_great_place_holder_table_type.ts'
import { ThreatState } from './threat_state_type.ts'
import { ToolDesc } from './tool_desc_type.ts'
import { ToolRequirement } from './tool_requirement_type.ts'
import { ToolTypeDesc } from './tool_type_desc_type.ts'
import { ToolbarState } from './toolbar_state_type.ts'
import { TradeOrderState } from './trade_order_state_type.ts'
import { TradePocket } from './trade_pocket_type.ts'
import { TradeSessionState } from './trade_session_state_type.ts'
import { TradeSessionStatus } from './trade_session_status_type.ts'
import { TransferPlayerHousingMsg } from './transfer_player_housing_msg_type.ts'
import { TransferPlayerMsg } from './transfer_player_msg_type.ts'
import { TravelerTaskDesc } from './traveler_task_desc_type.ts'
import { TravelerTaskState } from './traveler_task_state_type.ts'
import { TravelerTradeOrderDesc } from './traveler_trade_order_desc_type.ts'
import { TraversalSettings } from './traversal_settings_type.ts'
import { UnclaimedCollectiblesState } from './unclaimed_collectibles_state_type.ts'
import { UnclaimedShardsState } from './unclaimed_shards_state_type.ts'
import { UserAuthenticationStateOp } from './user_authentication_state_op_type.ts'
import { UserAuthenticationState } from './user_authentication_state_type.ts'
import { UserModerationCreateUserPolicyRequest } from './user_moderation_create_user_policy_request_type.ts'
import { UserModerationPolicy } from './user_moderation_policy_type.ts'
import { UserModerationStateOp } from './user_moderation_state_op_type.ts'
import { UserModerationState } from './user_moderation_state_type.ts'
import { UserPreviousRegionState } from './user_previous_region_state_type.ts'
import { UserRegionState } from './user_region_state_type.ts'
import { UserStateOp } from './user_state_op_type.ts'
import { UserState } from './user_state_type.ts'
import { UserUpdateRegionMsg } from './user_update_region_msg_type.ts'
import { VaultCollectible } from './vault_collectible_type.ts'
import { VaultState } from './vault_state_type.ts'
import { VfxAttachmentPoint } from './vfx_attachment_point_type.ts'
import { WallDesc } from './wall_desc_type.ts'
import { WeaponDesc } from './weapon_desc_type.ts'
import { WeaponTypeDesc } from './weapon_type_desc_type.ts'
import { WorldRegionNameState } from './world_region_name_state_type.ts'
import { WorldRegionState } from './world_region_state_type.ts'
export {
  AchievementDesc,
  ActionCooldown,
  ActionState,
  ActiveBuff,
  ActiveBuffState,
  AdminBroadcast,
  AdminBroadcastMessageMsg,
  AiDebugState,
  AlertDesc,
  AlertState,
  AlertType,
  AttachedHerdsState,
  AttackOutcomeState,
  AuctionListingState,
  AutoClaimState,
  BarterStallState,
  Biome,
  BiomeDesc,
  BlockedIdentity,
  BlockedIdentityOp,
  BuffCategory,
  BuffDesc,
  BuffEffect,
  BuffTypeDesc,
  BuildingCategory,
  BuildingClaimDesc,
  BuildingDesc,
  BuildingFunction,
  BuildingFunctionTypeMappingDesc,
  BuildingInteractionLevel,
  BuildingNicknameState,
  BuildingNicknameStateOp,
  BuildingPortalDesc,
  BuildingRepairsDesc,
  BuildingRequirement,
  BuildingSpawnDesc,
  BuildingSpawnType,
  BuildingState,
  BuildingStateOp,
  BuildingTypeDesc,
  CappedLevelRequirement,
  CargoDesc,
  CharacterStatDesc,
  CharacterStatsState,
  CharacterStatType,
  ChatChannel,
  ChatMessageState,
  CheatShardsGrantRequest,
  ChestLootRarity,
  ChestRarityDesc,
  ChunkCoordinatesMessage,
  ClaimCreateEmpireSettlementMsg,
  ClaimLocalState,
  ClaimMemberState,
  ClaimMemberStateOp,
  ClaimPermission,
  ClaimRecruitmentState,
  ClaimState,
  ClaimStateOp,
  ClaimTechDesc,
  ClaimTechState,
  ClaimTileCost,
  ClaimTileState,
  ClaimType,
  ClimbRequirementDesc,
  ClosedListingState,
  ClothingDesc,
  ClothingMask,
  ClothingVisual,
  CollectibleDesc,
  CollectibleType,
  CombatActionDesc,
  CombatState,
  Config,
  ConstructionRecipeDesc,
  CraftingRecipeDesc,
  CsvStatEntry,
  DeconstructionRecipeDesc,
  DeleteEmpireMsg,
  DeployableCollectibleState,
  DeployableDesc,
  DeployableState,
  DeployableType,
  DimensionDescriptionState,
  DimensionNetworkState,
  DimensionType,
  DistantVisibleEntity,
  DistantVisibleEntityDesc,
  DroppedInventoryState,
  DuelState,
  ElevatorDesc,
  EmoteDesc,
  EmpireChangeEmblemRequest,
  EmpireChunkState,
  EmpireChunkStateOp,
  EmpireClaimJoinMsg,
  EmpireCollectHexiteCapsuleMsg,
  EmpireColorDesc,
  EmpireCraftSuppliesTimer,
  EmpireCreateBuildingMsg,
  EmpireDecayLoopTimer,
  EmpireDirectiveState,
  EmpireDismantleRequest,
  EmpireDonateShardsRequest,
  EmpireEmblemState,
  EmpireExpansionState,
  EmpireExpansionStateOp,
  EmpireFormRequest,
  EmpireFoundryState,
  EmpireIconDesc,
  EmpireLeaveRequest,
  EmpireLogState,
  EmpireMarkForExpansionRequest,
  EmpireMarkForSiegeRequest,
  EmpireNodeSiegeState,
  EmpireNodeSiegeStateOp,
  EmpireNodeState,
  EmpireNodeStateOp,
  EmpireNotificationDesc,
  EmpireNotificationState,
  EmpireNotificationType,
  EmpirePermission,
  EmpirePlayerDataState,
  EmpirePlayerDataStateOp,
  EmpirePlayerJoinRequest,
  EmpirePlayerLeaveRequest,
  EmpirePlayerLogState,
  EmpireQueueSuppliesMsg,
  EmpireRankDesc,
  EmpireRankState,
  EmpireRankStateOp,
  EmpireRemoveCrownMsg,
  EmpireResupplyNodeMsg,
  EmpireSetDirectiveMessageRequest,
  EmpireSetPlayerRankRequest,
  EmpireSetRankTitleRequest,
  EmpireSettlementState,
  EmpireSettlementStateOp,
  EmpireSiegeAddSuppliesMsg,
  EmpireSiegeEngineState,
  EmpireSiegeLoopTimer,
  EmpireStartSiegeMsg,
  EmpireState,
  EmpireStateOp,
  EmpireSuppliesDesc,
  EmpireTerritoryDesc,
  EmpireUpdateEmperorCrownMsg,
  EmpireUpdatePermissionsRequest,
  EnemyAiParamsDesc,
  EnemyDesc,
  EnemyMobMonitorState,
  EnemyState,
  EnemyStatus,
  EnemyType,
  EntityType,
  EnvironmentDebuffDesc,
  EnvironmentResistanceType,
  EquipmentDesc,
  EquipmentSlot,
  EquipmentSlotType,
  EquipmentState,
  EquipmentVisualType,
  ExperienceStack,
  ExperienceStackF32,
  ExperienceState,
  ExplorationChunksState,
  ExtractionRecipeDesc,
  ExtractOutcomeState,
  FloatHexTileMessage,
  FoodDesc,
  FootprintTile,
  FootprintTileState,
  FootprintType,
  ForceGenerateTypes,
  GateDesc,
  GlobalDeleteEmpireBuildingMsg,
  Globals,
  GlobalSearchState,
  GrantedHubItemState,
  GrantHubItemMsg,
  GrowthState,
  HandEquipmentVisual,
  HealthState,
  HerdState,
  HexDirection,
  HexiteExchangeEntryDesc,
  HubItemType,
  IdentityRole,
  IdentityRoleOp,
  InputItemStack,
  InteriorCollapseTriggerState,
  InteriorEnvironmentDesc,
  InteriorInstanceDesc,
  InteriorNetworkDesc,
  InteriorPortalConnectionsDesc,
  InteriorShapeDesc,
  InteriorSpawnDesc,
  InteriorSpawnType,
  InterModuleMessage,
  InterModuleMessageCounter,
  InterModuleResponseMessageCounter,
  InterModuleTableUpdates,
  InventoryState,
  ItemConversionLocationContext,
  ItemConversionRecipeDesc,
  ItemDesc,
  ItemListDesc,
  ItemListPossibility,
  ItemStack,
  ItemType,
  KnowledgeAchievementState,
  KnowledgeBattleActionState,
  KnowledgeBuildingState,
  KnowledgeCargoState,
  KnowledgeClaimState,
  KnowledgeConstructionState,
  KnowledgeCraftState,
  KnowledgeDeployableState,
  KnowledgeEnemyState,
  KnowledgeEntityEntry,
  KnowledgeEntry,
  KnowledgeExtractState,
  KnowledgeItemState,
  KnowledgeLocationEntry,
  KnowledgeLoreState,
  KnowledgeNpcState,
  KnowledgePavingState,
  KnowledgePillarShapingState,
  KnowledgeResourcePlacementState,
  KnowledgeResourceState,
  KnowledgeRuinsState,
  KnowledgeScrollDesc,
  KnowledgeScrollTypeDesc,
  KnowledgeSecondaryState,
  KnowledgeState,
  KnowledgeStatModifierDesc,
  KnowledgeVaultState,
  LargeHexTileMessage,
  LevelRequirement,
  LightSourceState,
  LocationState,
  LocationStateOp,
  LootChestDesc,
  LootChestState,
  LootRarityDesc,
  LootTableDesc,
  LostItemsState,
  MessageContents,
  MobileEntityState,
  MountingState,
  MovementSpeed,
  MovementType,
  MoveValidationParamsDesc,
  MoveValidationStrikeCounterState,
  NotificationSeverity,
  NpcDesc,
  NpcState,
  NpcType,
  OffsetCoordinatesFloat,
  OffsetCoordinatesSmallMessage,
  OnboardingRewardDesc,
  OnboardingState,
  OnClaimMembersChangedMsg,
  OnDeployableRecoveredMsg,
  OnEmpireBuildingDeletedMsg,
  OnlineTimestamp,
  OnPlayerJoinedEmpireMsg,
  OnPlayerLeftEmpireMsg,
  OnPlayerNameSetMsg,
  OnRegionPlayerCreatedMsg,
  ParametersDesc,
  ParametersPlayerMoveDesc,
  PassiveCraftState,
  PassiveCraftStatus,
  PathfindingDesc,
  PathfindingTraversalOption,
  PavedTileState,
  PavingTileDesc,
  Permission,
  PermissionGroup,
  PermissionState,
  PillarShapingDesc,
  PillarShapingState,
  PlayerActionDesc,
  PlayerActionLayer,
  PlayerActionResult,
  PlayerActionState,
  PlayerActionType,
  PlayerCreateMsg,
  PlayerDeveloperNotificationState,
  PlayerHousingDesc,
  PlayerHousingState,
  PlayerHousingStateOp,
  PlayerLowercaseUsernameState,
  PlayerNoteState,
  PlayerNotificationEvent,
  PlayerPrefsState,
  PlayerQueueState,
  PlayerReportState,
  PlayerReportStateOp,
  PlayerReportStateTimestamp,
  PlayerSetNameRequest,
  PlayerShardState,
  PlayerSignInRequest,
  PlayerSkipQueueMsg,
  PlayerState,
  PlayerTimestampState,
  PlayerUsernameState,
  PlayerVoteAnswer,
  PlayerVoteAnswerRequest,
  PlayerVoteConcludeTimer,
  PlayerVoteState,
  PlayerVoteType,
  Pocket,
  PortalState,
  PrivateParametersDesc,
  ProbabilisticItemStack,
  ProgressiveActionState,
  ProgressiveActionStatus,
  ProjectSiteState,
  Rarity,
  RecoverDeployableMsg,
  RegionConnectionInfo,
  RegionConnectionInfoOp,
  RegionDestroySiegeEngineMsg,
  RegionPopulationInfo,
  RegionPopulationInfoOp,
  RegionSignInParameters,
  RegionSignInParametersOp,
  RentState,
  ReservedNameDesc,
  ResourceClumpDesc,
  ResourceCount,
  ResourceDesc,
  ResourceGrowthRecipeDesc,
  ResourceHealthState,
  ResourcePlacementRecipeDesc,
  ResourceState,
  RezSickLongTermState,
  Role,
  SatiationState,
  SecondaryKnowledgeDesc,
  ServerIdentity,
  SignedInPlayerState,
  SignPlayerOutMsg,
  SingleResourceToClumpDesc,
  SkillCategory,
  SkillDesc,
  SkillType,
  StagedStaticData,
  StaminaState,
  StarvingPlayerState,
  StaticDataUpload,
  SurfaceType,
  TargetableState,
  TargetingMatrixDesc,
  TargetState,
  TeleportationEnergyState,
  TeleportItemDesc,
  TeleportLocation,
  TeleportLocationType,
  TerraformProgressState,
  TerraformRecipeDesc,
  TerrainCell,
  TerrainChunkState,
  TheGreatPlaceHolderTable,
  ThreatState,
  ToolbarState,
  ToolDesc,
  ToolRequirement,
  ToolTypeDesc,
  TradeOrderState,
  TradePocket,
  TradeSessionState,
  TradeSessionStatus,
  TransferPlayerHousingMsg,
  TransferPlayerMsg,
  TravelerTaskDesc,
  TravelerTaskState,
  TravelerTradeOrderDesc,
  TraversalSettings,
  UnclaimedCollectiblesState,
  UnclaimedShardsState,
  UserAuthenticationState,
  UserAuthenticationStateOp,
  UserModerationCreateUserPolicyRequest,
  UserModerationPolicy,
  UserModerationState,
  UserModerationStateOp,
  UserPreviousRegionState,
  UserRegionState,
  UserState,
  UserStateOp,
  UserUpdateRegionMsg,
  VaultCollectible,
  VaultState,
  VfxAttachmentPoint,
  WallDesc,
  WeaponDesc,
  WeaponTypeDesc,
  WorldRegionNameState,
  WorldRegionState
}

const REMOTE_MODULE = {
  tables: {
    a_i_debug_state: {
      tableName: 'a_i_debug_state',
      rowType: AiDebugState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: AiDebugState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    achievement_desc: {
      tableName: 'achievement_desc',
      rowType: AchievementDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: AchievementDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    action_state: {
      tableName: 'action_state',
      rowType: ActionState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ActionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    active_buff_state: {
      tableName: 'active_buff_state',
      rowType: ActiveBuffState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ActiveBuffState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    admin_broadcast: {
      tableName: 'admin_broadcast',
      rowType: AdminBroadcast.getTypeScriptAlgebraicType(),
      primaryKey: 'version',
      primaryKeyInfo: {
        colName: 'version',
        colType: AdminBroadcast.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    alert_desc: {
      tableName: 'alert_desc',
      rowType: AlertDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'alertType',
      primaryKeyInfo: {
        colName: 'alertType',
        colType: AlertDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    alert_state: {
      tableName: 'alert_state',
      rowType: AlertState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: AlertState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    attached_herds_state: {
      tableName: 'attached_herds_state',
      rowType: AttachedHerdsState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: AttachedHerdsState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    attack_outcome_state: {
      tableName: 'attack_outcome_state',
      rowType: AttackOutcomeState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: AttackOutcomeState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    auto_claim_state: {
      tableName: 'auto_claim_state',
      rowType: AutoClaimState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: AutoClaimState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    barter_stall_state: {
      tableName: 'barter_stall_state',
      rowType: BarterStallState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: BarterStallState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    biome_desc: {
      tableName: 'biome_desc',
      rowType: BiomeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'biomeType',
      primaryKeyInfo: {
        colName: 'biomeType',
        colType: BiomeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    blocked_identity: {
      tableName: 'blocked_identity',
      rowType: BlockedIdentity.getTypeScriptAlgebraicType(),
      primaryKey: 'identity',
      primaryKeyInfo: {
        colName: 'identity',
        colType: BlockedIdentity.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    buff_desc: {
      tableName: 'buff_desc',
      rowType: BuffDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: BuffDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    buff_type_desc: {
      tableName: 'buff_type_desc',
      rowType: BuffTypeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: BuffTypeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    building_claim_desc: {
      tableName: 'building_claim_desc',
      rowType: BuildingClaimDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'buildingId',
      primaryKeyInfo: {
        colName: 'buildingId',
        colType: BuildingClaimDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    building_desc: {
      tableName: 'building_desc',
      rowType: BuildingDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: BuildingDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    building_function_type_mapping_desc: {
      tableName: 'building_function_type_mapping_desc',
      rowType: BuildingFunctionTypeMappingDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'typeId',
      primaryKeyInfo: {
        colName: 'typeId',
        colType: BuildingFunctionTypeMappingDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    building_nickname_state: {
      tableName: 'building_nickname_state',
      rowType: BuildingNicknameState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: BuildingNicknameState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    building_portal_desc: {
      tableName: 'building_portal_desc',
      rowType: BuildingPortalDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: BuildingPortalDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    building_repairs_desc: {
      tableName: 'building_repairs_desc',
      rowType: BuildingRepairsDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'cargoId',
      primaryKeyInfo: {
        colName: 'cargoId',
        colType: BuildingRepairsDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    building_spawn_desc: {
      tableName: 'building_spawn_desc',
      rowType: BuildingSpawnDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: BuildingSpawnDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    building_state: {
      tableName: 'building_state',
      rowType: BuildingState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: BuildingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    building_type_desc: {
      tableName: 'building_type_desc',
      rowType: BuildingTypeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: BuildingTypeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    buy_order_state: {
      tableName: 'buy_order_state',
      rowType: AuctionListingState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: AuctionListingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    cargo_desc: {
      tableName: 'cargo_desc',
      rowType: CargoDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: CargoDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    character_stat_desc: {
      tableName: 'character_stat_desc',
      rowType: CharacterStatDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'statType',
      primaryKeyInfo: {
        colName: 'statType',
        colType: CharacterStatDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    character_stats_state: {
      tableName: 'character_stats_state',
      rowType: CharacterStatsState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: CharacterStatsState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    chat_message_state: {
      tableName: 'chat_message_state',
      rowType: ChatMessageState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ChatMessageState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    chest_rarity_desc: {
      tableName: 'chest_rarity_desc',
      rowType: ChestRarityDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: ChestRarityDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    claim_local_state: {
      tableName: 'claim_local_state',
      rowType: ClaimLocalState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ClaimLocalState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    claim_member_state: {
      tableName: 'claim_member_state',
      rowType: ClaimMemberState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ClaimMemberState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    claim_recruitment_state: {
      tableName: 'claim_recruitment_state',
      rowType: ClaimRecruitmentState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ClaimRecruitmentState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    claim_state: {
      tableName: 'claim_state',
      rowType: ClaimState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ClaimState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    claim_tech_desc: {
      tableName: 'claim_tech_desc',
      rowType: ClaimTechDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: ClaimTechDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    claim_tech_state: {
      tableName: 'claim_tech_state',
      rowType: ClaimTechState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ClaimTechState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    claim_tile_cost: {
      tableName: 'claim_tile_cost',
      rowType: ClaimTileCost.getTypeScriptAlgebraicType(),
      primaryKey: 'tileCount',
      primaryKeyInfo: {
        colName: 'tileCount',
        colType: ClaimTileCost.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    claim_tile_state: {
      tableName: 'claim_tile_state',
      rowType: ClaimTileState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ClaimTileState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    climb_requirement_desc: {
      tableName: 'climb_requirement_desc',
      rowType: ClimbRequirementDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: ClimbRequirementDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    closed_listing_state: {
      tableName: 'closed_listing_state',
      rowType: ClosedListingState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ClosedListingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    clothing_desc: {
      tableName: 'clothing_desc',
      rowType: ClothingDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'itemId',
      primaryKeyInfo: {
        colName: 'itemId',
        colType: ClothingDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    collectible_desc: {
      tableName: 'collectible_desc',
      rowType: CollectibleDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: CollectibleDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    combat_action_desc: {
      tableName: 'combat_action_desc',
      rowType: CombatActionDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: CombatActionDesc.getTypeScriptAlgebraicType().product.elements[1].algebraicType
      }
    },
    combat_state: {
      tableName: 'combat_state',
      rowType: CombatState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: CombatState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    config: {
      tableName: 'config',
      rowType: Config.getTypeScriptAlgebraicType(),
      primaryKey: 'version',
      primaryKeyInfo: {
        colName: 'version',
        colType: Config.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    construction_recipe_desc: {
      tableName: 'construction_recipe_desc',
      rowType: ConstructionRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: ConstructionRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    crafting_recipe_desc: {
      tableName: 'crafting_recipe_desc',
      rowType: CraftingRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: CraftingRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    deconstruction_recipe_desc: {
      tableName: 'deconstruction_recipe_desc',
      rowType: DeconstructionRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: DeconstructionRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    deployable_collectible_state: {
      tableName: 'deployable_collectible_state',
      rowType: DeployableCollectibleState.getTypeScriptAlgebraicType(),
      primaryKey: 'deployableEntityId',
      primaryKeyInfo: {
        colName: 'deployableEntityId',
        colType: DeployableCollectibleState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    deployable_desc: {
      tableName: 'deployable_desc',
      rowType: DeployableDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: DeployableDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    deployable_state: {
      tableName: 'deployable_state',
      rowType: DeployableState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: DeployableState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    dimension_description_state: {
      tableName: 'dimension_description_state',
      rowType: DimensionDescriptionState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: DimensionDescriptionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    dimension_network_state: {
      tableName: 'dimension_network_state',
      rowType: DimensionNetworkState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: DimensionNetworkState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    distant_visible_entity: {
      tableName: 'distant_visible_entity',
      rowType: DistantVisibleEntity.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: DistantVisibleEntity.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    distant_visible_entity_desc: {
      tableName: 'distant_visible_entity_desc',
      rowType: DistantVisibleEntityDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: DistantVisibleEntityDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    dropped_inventory_state: {
      tableName: 'dropped_inventory_state',
      rowType: DroppedInventoryState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: DroppedInventoryState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    duel_state: {
      tableName: 'duel_state',
      rowType: DuelState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: DuelState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    elevator_desc: {
      tableName: 'elevator_desc',
      rowType: ElevatorDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'buildingId',
      primaryKeyInfo: {
        colName: 'buildingId',
        colType: ElevatorDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    emote_desc: {
      tableName: 'emote_desc',
      rowType: EmoteDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: EmoteDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_chunk_state: {
      tableName: 'empire_chunk_state',
      rowType: EmpireChunkState.getTypeScriptAlgebraicType(),
      primaryKey: 'chunkIndex',
      primaryKeyInfo: {
        colName: 'chunkIndex',
        colType: EmpireChunkState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_color_desc: {
      tableName: 'empire_color_desc',
      rowType: EmpireColorDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: EmpireColorDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_craft_supplies_timer: {
      tableName: 'empire_craft_supplies_timer',
      rowType: EmpireCraftSuppliesTimer.getTypeScriptAlgebraicType(),
      primaryKey: 'scheduledId',
      primaryKeyInfo: {
        colName: 'scheduledId',
        colType: EmpireCraftSuppliesTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_decay_loop_timer: {
      tableName: 'empire_decay_loop_timer',
      rowType: EmpireDecayLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: 'scheduledId',
      primaryKeyInfo: {
        colName: 'scheduledId',
        colType: EmpireDecayLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_directive_state: {
      tableName: 'empire_directive_state',
      rowType: EmpireDirectiveState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: EmpireDirectiveState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_emblem_state: {
      tableName: 'empire_emblem_state',
      rowType: EmpireEmblemState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: EmpireEmblemState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_expansion_state: {
      tableName: 'empire_expansion_state',
      rowType: EmpireExpansionState.getTypeScriptAlgebraicType(),
      primaryKey: 'chunkIndex',
      primaryKeyInfo: {
        colName: 'chunkIndex',
        colType: EmpireExpansionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_foundry_state: {
      tableName: 'empire_foundry_state',
      rowType: EmpireFoundryState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: EmpireFoundryState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_icon_desc: {
      tableName: 'empire_icon_desc',
      rowType: EmpireIconDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: EmpireIconDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_log_state: {
      tableName: 'empire_log_state',
      rowType: EmpireLogState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: EmpireLogState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_node_siege_state: {
      tableName: 'empire_node_siege_state',
      rowType: EmpireNodeSiegeState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: EmpireNodeSiegeState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_node_state: {
      tableName: 'empire_node_state',
      rowType: EmpireNodeState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: EmpireNodeState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_notification_desc: {
      tableName: 'empire_notification_desc',
      rowType: EmpireNotificationDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: EmpireNotificationDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_notification_state: {
      tableName: 'empire_notification_state',
      rowType: EmpireNotificationState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: EmpireNotificationState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_player_data_state: {
      tableName: 'empire_player_data_state',
      rowType: EmpirePlayerDataState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: EmpirePlayerDataState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_player_log_state: {
      tableName: 'empire_player_log_state',
      rowType: EmpirePlayerLogState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: EmpirePlayerLogState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_rank_desc: {
      tableName: 'empire_rank_desc',
      rowType: EmpireRankDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'rank',
      primaryKeyInfo: {
        colName: 'rank',
        colType: EmpireRankDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_rank_state: {
      tableName: 'empire_rank_state',
      rowType: EmpireRankState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: EmpireRankState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_settlement_state: {
      tableName: 'empire_settlement_state',
      rowType: EmpireSettlementState.getTypeScriptAlgebraicType(),
      primaryKey: 'buildingEntityId',
      primaryKeyInfo: {
        colName: 'buildingEntityId',
        colType: EmpireSettlementState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_siege_engine_state: {
      tableName: 'empire_siege_engine_state',
      rowType: EmpireSiegeEngineState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: EmpireSiegeEngineState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_siege_loop_timer: {
      tableName: 'empire_siege_loop_timer',
      rowType: EmpireSiegeLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: 'scheduledId',
      primaryKeyInfo: {
        colName: 'scheduledId',
        colType: EmpireSiegeLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_state: {
      tableName: 'empire_state',
      rowType: EmpireState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: EmpireState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_supplies_desc: {
      tableName: 'empire_supplies_desc',
      rowType: EmpireSuppliesDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'cargoId',
      primaryKeyInfo: {
        colName: 'cargoId',
        colType: EmpireSuppliesDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    empire_territory_desc: {
      tableName: 'empire_territory_desc',
      rowType: EmpireTerritoryDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: EmpireTerritoryDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    enemy_ai_params_desc: {
      tableName: 'enemy_ai_params_desc',
      rowType: EnemyAiParamsDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: EnemyAiParamsDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    enemy_desc: {
      tableName: 'enemy_desc',
      rowType: EnemyDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'enemyType',
      primaryKeyInfo: {
        colName: 'enemyType',
        colType: EnemyDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    enemy_mob_monitor_state: {
      tableName: 'enemy_mob_monitor_state',
      rowType: EnemyMobMonitorState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: EnemyMobMonitorState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    enemy_state: {
      tableName: 'enemy_state',
      rowType: EnemyState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: EnemyState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    environment_debuff_desc: {
      tableName: 'environment_debuff_desc',
      rowType: EnvironmentDebuffDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'buffId',
      primaryKeyInfo: {
        colName: 'buffId',
        colType: EnvironmentDebuffDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    equipment_desc: {
      tableName: 'equipment_desc',
      rowType: EquipmentDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'itemId',
      primaryKeyInfo: {
        colName: 'itemId',
        colType: EquipmentDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    equipment_state: {
      tableName: 'equipment_state',
      rowType: EquipmentState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: EquipmentState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    experience_state: {
      tableName: 'experience_state',
      rowType: ExperienceState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ExperienceState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    exploration_chunks_state: {
      tableName: 'exploration_chunks_state',
      rowType: ExplorationChunksState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ExplorationChunksState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    extract_outcome_state: {
      tableName: 'extract_outcome_state',
      rowType: ExtractOutcomeState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ExtractOutcomeState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    extraction_recipe_desc: {
      tableName: 'extraction_recipe_desc',
      rowType: ExtractionRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: ExtractionRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    food_desc: {
      tableName: 'food_desc',
      rowType: FoodDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'itemId',
      primaryKeyInfo: {
        colName: 'itemId',
        colType: FoodDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    footprint_tile_state: {
      tableName: 'footprint_tile_state',
      rowType: FootprintTileState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: FootprintTileState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    force_generate_types: {
      tableName: 'force_generate_types',
      rowType: ForceGenerateTypes.getTypeScriptAlgebraicType()
    },
    gate_desc: {
      tableName: 'gate_desc',
      rowType: GateDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'buildingId',
      primaryKeyInfo: {
        colName: 'buildingId',
        colType: GateDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    global_search_state: {
      tableName: 'global_search_state',
      rowType: GlobalSearchState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: GlobalSearchState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    globals: {
      tableName: 'globals',
      rowType: Globals.getTypeScriptAlgebraicType(),
      primaryKey: 'version',
      primaryKeyInfo: {
        colName: 'version',
        colType: Globals.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    granted_hub_item_state: {
      tableName: 'granted_hub_item_state',
      rowType: GrantedHubItemState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: GrantedHubItemState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    growth_state: {
      tableName: 'growth_state',
      rowType: GrowthState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: GrowthState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    health_state: {
      tableName: 'health_state',
      rowType: HealthState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: HealthState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    herd_state: {
      tableName: 'herd_state',
      rowType: HerdState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: HerdState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    hexite_exchange_entry_desc: {
      tableName: 'hexite_exchange_entry_desc',
      rowType: HexiteExchangeEntryDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: HexiteExchangeEntryDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    identity_role: {
      tableName: 'identity_role',
      rowType: IdentityRole.getTypeScriptAlgebraicType(),
      primaryKey: 'identity',
      primaryKeyInfo: {
        colName: 'identity',
        colType: IdentityRole.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    inter_module_message: {
      tableName: 'inter_module_message',
      rowType: InterModuleMessage.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: InterModuleMessage.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    inter_module_message_counter: {
      tableName: 'inter_module_message_counter',
      rowType: InterModuleMessageCounter.getTypeScriptAlgebraicType(),
      primaryKey: 'moduleId',
      primaryKeyInfo: {
        colName: 'moduleId',
        colType: InterModuleMessageCounter.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    inter_module_response_message_counter: {
      tableName: 'inter_module_response_message_counter',
      rowType: InterModuleResponseMessageCounter.getTypeScriptAlgebraicType(),
      primaryKey: 'dstModuleId',
      primaryKeyInfo: {
        colName: 'dstModuleId',
        colType: InterModuleResponseMessageCounter.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    interior_collapse_trigger_state: {
      tableName: 'interior_collapse_trigger_state',
      rowType: InteriorCollapseTriggerState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: InteriorCollapseTriggerState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    interior_environment_desc: {
      tableName: 'interior_environment_desc',
      rowType: InteriorEnvironmentDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: InteriorEnvironmentDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    interior_instance_desc: {
      tableName: 'interior_instance_desc',
      rowType: InteriorInstanceDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: InteriorInstanceDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    interior_network_desc: {
      tableName: 'interior_network_desc',
      rowType: InteriorNetworkDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'buildingId',
      primaryKeyInfo: {
        colName: 'buildingId',
        colType: InteriorNetworkDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    interior_portal_connections_desc: {
      tableName: 'interior_portal_connections_desc',
      rowType: InteriorPortalConnectionsDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: InteriorPortalConnectionsDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    interior_shape_desc: {
      tableName: 'interior_shape_desc',
      rowType: InteriorShapeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: InteriorShapeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    interior_spawn_desc: {
      tableName: 'interior_spawn_desc',
      rowType: InteriorSpawnDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: InteriorSpawnDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    inventory_state: {
      tableName: 'inventory_state',
      rowType: InventoryState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: InventoryState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    item_conversion_recipe_desc: {
      tableName: 'item_conversion_recipe_desc',
      rowType: ItemConversionRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: ItemConversionRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    item_desc: {
      tableName: 'item_desc',
      rowType: ItemDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: ItemDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    item_list_desc: {
      tableName: 'item_list_desc',
      rowType: ItemListDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: ItemListDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_achievement_state: {
      tableName: 'knowledge_achievement_state',
      rowType: KnowledgeAchievementState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeAchievementState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_battle_action_state: {
      tableName: 'knowledge_battle_action_state',
      rowType: KnowledgeBattleActionState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeBattleActionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_building_state: {
      tableName: 'knowledge_building_state',
      rowType: KnowledgeBuildingState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeBuildingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_cargo_state: {
      tableName: 'knowledge_cargo_state',
      rowType: KnowledgeCargoState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeCargoState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_claim_state: {
      tableName: 'knowledge_claim_state',
      rowType: KnowledgeClaimState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeClaimState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_construction_state: {
      tableName: 'knowledge_construction_state',
      rowType: KnowledgeConstructionState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeConstructionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_craft_state: {
      tableName: 'knowledge_craft_state',
      rowType: KnowledgeCraftState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeCraftState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_deployable_state: {
      tableName: 'knowledge_deployable_state',
      rowType: KnowledgeDeployableState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeDeployableState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_enemy_state: {
      tableName: 'knowledge_enemy_state',
      rowType: KnowledgeEnemyState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeEnemyState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_extract_state: {
      tableName: 'knowledge_extract_state',
      rowType: KnowledgeExtractState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeExtractState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_item_state: {
      tableName: 'knowledge_item_state',
      rowType: KnowledgeItemState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeItemState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_lore_state: {
      tableName: 'knowledge_lore_state',
      rowType: KnowledgeLoreState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeLoreState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_npc_state: {
      tableName: 'knowledge_npc_state',
      rowType: KnowledgeNpcState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeNpcState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_paving_state: {
      tableName: 'knowledge_paving_state',
      rowType: KnowledgePavingState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgePavingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_pillar_shaping_state: {
      tableName: 'knowledge_pillar_shaping_state',
      rowType: KnowledgePillarShapingState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgePillarShapingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_resource_placement_state: {
      tableName: 'knowledge_resource_placement_state',
      rowType: KnowledgeResourcePlacementState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeResourcePlacementState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_resource_state: {
      tableName: 'knowledge_resource_state',
      rowType: KnowledgeResourceState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeResourceState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_ruins_state: {
      tableName: 'knowledge_ruins_state',
      rowType: KnowledgeRuinsState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeRuinsState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_scroll_desc: {
      tableName: 'knowledge_scroll_desc',
      rowType: KnowledgeScrollDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'itemId',
      primaryKeyInfo: {
        colName: 'itemId',
        colType: KnowledgeScrollDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_scroll_type_desc: {
      tableName: 'knowledge_scroll_type_desc',
      rowType: KnowledgeScrollTypeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: KnowledgeScrollTypeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_secondary_state: {
      tableName: 'knowledge_secondary_state',
      rowType: KnowledgeSecondaryState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeSecondaryState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_stat_modifier_desc: {
      tableName: 'knowledge_stat_modifier_desc',
      rowType: KnowledgeStatModifierDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'secondaryKnowledgeId',
      primaryKeyInfo: {
        colName: 'secondaryKnowledgeId',
        colType: KnowledgeStatModifierDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    knowledge_vault_state: {
      tableName: 'knowledge_vault_state',
      rowType: KnowledgeVaultState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: KnowledgeVaultState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    light_source_state: {
      tableName: 'light_source_state',
      rowType: LightSourceState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: LightSourceState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    location_state: {
      tableName: 'location_state',
      rowType: LocationState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: LocationState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    loot_chest_desc: {
      tableName: 'loot_chest_desc',
      rowType: LootChestDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: LootChestDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    loot_chest_state: {
      tableName: 'loot_chest_state',
      rowType: LootChestState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: LootChestState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    loot_rarity_desc: {
      tableName: 'loot_rarity_desc',
      rowType: LootRarityDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: LootRarityDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    loot_table_desc: {
      tableName: 'loot_table_desc',
      rowType: LootTableDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: LootTableDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    lost_items_state: {
      tableName: 'lost_items_state',
      rowType: LostItemsState.getTypeScriptAlgebraicType(),
      primaryKey: 'inventoryEntityId',
      primaryKeyInfo: {
        colName: 'inventoryEntityId',
        colType: LostItemsState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    mobile_entity_state: {
      tableName: 'mobile_entity_state',
      rowType: MobileEntityState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: MobileEntityState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    mounting_state: {
      tableName: 'mounting_state',
      rowType: MountingState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: MountingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    move_validation_strike_counter_state: {
      tableName: 'move_validation_strike_counter_state',
      rowType: MoveValidationStrikeCounterState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: MoveValidationStrikeCounterState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    npc_desc: {
      tableName: 'npc_desc',
      rowType: NpcDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'npcType',
      primaryKeyInfo: {
        colName: 'npcType',
        colType: NpcDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    npc_state: {
      tableName: 'npc_state',
      rowType: NpcState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: NpcState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    onboarding_reward_desc: {
      tableName: 'onboarding_reward_desc',
      rowType: OnboardingRewardDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'stateId',
      primaryKeyInfo: {
        colName: 'stateId',
        colType: OnboardingRewardDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    onboarding_state: {
      tableName: 'onboarding_state',
      rowType: OnboardingState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: OnboardingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    parameters_desc: {
      tableName: 'parameters_desc',
      rowType: ParametersDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'version',
      primaryKeyInfo: {
        colName: 'version',
        colType: ParametersDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    parameters_player_move_desc: {
      tableName: 'parameters_player_move_desc',
      rowType: ParametersPlayerMoveDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'version',
      primaryKeyInfo: {
        colName: 'version',
        colType: ParametersPlayerMoveDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    passive_craft_state: {
      tableName: 'passive_craft_state',
      rowType: PassiveCraftState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PassiveCraftState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    pathfinding_desc: {
      tableName: 'pathfinding_desc',
      rowType: PathfindingDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: PathfindingDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    paved_tile_state: {
      tableName: 'paved_tile_state',
      rowType: PavedTileState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PavedTileState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    paving_tile_desc: {
      tableName: 'paving_tile_desc',
      rowType: PavingTileDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: PavingTileDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    permission_state: {
      tableName: 'permission_state',
      rowType: PermissionState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PermissionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    pillar_shaping_desc: {
      tableName: 'pillar_shaping_desc',
      rowType: PillarShapingDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: PillarShapingDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    pillar_shaping_state: {
      tableName: 'pillar_shaping_state',
      rowType: PillarShapingState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PillarShapingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_action_desc: {
      tableName: 'player_action_desc',
      rowType: PlayerActionDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'actionTypeId',
      primaryKeyInfo: {
        colName: 'actionTypeId',
        colType: PlayerActionDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_action_state: {
      tableName: 'player_action_state',
      rowType: PlayerActionState.getTypeScriptAlgebraicType(),
      primaryKey: 'autoId',
      primaryKeyInfo: {
        colName: 'autoId',
        colType: PlayerActionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_developer_notification_state: {
      tableName: 'player_developer_notification_state',
      rowType: PlayerDeveloperNotificationState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PlayerDeveloperNotificationState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_housing_desc: {
      tableName: 'player_housing_desc',
      rowType: PlayerHousingDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'secondaryKnowledgeId',
      primaryKeyInfo: {
        colName: 'secondaryKnowledgeId',
        colType: PlayerHousingDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_housing_state: {
      tableName: 'player_housing_state',
      rowType: PlayerHousingState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PlayerHousingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_lowercase_username_state: {
      tableName: 'player_lowercase_username_state',
      rowType: PlayerLowercaseUsernameState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PlayerLowercaseUsernameState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_note_state: {
      tableName: 'player_note_state',
      rowType: PlayerNoteState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PlayerNoteState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_notification_event: {
      tableName: 'player_notification_event',
      rowType: PlayerNotificationEvent.getTypeScriptAlgebraicType(),
      primaryKey: 'scheduledId',
      primaryKeyInfo: {
        colName: 'scheduledId',
        colType: PlayerNotificationEvent.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_prefs_state: {
      tableName: 'player_prefs_state',
      rowType: PlayerPrefsState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PlayerPrefsState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_queue_state: {
      tableName: 'player_queue_state',
      rowType: PlayerQueueState.getTypeScriptAlgebraicType(),
      primaryKey: 'index',
      primaryKeyInfo: {
        colName: 'index',
        colType: PlayerQueueState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_report_state: {
      tableName: 'player_report_state',
      rowType: PlayerReportState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PlayerReportState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_report_state_timestamp: {
      tableName: 'player_report_state_timestamp',
      rowType: PlayerReportStateTimestamp.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PlayerReportStateTimestamp.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_shard_state: {
      tableName: 'player_shard_state',
      rowType: PlayerShardState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PlayerShardState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_state: {
      tableName: 'player_state',
      rowType: PlayerState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PlayerState.getTypeScriptAlgebraicType().product.elements[1].algebraicType
      }
    },
    player_timestamp_state: {
      tableName: 'player_timestamp_state',
      rowType: PlayerTimestampState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PlayerTimestampState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_username_state: {
      tableName: 'player_username_state',
      rowType: PlayerUsernameState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PlayerUsernameState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_vote_conclude_timer: {
      tableName: 'player_vote_conclude_timer',
      rowType: PlayerVoteConcludeTimer.getTypeScriptAlgebraicType(),
      primaryKey: 'scheduledId',
      primaryKeyInfo: {
        colName: 'scheduledId',
        colType: PlayerVoteConcludeTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    player_vote_state: {
      tableName: 'player_vote_state',
      rowType: PlayerVoteState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PlayerVoteState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    portal_state: {
      tableName: 'portal_state',
      rowType: PortalState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: PortalState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    private_parameters_desc: {
      tableName: 'private_parameters_desc',
      rowType: PrivateParametersDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'version',
      primaryKeyInfo: {
        colName: 'version',
        colType: PrivateParametersDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    progressive_action_state: {
      tableName: 'progressive_action_state',
      rowType: ProgressiveActionState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ProgressiveActionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    project_site_state: {
      tableName: 'project_site_state',
      rowType: ProjectSiteState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ProjectSiteState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    region_connection_info: {
      tableName: 'region_connection_info',
      rowType: RegionConnectionInfo.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: RegionConnectionInfo.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    region_population_info: {
      tableName: 'region_population_info',
      rowType: RegionPopulationInfo.getTypeScriptAlgebraicType(),
      primaryKey: 'regionId',
      primaryKeyInfo: {
        colName: 'regionId',
        colType: RegionPopulationInfo.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    region_sign_in_parameters: {
      tableName: 'region_sign_in_parameters',
      rowType: RegionSignInParameters.getTypeScriptAlgebraicType(),
      primaryKey: 'regionId',
      primaryKeyInfo: {
        colName: 'regionId',
        colType: RegionSignInParameters.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    rent_state: {
      tableName: 'rent_state',
      rowType: RentState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: RentState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    reserved_name_desc: {
      tableName: 'reserved_name_desc',
      rowType: ReservedNameDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'name',
      primaryKeyInfo: {
        colName: 'name',
        colType: ReservedNameDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    resource_clump_desc: {
      tableName: 'resource_clump_desc',
      rowType: ResourceClumpDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: ResourceClumpDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    resource_count: {
      tableName: 'resource_count',
      rowType: ResourceCount.getTypeScriptAlgebraicType(),
      primaryKey: 'resourceId',
      primaryKeyInfo: {
        colName: 'resourceId',
        colType: ResourceCount.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    resource_desc: {
      tableName: 'resource_desc',
      rowType: ResourceDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: ResourceDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    resource_growth_recipe_desc: {
      tableName: 'resource_growth_recipe_desc',
      rowType: ResourceGrowthRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: ResourceGrowthRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    resource_health_state: {
      tableName: 'resource_health_state',
      rowType: ResourceHealthState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ResourceHealthState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    resource_placement_recipe_desc: {
      tableName: 'resource_placement_recipe_desc',
      rowType: ResourcePlacementRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: ResourcePlacementRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    resource_state: {
      tableName: 'resource_state',
      rowType: ResourceState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ResourceState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    rez_sick_long_term_state: {
      tableName: 'rez_sick_long_term_state',
      rowType: RezSickLongTermState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: RezSickLongTermState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    satiation_state: {
      tableName: 'satiation_state',
      rowType: SatiationState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: SatiationState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    secondary_knowledge_desc: {
      tableName: 'secondary_knowledge_desc',
      rowType: SecondaryKnowledgeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: SecondaryKnowledgeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    sell_order_state: {
      tableName: 'sell_order_state',
      rowType: AuctionListingState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: AuctionListingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    server_identity: {
      tableName: 'server_identity',
      rowType: ServerIdentity.getTypeScriptAlgebraicType(),
      primaryKey: 'version',
      primaryKeyInfo: {
        colName: 'version',
        colType: ServerIdentity.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    signed_in_player_state: {
      tableName: 'signed_in_player_state',
      rowType: SignedInPlayerState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: SignedInPlayerState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    single_resource_to_clump_desc: {
      tableName: 'single_resource_to_clump_desc',
      rowType: SingleResourceToClumpDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'resourceId',
      primaryKeyInfo: {
        colName: 'resourceId',
        colType: SingleResourceToClumpDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    skill_desc: {
      tableName: 'skill_desc',
      rowType: SkillDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: SkillDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    staged_static_data: {
      tableName: 'staged_static_data',
      rowType: StagedStaticData.getTypeScriptAlgebraicType(),
      primaryKey: 'version',
      primaryKeyInfo: {
        colName: 'version',
        colType: StagedStaticData.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    stamina_state: {
      tableName: 'stamina_state',
      rowType: StaminaState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: StaminaState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    starving_player_state: {
      tableName: 'starving_player_state',
      rowType: StarvingPlayerState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: StarvingPlayerState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    target_state: {
      tableName: 'target_state',
      rowType: TargetState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: TargetState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    targetable_state: {
      tableName: 'targetable_state',
      rowType: TargetableState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: TargetableState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    targeting_matrix_desc: {
      tableName: 'targeting_matrix_desc',
      rowType: TargetingMatrixDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: TargetingMatrixDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    teleport_item_desc: {
      tableName: 'teleport_item_desc',
      rowType: TeleportItemDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: TeleportItemDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    teleportation_energy_state: {
      tableName: 'teleportation_energy_state',
      rowType: TeleportationEnergyState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: TeleportationEnergyState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    terraform_progress_state: {
      tableName: 'terraform_progress_state',
      rowType: TerraformProgressState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: TerraformProgressState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    terraform_recipe_desc: {
      tableName: 'terraform_recipe_desc',
      rowType: TerraformRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'difference',
      primaryKeyInfo: {
        colName: 'difference',
        colType: TerraformRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    terrain_chunk_state: {
      tableName: 'terrain_chunk_state',
      rowType: TerrainChunkState.getTypeScriptAlgebraicType(),
      primaryKey: 'chunkIndex',
      primaryKeyInfo: {
        colName: 'chunkIndex',
        colType: TerrainChunkState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    the_great_placeholder_table: {
      tableName: 'the_great_placeholder_table',
      rowType: TheGreatPlaceHolderTable.getTypeScriptAlgebraicType(),
      primaryKey: 'placeholderId',
      primaryKeyInfo: {
        colName: 'placeholderId',
        colType: TheGreatPlaceHolderTable.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    threat_state: {
      tableName: 'threat_state',
      rowType: ThreatState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ThreatState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    tool_desc: {
      tableName: 'tool_desc',
      rowType: ToolDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: ToolDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    tool_type_desc: {
      tableName: 'tool_type_desc',
      rowType: ToolTypeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: ToolTypeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    toolbar_state: {
      tableName: 'toolbar_state',
      rowType: ToolbarState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: ToolbarState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    trade_order_state: {
      tableName: 'trade_order_state',
      rowType: TradeOrderState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: TradeOrderState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    trade_session_state: {
      tableName: 'trade_session_state',
      rowType: TradeSessionState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: TradeSessionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    traveler_task_desc: {
      tableName: 'traveler_task_desc',
      rowType: TravelerTaskDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: TravelerTaskDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    traveler_task_state: {
      tableName: 'traveler_task_state',
      rowType: TravelerTaskState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: TravelerTaskState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    traveler_trade_order_desc: {
      tableName: 'traveler_trade_order_desc',
      rowType: TravelerTradeOrderDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: TravelerTradeOrderDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    unclaimed_collectibles_state: {
      tableName: 'unclaimed_collectibles_state',
      rowType: UnclaimedCollectiblesState.getTypeScriptAlgebraicType(),
      primaryKey: 'identity',
      primaryKeyInfo: {
        colName: 'identity',
        colType: UnclaimedCollectiblesState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    unclaimed_shards_state: {
      tableName: 'unclaimed_shards_state',
      rowType: UnclaimedShardsState.getTypeScriptAlgebraicType(),
      primaryKey: 'identity',
      primaryKeyInfo: {
        colName: 'identity',
        colType: UnclaimedShardsState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    user_authentication_state: {
      tableName: 'user_authentication_state',
      rowType: UserAuthenticationState.getTypeScriptAlgebraicType(),
      primaryKey: 'identity',
      primaryKeyInfo: {
        colName: 'identity',
        colType: UserAuthenticationState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    user_moderation_state: {
      tableName: 'user_moderation_state',
      rowType: UserModerationState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: UserModerationState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    user_previous_region_state: {
      tableName: 'user_previous_region_state',
      rowType: UserPreviousRegionState.getTypeScriptAlgebraicType(),
      primaryKey: 'identity',
      primaryKeyInfo: {
        colName: 'identity',
        colType: UserPreviousRegionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    user_region_state: {
      tableName: 'user_region_state',
      rowType: UserRegionState.getTypeScriptAlgebraicType(),
      primaryKey: 'identity',
      primaryKeyInfo: {
        colName: 'identity',
        colType: UserRegionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    user_state: {
      tableName: 'user_state',
      rowType: UserState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: UserState.getTypeScriptAlgebraicType().product.elements[1].algebraicType
      }
    },
    vault_state: {
      tableName: 'vault_state',
      rowType: VaultState.getTypeScriptAlgebraicType(),
      primaryKey: 'entityId',
      primaryKeyInfo: {
        colName: 'entityId',
        colType: VaultState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    wall_desc: {
      tableName: 'wall_desc',
      rowType: WallDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'buildingId',
      primaryKeyInfo: {
        colName: 'buildingId',
        colType: WallDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    weapon_desc: {
      tableName: 'weapon_desc',
      rowType: WeaponDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'itemId',
      primaryKeyInfo: {
        colName: 'itemId',
        colType: WeaponDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    weapon_type_desc: {
      tableName: 'weapon_type_desc',
      rowType: WeaponTypeDesc.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: WeaponTypeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    world_region_name_state: {
      tableName: 'world_region_name_state',
      rowType: WorldRegionNameState.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: WorldRegionNameState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    },
    world_region_state: {
      tableName: 'world_region_state',
      rowType: WorldRegionState.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: WorldRegionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType
      }
    }
  },
  reducers: {
    admin_broadcast_msg: {
      reducerName: 'admin_broadcast_msg',
      argsType: AdminBroadcastMsg.getTypeScriptAlgebraicType()
    },
    admin_grant_shards: {
      reducerName: 'admin_grant_shards',
      argsType: AdminGrantShards.getTypeScriptAlgebraicType()
    },
    admin_mark_user_report_as_actioned: {
      reducerName: 'admin_mark_user_report_as_actioned',
      argsType: AdminMarkUserReportAsActioned.getTypeScriptAlgebraicType()
    },
    admin_notify_player: {
      reducerName: 'admin_notify_player',
      argsType: AdminNotifyPlayer.getTypeScriptAlgebraicType()
    },
    admin_notify_player_by_identity: {
      reducerName: 'admin_notify_player_by_identity',
      argsType: AdminNotifyPlayerByIdentity.getTypeScriptAlgebraicType()
    },
    admin_rename_empire: {
      reducerName: 'admin_rename_empire',
      argsType: AdminRenameEmpire.getTypeScriptAlgebraicType()
    },
    admin_rename_empire_entity: {
      reducerName: 'admin_rename_empire_entity',
      argsType: AdminRenameEmpireEntity.getTypeScriptAlgebraicType()
    },
    admin_rename_empire_rank: {
      reducerName: 'admin_rename_empire_rank',
      argsType: AdminRenameEmpireRank.getTypeScriptAlgebraicType()
    },
    admin_rename_empire_rank_entity: {
      reducerName: 'admin_rename_empire_rank_entity',
      argsType: AdminRenameEmpireRankEntity.getTypeScriptAlgebraicType()
    },
    admin_rename_player: {
      reducerName: 'admin_rename_player',
      argsType: AdminRenamePlayer.getTypeScriptAlgebraicType()
    },
    admin_rename_player_entity: {
      reducerName: 'admin_rename_player_entity',
      argsType: AdminRenamePlayerEntity.getTypeScriptAlgebraicType()
    },
    admin_sign_out_all: {
      reducerName: 'admin_sign_out_all',
      argsType: AdminSignOutAll.getTypeScriptAlgebraicType()
    },
    admin_skip_queue_entity: {
      reducerName: 'admin_skip_queue_entity',
      argsType: AdminSkipQueueEntity.getTypeScriptAlgebraicType()
    },
    admin_skip_queue_identity: {
      reducerName: 'admin_skip_queue_identity',
      argsType: AdminSkipQueueIdentity.getTypeScriptAlgebraicType()
    },
    admin_skip_queue_name: {
      reducerName: 'admin_skip_queue_name',
      argsType: AdminSkipQueueName.getTypeScriptAlgebraicType()
    },
    admin_update_granted_hub_item_state: {
      reducerName: 'admin_update_granted_hub_item_state',
      argsType: AdminUpdateGrantedHubItemState.getTypeScriptAlgebraicType()
    },
    admin_update_sign_in_parameters: {
      reducerName: 'admin_update_sign_in_parameters',
      argsType: AdminUpdateSignInParameters.getTypeScriptAlgebraicType()
    },
    authenticate: {
      reducerName: 'authenticate',
      argsType: Authenticate.getTypeScriptAlgebraicType()
    },
    block_identity: {
      reducerName: 'block_identity',
      argsType: BlockIdentity.getTypeScriptAlgebraicType()
    },
    cheat_empire_siege_add_supplies: {
      reducerName: 'cheat_empire_siege_add_supplies',
      argsType: CheatEmpireSiegeAddSupplies.getTypeScriptAlgebraicType()
    },
    cheat_empire_siege_cancel: {
      reducerName: 'cheat_empire_siege_cancel',
      argsType: CheatEmpireSiegeCancel.getTypeScriptAlgebraicType()
    },
    cheat_player_set_name: {
      reducerName: 'cheat_player_set_name',
      argsType: CheatPlayerSetName.getTypeScriptAlgebraicType()
    },
    cheat_shards_grant: {
      reducerName: 'cheat_shards_grant',
      argsType: CheatShardsGrant.getTypeScriptAlgebraicType()
    },
    clear_staged_static_data: {
      reducerName: 'clear_staged_static_data',
      argsType: ClearStagedStaticData.getTypeScriptAlgebraicType()
    },
    commit_staged_static_data: {
      reducerName: 'commit_staged_static_data',
      argsType: CommitStagedStaticData.getTypeScriptAlgebraicType()
    },
    current_version: {
      reducerName: 'current_version',
      argsType: CurrentVersion.getTypeScriptAlgebraicType()
    },
    empire_change_emblem: {
      reducerName: 'empire_change_emblem',
      argsType: EmpireChangeEmblem.getTypeScriptAlgebraicType()
    },
    empire_craft_supplies: {
      reducerName: 'empire_craft_supplies',
      argsType: EmpireCraftSupplies.getTypeScriptAlgebraicType()
    },
    empire_craft_supplies_scheduled: {
      reducerName: 'empire_craft_supplies_scheduled',
      argsType: EmpireCraftSuppliesScheduled.getTypeScriptAlgebraicType()
    },
    empire_decay_agent_loop: {
      reducerName: 'empire_decay_agent_loop',
      argsType: EmpireDecayAgentLoop.getTypeScriptAlgebraicType()
    },
    empire_dismantle: {
      reducerName: 'empire_dismantle',
      argsType: EmpireDismantle.getTypeScriptAlgebraicType()
    },
    empire_donate_shards: {
      reducerName: 'empire_donate_shards',
      argsType: EmpireDonateShards.getTypeScriptAlgebraicType()
    },
    empire_form: {
      reducerName: 'empire_form',
      argsType: EmpireForm.getTypeScriptAlgebraicType()
    },
    empire_leave: {
      reducerName: 'empire_leave',
      argsType: EmpireLeave.getTypeScriptAlgebraicType()
    },
    empire_mark_for_expansion: {
      reducerName: 'empire_mark_for_expansion',
      argsType: EmpireMarkForExpansion.getTypeScriptAlgebraicType()
    },
    empire_mark_for_siege: {
      reducerName: 'empire_mark_for_siege',
      argsType: EmpireMarkForSiege.getTypeScriptAlgebraicType()
    },
    empire_player_join: {
      reducerName: 'empire_player_join',
      argsType: EmpirePlayerJoin.getTypeScriptAlgebraicType()
    },
    empire_player_leave: {
      reducerName: 'empire_player_leave',
      argsType: EmpirePlayerLeave.getTypeScriptAlgebraicType()
    },
    empire_set_directive_message: {
      reducerName: 'empire_set_directive_message',
      argsType: EmpireSetDirectiveMessage.getTypeScriptAlgebraicType()
    },
    empire_set_nobility_threshold: {
      reducerName: 'empire_set_nobility_threshold',
      argsType: EmpireSetNobilityThreshold.getTypeScriptAlgebraicType()
    },
    empire_set_player_rank: {
      reducerName: 'empire_set_player_rank',
      argsType: EmpireSetPlayerRank.getTypeScriptAlgebraicType()
    },
    empire_set_rank_title: {
      reducerName: 'empire_set_rank_title',
      argsType: EmpireSetRankTitle.getTypeScriptAlgebraicType()
    },
    empire_siege_agent_loop: {
      reducerName: 'empire_siege_agent_loop',
      argsType: EmpireSiegeAgentLoop.getTypeScriptAlgebraicType()
    },
    empire_submit: {
      reducerName: 'empire_submit',
      argsType: EmpireSubmit.getTypeScriptAlgebraicType()
    },
    empire_transfer_emperorship: {
      reducerName: 'empire_transfer_emperorship',
      argsType: EmpireTransferEmperorship.getTypeScriptAlgebraicType()
    },
    empire_update_permissions: {
      reducerName: 'empire_update_permissions',
      argsType: EmpireUpdatePermissions.getTypeScriptAlgebraicType()
    },
    identity_connected: {
      reducerName: 'identity_connected',
      argsType: IdentityConnected.getTypeScriptAlgebraicType()
    },
    identity_disconnected: {
      reducerName: 'identity_disconnected',
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType()
    },
    import_achievement_desc: {
      reducerName: 'import_achievement_desc',
      argsType: ImportAchievementDesc.getTypeScriptAlgebraicType()
    },
    import_active_buff_state: {
      reducerName: 'import_active_buff_state',
      argsType: ImportActiveBuffState.getTypeScriptAlgebraicType()
    },
    import_admin_broadcast: {
      reducerName: 'import_admin_broadcast',
      argsType: ImportAdminBroadcast.getTypeScriptAlgebraicType()
    },
    import_alert_desc: {
      reducerName: 'import_alert_desc',
      argsType: ImportAlertDesc.getTypeScriptAlgebraicType()
    },
    import_alert_state: {
      reducerName: 'import_alert_state',
      argsType: ImportAlertState.getTypeScriptAlgebraicType()
    },
    import_attack_outcome_state: {
      reducerName: 'import_attack_outcome_state',
      argsType: ImportAttackOutcomeState.getTypeScriptAlgebraicType()
    },
    import_biome_desc: {
      reducerName: 'import_biome_desc',
      argsType: ImportBiomeDesc.getTypeScriptAlgebraicType()
    },
    import_buff_desc: {
      reducerName: 'import_buff_desc',
      argsType: ImportBuffDesc.getTypeScriptAlgebraicType()
    },
    import_buff_type_desc: {
      reducerName: 'import_buff_type_desc',
      argsType: ImportBuffTypeDesc.getTypeScriptAlgebraicType()
    },
    import_building_claim_desc: {
      reducerName: 'import_building_claim_desc',
      argsType: ImportBuildingClaimDesc.getTypeScriptAlgebraicType()
    },
    import_building_desc: {
      reducerName: 'import_building_desc',
      argsType: ImportBuildingDesc.getTypeScriptAlgebraicType()
    },
    import_building_portal_desc: {
      reducerName: 'import_building_portal_desc',
      argsType: ImportBuildingPortalDesc.getTypeScriptAlgebraicType()
    },
    import_building_repairs_desc: {
      reducerName: 'import_building_repairs_desc',
      argsType: ImportBuildingRepairsDesc.getTypeScriptAlgebraicType()
    },
    import_building_spawn_desc: {
      reducerName: 'import_building_spawn_desc',
      argsType: ImportBuildingSpawnDesc.getTypeScriptAlgebraicType()
    },
    import_building_state: {
      reducerName: 'import_building_state',
      argsType: ImportBuildingState.getTypeScriptAlgebraicType()
    },
    import_building_type_desc: {
      reducerName: 'import_building_type_desc',
      argsType: ImportBuildingTypeDesc.getTypeScriptAlgebraicType()
    },
    import_cargo_desc: {
      reducerName: 'import_cargo_desc',
      argsType: ImportCargoDesc.getTypeScriptAlgebraicType()
    },
    import_character_stat_desc: {
      reducerName: 'import_character_stat_desc',
      argsType: ImportCharacterStatDesc.getTypeScriptAlgebraicType()
    },
    import_character_stats_state: {
      reducerName: 'import_character_stats_state',
      argsType: ImportCharacterStatsState.getTypeScriptAlgebraicType()
    },
    import_chat_message_state: {
      reducerName: 'import_chat_message_state',
      argsType: ImportChatMessageState.getTypeScriptAlgebraicType()
    },
    import_chest_rarity_desc: {
      reducerName: 'import_chest_rarity_desc',
      argsType: ImportChestRarityDesc.getTypeScriptAlgebraicType()
    },
    import_claim_local_state: {
      reducerName: 'import_claim_local_state',
      argsType: ImportClaimLocalState.getTypeScriptAlgebraicType()
    },
    import_claim_recruitment_state: {
      reducerName: 'import_claim_recruitment_state',
      argsType: ImportClaimRecruitmentState.getTypeScriptAlgebraicType()
    },
    import_claim_state: {
      reducerName: 'import_claim_state',
      argsType: ImportClaimState.getTypeScriptAlgebraicType()
    },
    import_claim_tech_desc: {
      reducerName: 'import_claim_tech_desc',
      argsType: ImportClaimTechDesc.getTypeScriptAlgebraicType()
    },
    import_claim_tech_state: {
      reducerName: 'import_claim_tech_state',
      argsType: ImportClaimTechState.getTypeScriptAlgebraicType()
    },
    import_claim_tile_cost: {
      reducerName: 'import_claim_tile_cost',
      argsType: ImportClaimTileCost.getTypeScriptAlgebraicType()
    },
    import_claim_tile_state: {
      reducerName: 'import_claim_tile_state',
      argsType: ImportClaimTileState.getTypeScriptAlgebraicType()
    },
    import_climb_requirement_desc: {
      reducerName: 'import_climb_requirement_desc',
      argsType: ImportClimbRequirementDesc.getTypeScriptAlgebraicType()
    },
    import_clothing_desc: {
      reducerName: 'import_clothing_desc',
      argsType: ImportClothingDesc.getTypeScriptAlgebraicType()
    },
    import_collectible_desc: {
      reducerName: 'import_collectible_desc',
      argsType: ImportCollectibleDesc.getTypeScriptAlgebraicType()
    },
    import_combat_action_desc: {
      reducerName: 'import_combat_action_desc',
      argsType: ImportCombatActionDesc.getTypeScriptAlgebraicType()
    },
    import_combat_state: {
      reducerName: 'import_combat_state',
      argsType: ImportCombatState.getTypeScriptAlgebraicType()
    },
    import_config: {
      reducerName: 'import_config',
      argsType: ImportConfig.getTypeScriptAlgebraicType()
    },
    import_construction_recipe_desc: {
      reducerName: 'import_construction_recipe_desc',
      argsType: ImportConstructionRecipeDesc.getTypeScriptAlgebraicType()
    },
    import_crafting_recipe_desc: {
      reducerName: 'import_crafting_recipe_desc',
      argsType: ImportCraftingRecipeDesc.getTypeScriptAlgebraicType()
    },
    import_deconstruction_recipe_desc: {
      reducerName: 'import_deconstruction_recipe_desc',
      argsType: ImportDeconstructionRecipeDesc.getTypeScriptAlgebraicType()
    },
    import_deployable_desc: {
      reducerName: 'import_deployable_desc',
      argsType: ImportDeployableDesc.getTypeScriptAlgebraicType()
    },
    import_deployable_state: {
      reducerName: 'import_deployable_state',
      argsType: ImportDeployableState.getTypeScriptAlgebraicType()
    },
    import_dimension_description_state: {
      reducerName: 'import_dimension_description_state',
      argsType: ImportDimensionDescriptionState.getTypeScriptAlgebraicType()
    },
    import_dimension_network_description_state: {
      reducerName: 'import_dimension_network_description_state',
      argsType: ImportDimensionNetworkDescriptionState.getTypeScriptAlgebraicType()
    },
    import_distant_visible_entity_desc: {
      reducerName: 'import_distant_visible_entity_desc',
      argsType: ImportDistantVisibleEntityDesc.getTypeScriptAlgebraicType()
    },
    import_dropped_inventory_state: {
      reducerName: 'import_dropped_inventory_state',
      argsType: ImportDroppedInventoryState.getTypeScriptAlgebraicType()
    },
    import_elevator_desc: {
      reducerName: 'import_elevator_desc',
      argsType: ImportElevatorDesc.getTypeScriptAlgebraicType()
    },
    import_emote_desc: {
      reducerName: 'import_emote_desc',
      argsType: ImportEmoteDesc.getTypeScriptAlgebraicType()
    },
    import_empire_colors_desc: {
      reducerName: 'import_empire_colors_desc',
      argsType: ImportEmpireColorsDesc.getTypeScriptAlgebraicType()
    },
    import_empire_notification_desc: {
      reducerName: 'import_empire_notification_desc',
      argsType: ImportEmpireNotificationDesc.getTypeScriptAlgebraicType()
    },
    import_empire_rank_desc: {
      reducerName: 'import_empire_rank_desc',
      argsType: ImportEmpireRankDesc.getTypeScriptAlgebraicType()
    },
    import_empire_supplies_desc: {
      reducerName: 'import_empire_supplies_desc',
      argsType: ImportEmpireSuppliesDesc.getTypeScriptAlgebraicType()
    },
    import_empire_territory_desc: {
      reducerName: 'import_empire_territory_desc',
      argsType: ImportEmpireTerritoryDesc.getTypeScriptAlgebraicType()
    },
    import_enemy_ai_params_desc: {
      reducerName: 'import_enemy_ai_params_desc',
      argsType: ImportEnemyAiParamsDesc.getTypeScriptAlgebraicType()
    },
    import_enemy_desc: {
      reducerName: 'import_enemy_desc',
      argsType: ImportEnemyDesc.getTypeScriptAlgebraicType()
    },
    import_enemy_state: {
      reducerName: 'import_enemy_state',
      argsType: ImportEnemyState.getTypeScriptAlgebraicType()
    },
    import_environment_debuff_desc: {
      reducerName: 'import_environment_debuff_desc',
      argsType: ImportEnvironmentDebuffDesc.getTypeScriptAlgebraicType()
    },
    import_equipment_desc: {
      reducerName: 'import_equipment_desc',
      argsType: ImportEquipmentDesc.getTypeScriptAlgebraicType()
    },
    import_equipment_state: {
      reducerName: 'import_equipment_state',
      argsType: ImportEquipmentState.getTypeScriptAlgebraicType()
    },
    import_experience_state: {
      reducerName: 'import_experience_state',
      argsType: ImportExperienceState.getTypeScriptAlgebraicType()
    },
    import_exploration_chunks_state: {
      reducerName: 'import_exploration_chunks_state',
      argsType: ImportExplorationChunksState.getTypeScriptAlgebraicType()
    },
    import_extraction_recipe_desc: {
      reducerName: 'import_extraction_recipe_desc',
      argsType: ImportExtractionRecipeDesc.getTypeScriptAlgebraicType()
    },
    import_food_desc: {
      reducerName: 'import_food_desc',
      argsType: ImportFoodDesc.getTypeScriptAlgebraicType()
    },
    import_footprint_tile_state: {
      reducerName: 'import_footprint_tile_state',
      argsType: ImportFootprintTileState.getTypeScriptAlgebraicType()
    },
    import_gate_desc: {
      reducerName: 'import_gate_desc',
      argsType: ImportGateDesc.getTypeScriptAlgebraicType()
    },
    import_globals: {
      reducerName: 'import_globals',
      argsType: ImportGlobals.getTypeScriptAlgebraicType()
    },
    import_growth_state: {
      reducerName: 'import_growth_state',
      argsType: ImportGrowthState.getTypeScriptAlgebraicType()
    },
    import_health_state: {
      reducerName: 'import_health_state',
      argsType: ImportHealthState.getTypeScriptAlgebraicType()
    },
    import_herd_cache: {
      reducerName: 'import_herd_cache',
      argsType: ImportHerdCache.getTypeScriptAlgebraicType()
    },
    import_hexite_exchange_entry_desc: {
      reducerName: 'import_hexite_exchange_entry_desc',
      argsType: ImportHexiteExchangeEntryDesc.getTypeScriptAlgebraicType()
    },
    import_identity_role: {
      reducerName: 'import_identity_role',
      argsType: ImportIdentityRole.getTypeScriptAlgebraicType()
    },
    import_interior_collapse_trigger_state: {
      reducerName: 'import_interior_collapse_trigger_state',
      argsType: ImportInteriorCollapseTriggerState.getTypeScriptAlgebraicType()
    },
    import_interior_instance_desc: {
      reducerName: 'import_interior_instance_desc',
      argsType: ImportInteriorInstanceDesc.getTypeScriptAlgebraicType()
    },
    import_interior_network_desc: {
      reducerName: 'import_interior_network_desc',
      argsType: ImportInteriorNetworkDesc.getTypeScriptAlgebraicType()
    },
    import_interior_portal_connections_desc: {
      reducerName: 'import_interior_portal_connections_desc',
      argsType: ImportInteriorPortalConnectionsDesc.getTypeScriptAlgebraicType()
    },
    import_interior_shape_desc: {
      reducerName: 'import_interior_shape_desc',
      argsType: ImportInteriorShapeDesc.getTypeScriptAlgebraicType()
    },
    import_interior_spawn_desc: {
      reducerName: 'import_interior_spawn_desc',
      argsType: ImportInteriorSpawnDesc.getTypeScriptAlgebraicType()
    },
    import_inventory_state: {
      reducerName: 'import_inventory_state',
      argsType: ImportInventoryState.getTypeScriptAlgebraicType()
    },
    import_item_conversion_recipe_desc: {
      reducerName: 'import_item_conversion_recipe_desc',
      argsType: ImportItemConversionRecipeDesc.getTypeScriptAlgebraicType()
    },
    import_item_desc: {
      reducerName: 'import_item_desc',
      argsType: ImportItemDesc.getTypeScriptAlgebraicType()
    },
    import_item_list_desc: {
      reducerName: 'import_item_list_desc',
      argsType: ImportItemListDesc.getTypeScriptAlgebraicType()
    },
    import_knowledge_achievement_state: {
      reducerName: 'import_knowledge_achievement_state',
      argsType: ImportKnowledgeAchievementState.getTypeScriptAlgebraicType()
    },
    import_knowledge_battle_action_state: {
      reducerName: 'import_knowledge_battle_action_state',
      argsType: ImportKnowledgeBattleActionState.getTypeScriptAlgebraicType()
    },
    import_knowledge_building_state: {
      reducerName: 'import_knowledge_building_state',
      argsType: ImportKnowledgeBuildingState.getTypeScriptAlgebraicType()
    },
    import_knowledge_cargo_state: {
      reducerName: 'import_knowledge_cargo_state',
      argsType: ImportKnowledgeCargoState.getTypeScriptAlgebraicType()
    },
    import_knowledge_construction_state: {
      reducerName: 'import_knowledge_construction_state',
      argsType: ImportKnowledgeConstructionState.getTypeScriptAlgebraicType()
    },
    import_knowledge_craft_state: {
      reducerName: 'import_knowledge_craft_state',
      argsType: ImportKnowledgeCraftState.getTypeScriptAlgebraicType()
    },
    import_knowledge_deployable_state: {
      reducerName: 'import_knowledge_deployable_state',
      argsType: ImportKnowledgeDeployableState.getTypeScriptAlgebraicType()
    },
    import_knowledge_enemy_state: {
      reducerName: 'import_knowledge_enemy_state',
      argsType: ImportKnowledgeEnemyState.getTypeScriptAlgebraicType()
    },
    import_knowledge_extract_state: {
      reducerName: 'import_knowledge_extract_state',
      argsType: ImportKnowledgeExtractState.getTypeScriptAlgebraicType()
    },
    import_knowledge_item_state: {
      reducerName: 'import_knowledge_item_state',
      argsType: ImportKnowledgeItemState.getTypeScriptAlgebraicType()
    },
    import_knowledge_lore_state: {
      reducerName: 'import_knowledge_lore_state',
      argsType: ImportKnowledgeLoreState.getTypeScriptAlgebraicType()
    },
    import_knowledge_npc_state: {
      reducerName: 'import_knowledge_npc_state',
      argsType: ImportKnowledgeNpcState.getTypeScriptAlgebraicType()
    },
    import_knowledge_paving_state: {
      reducerName: 'import_knowledge_paving_state',
      argsType: ImportKnowledgePavingState.getTypeScriptAlgebraicType()
    },
    import_knowledge_resource_placement_state: {
      reducerName: 'import_knowledge_resource_placement_state',
      argsType: ImportKnowledgeResourcePlacementState.getTypeScriptAlgebraicType()
    },
    import_knowledge_resource_state: {
      reducerName: 'import_knowledge_resource_state',
      argsType: ImportKnowledgeResourceState.getTypeScriptAlgebraicType()
    },
    import_knowledge_ruins_state: {
      reducerName: 'import_knowledge_ruins_state',
      argsType: ImportKnowledgeRuinsState.getTypeScriptAlgebraicType()
    },
    import_knowledge_scroll_desc: {
      reducerName: 'import_knowledge_scroll_desc',
      argsType: ImportKnowledgeScrollDesc.getTypeScriptAlgebraicType()
    },
    import_knowledge_scroll_type_desc: {
      reducerName: 'import_knowledge_scroll_type_desc',
      argsType: ImportKnowledgeScrollTypeDesc.getTypeScriptAlgebraicType()
    },
    import_knowledge_secondary_state: {
      reducerName: 'import_knowledge_secondary_state',
      argsType: ImportKnowledgeSecondaryState.getTypeScriptAlgebraicType()
    },
    import_knowledge_stat_modifier_desc: {
      reducerName: 'import_knowledge_stat_modifier_desc',
      argsType: ImportKnowledgeStatModifierDesc.getTypeScriptAlgebraicType()
    },
    import_knowledge_vault_state: {
      reducerName: 'import_knowledge_vault_state',
      argsType: ImportKnowledgeVaultState.getTypeScriptAlgebraicType()
    },
    import_location_state: {
      reducerName: 'import_location_state',
      argsType: ImportLocationState.getTypeScriptAlgebraicType()
    },
    import_loot_chest_desc: {
      reducerName: 'import_loot_chest_desc',
      argsType: ImportLootChestDesc.getTypeScriptAlgebraicType()
    },
    import_loot_chest_state: {
      reducerName: 'import_loot_chest_state',
      argsType: ImportLootChestState.getTypeScriptAlgebraicType()
    },
    import_loot_rarity_desc: {
      reducerName: 'import_loot_rarity_desc',
      argsType: ImportLootRarityDesc.getTypeScriptAlgebraicType()
    },
    import_loot_table_desc: {
      reducerName: 'import_loot_table_desc',
      argsType: ImportLootTableDesc.getTypeScriptAlgebraicType()
    },
    import_mobile_entity_state: {
      reducerName: 'import_mobile_entity_state',
      argsType: ImportMobileEntityState.getTypeScriptAlgebraicType()
    },
    import_mounting_state: {
      reducerName: 'import_mounting_state',
      argsType: ImportMountingState.getTypeScriptAlgebraicType()
    },
    import_npc_desc: {
      reducerName: 'import_npc_desc',
      argsType: ImportNpcDesc.getTypeScriptAlgebraicType()
    },
    import_npc_state: {
      reducerName: 'import_npc_state',
      argsType: ImportNpcState.getTypeScriptAlgebraicType()
    },
    import_onboarding_reward_desc: {
      reducerName: 'import_onboarding_reward_desc',
      argsType: ImportOnboardingRewardDesc.getTypeScriptAlgebraicType()
    },
    import_onboarding_state: {
      reducerName: 'import_onboarding_state',
      argsType: ImportOnboardingState.getTypeScriptAlgebraicType()
    },
    import_parameters_desc: {
      reducerName: 'import_parameters_desc',
      argsType: ImportParametersDesc.getTypeScriptAlgebraicType()
    },
    import_pathfinding_desc: {
      reducerName: 'import_pathfinding_desc',
      argsType: ImportPathfindingDesc.getTypeScriptAlgebraicType()
    },
    import_paved_tile_state: {
      reducerName: 'import_paved_tile_state',
      argsType: ImportPavedTileState.getTypeScriptAlgebraicType()
    },
    import_paving_tile_desc: {
      reducerName: 'import_paving_tile_desc',
      argsType: ImportPavingTileDesc.getTypeScriptAlgebraicType()
    },
    import_player_action_desc: {
      reducerName: 'import_player_action_desc',
      argsType: ImportPlayerActionDesc.getTypeScriptAlgebraicType()
    },
    import_player_action_state: {
      reducerName: 'import_player_action_state',
      argsType: ImportPlayerActionState.getTypeScriptAlgebraicType()
    },
    import_player_prefs_state: {
      reducerName: 'import_player_prefs_state',
      argsType: ImportPlayerPrefsState.getTypeScriptAlgebraicType()
    },
    import_player_state: {
      reducerName: 'import_player_state',
      argsType: ImportPlayerState.getTypeScriptAlgebraicType()
    },
    import_player_vote_state: {
      reducerName: 'import_player_vote_state',
      argsType: ImportPlayerVoteState.getTypeScriptAlgebraicType()
    },
    import_portal_state: {
      reducerName: 'import_portal_state',
      argsType: ImportPortalState.getTypeScriptAlgebraicType()
    },
    import_private_parameters_desc: {
      reducerName: 'import_private_parameters_desc',
      argsType: ImportPrivateParametersDesc.getTypeScriptAlgebraicType()
    },
    import_progressive_action_state: {
      reducerName: 'import_progressive_action_state',
      argsType: ImportProgressiveActionState.getTypeScriptAlgebraicType()
    },
    import_project_site_state: {
      reducerName: 'import_project_site_state',
      argsType: ImportProjectSiteState.getTypeScriptAlgebraicType()
    },
    import_region_connection_info: {
      reducerName: 'import_region_connection_info',
      argsType: ImportRegionConnectionInfo.getTypeScriptAlgebraicType()
    },
    import_region_sign_in_parameters: {
      reducerName: 'import_region_sign_in_parameters',
      argsType: ImportRegionSignInParameters.getTypeScriptAlgebraicType()
    },
    import_rent_state: {
      reducerName: 'import_rent_state',
      argsType: ImportRentState.getTypeScriptAlgebraicType()
    },
    import_resource_clump_desc: {
      reducerName: 'import_resource_clump_desc',
      argsType: ImportResourceClumpDesc.getTypeScriptAlgebraicType()
    },
    import_resource_count: {
      reducerName: 'import_resource_count',
      argsType: ImportResourceCount.getTypeScriptAlgebraicType()
    },
    import_resource_desc: {
      reducerName: 'import_resource_desc',
      argsType: ImportResourceDesc.getTypeScriptAlgebraicType()
    },
    import_resource_growth_recipe_desc: {
      reducerName: 'import_resource_growth_recipe_desc',
      argsType: ImportResourceGrowthRecipeDesc.getTypeScriptAlgebraicType()
    },
    import_resource_placement_recipe_desc: {
      reducerName: 'import_resource_placement_recipe_desc',
      argsType: ImportResourcePlacementRecipeDesc.getTypeScriptAlgebraicType()
    },
    import_resource_state: {
      reducerName: 'import_resource_state',
      argsType: ImportResourceState.getTypeScriptAlgebraicType()
    },
    import_satiation_state: {
      reducerName: 'import_satiation_state',
      argsType: ImportSatiationState.getTypeScriptAlgebraicType()
    },
    import_secondary_knowledge_desc: {
      reducerName: 'import_secondary_knowledge_desc',
      argsType: ImportSecondaryKnowledgeDesc.getTypeScriptAlgebraicType()
    },
    import_server_identity: {
      reducerName: 'import_server_identity',
      argsType: ImportServerIdentity.getTypeScriptAlgebraicType()
    },
    import_signed_in_player_state: {
      reducerName: 'import_signed_in_player_state',
      argsType: ImportSignedInPlayerState.getTypeScriptAlgebraicType()
    },
    import_skill_desc: {
      reducerName: 'import_skill_desc',
      argsType: ImportSkillDesc.getTypeScriptAlgebraicType()
    },
    import_stamina_state: {
      reducerName: 'import_stamina_state',
      argsType: ImportStaminaState.getTypeScriptAlgebraicType()
    },
    import_target_state: {
      reducerName: 'import_target_state',
      argsType: ImportTargetState.getTypeScriptAlgebraicType()
    },
    import_targetable_state: {
      reducerName: 'import_targetable_state',
      argsType: ImportTargetableState.getTypeScriptAlgebraicType()
    },
    import_targeting_matrix_desc: {
      reducerName: 'import_targeting_matrix_desc',
      argsType: ImportTargetingMatrixDesc.getTypeScriptAlgebraicType()
    },
    import_teleport_item_desc: {
      reducerName: 'import_teleport_item_desc',
      argsType: ImportTeleportItemDesc.getTypeScriptAlgebraicType()
    },
    import_terraform_recipe_desc: {
      reducerName: 'import_terraform_recipe_desc',
      argsType: ImportTerraformRecipeDesc.getTypeScriptAlgebraicType()
    },
    import_terrain_chunk_state: {
      reducerName: 'import_terrain_chunk_state',
      argsType: ImportTerrainChunkState.getTypeScriptAlgebraicType()
    },
    import_tool_desc: {
      reducerName: 'import_tool_desc',
      argsType: ImportToolDesc.getTypeScriptAlgebraicType()
    },
    import_tool_type_desc: {
      reducerName: 'import_tool_type_desc',
      argsType: ImportToolTypeDesc.getTypeScriptAlgebraicType()
    },
    import_trade_order_state: {
      reducerName: 'import_trade_order_state',
      argsType: ImportTradeOrderState.getTypeScriptAlgebraicType()
    },
    import_trade_session_state: {
      reducerName: 'import_trade_session_state',
      argsType: ImportTradeSessionState.getTypeScriptAlgebraicType()
    },
    import_traveler_task_desc: {
      reducerName: 'import_traveler_task_desc',
      argsType: ImportTravelerTaskDesc.getTypeScriptAlgebraicType()
    },
    import_traveler_trade_order_desc: {
      reducerName: 'import_traveler_trade_order_desc',
      argsType: ImportTravelerTradeOrderDesc.getTypeScriptAlgebraicType()
    },
    import_user_moderation_state: {
      reducerName: 'import_user_moderation_state',
      argsType: ImportUserModerationState.getTypeScriptAlgebraicType()
    },
    import_user_state: {
      reducerName: 'import_user_state',
      argsType: ImportUserState.getTypeScriptAlgebraicType()
    },
    import_vault_state: {
      reducerName: 'import_vault_state',
      argsType: ImportVaultState.getTypeScriptAlgebraicType()
    },
    import_wall_desc: {
      reducerName: 'import_wall_desc',
      argsType: ImportWallDesc.getTypeScriptAlgebraicType()
    },
    import_weapon_desc: {
      reducerName: 'import_weapon_desc',
      argsType: ImportWeaponDesc.getTypeScriptAlgebraicType()
    },
    import_weapon_type_desc: {
      reducerName: 'import_weapon_type_desc',
      argsType: ImportWeaponTypeDesc.getTypeScriptAlgebraicType()
    },
    import_world_region_name_state: {
      reducerName: 'import_world_region_name_state',
      argsType: ImportWorldRegionNameState.getTypeScriptAlgebraicType()
    },
    import_world_region_state: {
      reducerName: 'import_world_region_state',
      argsType: ImportWorldRegionState.getTypeScriptAlgebraicType()
    },
    load_config: {
      reducerName: 'load_config',
      argsType: LoadConfig.getTypeScriptAlgebraicType()
    },
    log_empire_leaderboard: {
      reducerName: 'log_empire_leaderboard',
      argsType: LogEmpireLeaderboard.getTypeScriptAlgebraicType()
    },
    log_player_with_: {
      reducerName: 'log_player_with_',
      argsType: LogPlayerWith.getTypeScriptAlgebraicType()
    },
    on_inter_module_message_processed: {
      reducerName: 'on_inter_module_message_processed',
      argsType: OnInterModuleMessageProcessed.getTypeScriptAlgebraicType()
    },
    player_claim_daily_shards: {
      reducerName: 'player_claim_daily_shards',
      argsType: PlayerClaimDailyShards.getTypeScriptAlgebraicType()
    },
    player_create: {
      reducerName: 'player_create',
      argsType: PlayerCreate.getTypeScriptAlgebraicType()
    },
    player_dismiss_notification: {
      reducerName: 'player_dismiss_notification',
      argsType: PlayerDismissNotification.getTypeScriptAlgebraicType()
    },
    player_notification_event_reducer: {
      reducerName: 'player_notification_event_reducer',
      argsType: PlayerNotificationEventReducer.getTypeScriptAlgebraicType()
    },
    player_set_name: {
      reducerName: 'player_set_name',
      argsType: PlayerSetName.getTypeScriptAlgebraicType()
    },
    player_vote_answer: {
      reducerName: 'player_vote_answer',
      argsType: PlayerVoteAnswer.getTypeScriptAlgebraicType()
    },
    player_vote_conclude: {
      reducerName: 'player_vote_conclude',
      argsType: PlayerVoteConclude.getTypeScriptAlgebraicType()
    },
    process_inter_module_message: {
      reducerName: 'process_inter_module_message',
      argsType: ProcessInterModuleMessage.getTypeScriptAlgebraicType()
    },
    set_role_for_identity: {
      reducerName: 'set_role_for_identity',
      argsType: SetRoleForIdentity.getTypeScriptAlgebraicType()
    },
    sign_in: {
      reducerName: 'sign_in',
      argsType: SignIn.getTypeScriptAlgebraicType()
    },
    stage_achievement_desc: {
      reducerName: 'stage_achievement_desc',
      argsType: StageAchievementDesc.getTypeScriptAlgebraicType()
    },
    stage_alert_desc: {
      reducerName: 'stage_alert_desc',
      argsType: StageAlertDesc.getTypeScriptAlgebraicType()
    },
    stage_biome_desc: {
      reducerName: 'stage_biome_desc',
      argsType: StageBiomeDesc.getTypeScriptAlgebraicType()
    },
    stage_buff_desc: {
      reducerName: 'stage_buff_desc',
      argsType: StageBuffDesc.getTypeScriptAlgebraicType()
    },
    stage_buff_type_desc: {
      reducerName: 'stage_buff_type_desc',
      argsType: StageBuffTypeDesc.getTypeScriptAlgebraicType()
    },
    stage_building_claim_desc: {
      reducerName: 'stage_building_claim_desc',
      argsType: StageBuildingClaimDesc.getTypeScriptAlgebraicType()
    },
    stage_building_desc: {
      reducerName: 'stage_building_desc',
      argsType: StageBuildingDesc.getTypeScriptAlgebraicType()
    },
    stage_building_portal_desc: {
      reducerName: 'stage_building_portal_desc',
      argsType: StageBuildingPortalDesc.getTypeScriptAlgebraicType()
    },
    stage_building_repairs_desc: {
      reducerName: 'stage_building_repairs_desc',
      argsType: StageBuildingRepairsDesc.getTypeScriptAlgebraicType()
    },
    stage_building_spawn_desc: {
      reducerName: 'stage_building_spawn_desc',
      argsType: StageBuildingSpawnDesc.getTypeScriptAlgebraicType()
    },
    stage_building_type_desc: {
      reducerName: 'stage_building_type_desc',
      argsType: StageBuildingTypeDesc.getTypeScriptAlgebraicType()
    },
    stage_cargo_desc: {
      reducerName: 'stage_cargo_desc',
      argsType: StageCargoDesc.getTypeScriptAlgebraicType()
    },
    stage_character_stat_desc: {
      reducerName: 'stage_character_stat_desc',
      argsType: StageCharacterStatDesc.getTypeScriptAlgebraicType()
    },
    stage_chest_rarity_desc: {
      reducerName: 'stage_chest_rarity_desc',
      argsType: StageChestRarityDesc.getTypeScriptAlgebraicType()
    },
    stage_claim_tech_desc: {
      reducerName: 'stage_claim_tech_desc',
      argsType: StageClaimTechDesc.getTypeScriptAlgebraicType()
    },
    stage_claim_tile_cost: {
      reducerName: 'stage_claim_tile_cost',
      argsType: StageClaimTileCost.getTypeScriptAlgebraicType()
    },
    stage_climb_requirement_desc: {
      reducerName: 'stage_climb_requirement_desc',
      argsType: StageClimbRequirementDesc.getTypeScriptAlgebraicType()
    },
    stage_clothing_desc: {
      reducerName: 'stage_clothing_desc',
      argsType: StageClothingDesc.getTypeScriptAlgebraicType()
    },
    stage_collectible_desc: {
      reducerName: 'stage_collectible_desc',
      argsType: StageCollectibleDesc.getTypeScriptAlgebraicType()
    },
    stage_combat_action_desc: {
      reducerName: 'stage_combat_action_desc',
      argsType: StageCombatActionDesc.getTypeScriptAlgebraicType()
    },
    stage_construction_recipe_desc: {
      reducerName: 'stage_construction_recipe_desc',
      argsType: StageConstructionRecipeDesc.getTypeScriptAlgebraicType()
    },
    stage_crafting_recipe_desc: {
      reducerName: 'stage_crafting_recipe_desc',
      argsType: StageCraftingRecipeDesc.getTypeScriptAlgebraicType()
    },
    stage_deconstruction_recipe_desc: {
      reducerName: 'stage_deconstruction_recipe_desc',
      argsType: StageDeconstructionRecipeDesc.getTypeScriptAlgebraicType()
    },
    stage_deployable_desc: {
      reducerName: 'stage_deployable_desc',
      argsType: StageDeployableDesc.getTypeScriptAlgebraicType()
    },
    stage_distant_visible_entity_desc: {
      reducerName: 'stage_distant_visible_entity_desc',
      argsType: StageDistantVisibleEntityDesc.getTypeScriptAlgebraicType()
    },
    stage_elevator_desc: {
      reducerName: 'stage_elevator_desc',
      argsType: StageElevatorDesc.getTypeScriptAlgebraicType()
    },
    stage_emote_desc: {
      reducerName: 'stage_emote_desc',
      argsType: StageEmoteDesc.getTypeScriptAlgebraicType()
    },
    stage_empire_colors_desc: {
      reducerName: 'stage_empire_colors_desc',
      argsType: StageEmpireColorsDesc.getTypeScriptAlgebraicType()
    },
    stage_empire_icon_desc: {
      reducerName: 'stage_empire_icon_desc',
      argsType: StageEmpireIconDesc.getTypeScriptAlgebraicType()
    },
    stage_empire_notification_desc: {
      reducerName: 'stage_empire_notification_desc',
      argsType: StageEmpireNotificationDesc.getTypeScriptAlgebraicType()
    },
    stage_empire_rank_desc: {
      reducerName: 'stage_empire_rank_desc',
      argsType: StageEmpireRankDesc.getTypeScriptAlgebraicType()
    },
    stage_empire_supplies_desc: {
      reducerName: 'stage_empire_supplies_desc',
      argsType: StageEmpireSuppliesDesc.getTypeScriptAlgebraicType()
    },
    stage_empire_territory_desc: {
      reducerName: 'stage_empire_territory_desc',
      argsType: StageEmpireTerritoryDesc.getTypeScriptAlgebraicType()
    },
    stage_enemy_ai_params_desc: {
      reducerName: 'stage_enemy_ai_params_desc',
      argsType: StageEnemyAiParamsDesc.getTypeScriptAlgebraicType()
    },
    stage_enemy_desc: {
      reducerName: 'stage_enemy_desc',
      argsType: StageEnemyDesc.getTypeScriptAlgebraicType()
    },
    stage_environment_debuff_desc: {
      reducerName: 'stage_environment_debuff_desc',
      argsType: StageEnvironmentDebuffDesc.getTypeScriptAlgebraicType()
    },
    stage_equipment_desc: {
      reducerName: 'stage_equipment_desc',
      argsType: StageEquipmentDesc.getTypeScriptAlgebraicType()
    },
    stage_extraction_recipe_desc: {
      reducerName: 'stage_extraction_recipe_desc',
      argsType: StageExtractionRecipeDesc.getTypeScriptAlgebraicType()
    },
    stage_food_desc: {
      reducerName: 'stage_food_desc',
      argsType: StageFoodDesc.getTypeScriptAlgebraicType()
    },
    stage_gate_desc: {
      reducerName: 'stage_gate_desc',
      argsType: StageGateDesc.getTypeScriptAlgebraicType()
    },
    stage_hexite_exchange_entry_desc: {
      reducerName: 'stage_hexite_exchange_entry_desc',
      argsType: StageHexiteExchangeEntryDesc.getTypeScriptAlgebraicType()
    },
    stage_interior_environment_desc: {
      reducerName: 'stage_interior_environment_desc',
      argsType: StageInteriorEnvironmentDesc.getTypeScriptAlgebraicType()
    },
    stage_interior_instance_desc: {
      reducerName: 'stage_interior_instance_desc',
      argsType: StageInteriorInstanceDesc.getTypeScriptAlgebraicType()
    },
    stage_interior_network_desc: {
      reducerName: 'stage_interior_network_desc',
      argsType: StageInteriorNetworkDesc.getTypeScriptAlgebraicType()
    },
    stage_interior_portal_connections_desc: {
      reducerName: 'stage_interior_portal_connections_desc',
      argsType: StageInteriorPortalConnectionsDesc.getTypeScriptAlgebraicType()
    },
    stage_interior_shape_desc: {
      reducerName: 'stage_interior_shape_desc',
      argsType: StageInteriorShapeDesc.getTypeScriptAlgebraicType()
    },
    stage_interior_spawn_desc: {
      reducerName: 'stage_interior_spawn_desc',
      argsType: StageInteriorSpawnDesc.getTypeScriptAlgebraicType()
    },
    stage_item_conversion_recipe_desc: {
      reducerName: 'stage_item_conversion_recipe_desc',
      argsType: StageItemConversionRecipeDesc.getTypeScriptAlgebraicType()
    },
    stage_item_desc: {
      reducerName: 'stage_item_desc',
      argsType: StageItemDesc.getTypeScriptAlgebraicType()
    },
    stage_item_list_desc: {
      reducerName: 'stage_item_list_desc',
      argsType: StageItemListDesc.getTypeScriptAlgebraicType()
    },
    stage_knowledge_scroll_desc: {
      reducerName: 'stage_knowledge_scroll_desc',
      argsType: StageKnowledgeScrollDesc.getTypeScriptAlgebraicType()
    },
    stage_knowledge_scroll_type_desc: {
      reducerName: 'stage_knowledge_scroll_type_desc',
      argsType: StageKnowledgeScrollTypeDesc.getTypeScriptAlgebraicType()
    },
    stage_knowledge_stat_modifier_desc: {
      reducerName: 'stage_knowledge_stat_modifier_desc',
      argsType: StageKnowledgeStatModifierDesc.getTypeScriptAlgebraicType()
    },
    stage_loot_chest_desc: {
      reducerName: 'stage_loot_chest_desc',
      argsType: StageLootChestDesc.getTypeScriptAlgebraicType()
    },
    stage_loot_rarity_desc: {
      reducerName: 'stage_loot_rarity_desc',
      argsType: StageLootRarityDesc.getTypeScriptAlgebraicType()
    },
    stage_loot_table_desc: {
      reducerName: 'stage_loot_table_desc',
      argsType: StageLootTableDesc.getTypeScriptAlgebraicType()
    },
    stage_npc_desc: {
      reducerName: 'stage_npc_desc',
      argsType: StageNpcDesc.getTypeScriptAlgebraicType()
    },
    stage_onboarding_reward_desc: {
      reducerName: 'stage_onboarding_reward_desc',
      argsType: StageOnboardingRewardDesc.getTypeScriptAlgebraicType()
    },
    stage_parameters_desc: {
      reducerName: 'stage_parameters_desc',
      argsType: StageParametersDesc.getTypeScriptAlgebraicType()
    },
    stage_pathfinding_desc: {
      reducerName: 'stage_pathfinding_desc',
      argsType: StagePathfindingDesc.getTypeScriptAlgebraicType()
    },
    stage_paving_tile_desc: {
      reducerName: 'stage_paving_tile_desc',
      argsType: StagePavingTileDesc.getTypeScriptAlgebraicType()
    },
    stage_pillar_shaping_desc: {
      reducerName: 'stage_pillar_shaping_desc',
      argsType: StagePillarShapingDesc.getTypeScriptAlgebraicType()
    },
    stage_player_action_desc: {
      reducerName: 'stage_player_action_desc',
      argsType: StagePlayerActionDesc.getTypeScriptAlgebraicType()
    },
    stage_player_housing_desc: {
      reducerName: 'stage_player_housing_desc',
      argsType: StagePlayerHousingDesc.getTypeScriptAlgebraicType()
    },
    stage_private_parameters_desc: {
      reducerName: 'stage_private_parameters_desc',
      argsType: StagePrivateParametersDesc.getTypeScriptAlgebraicType()
    },
    stage_reserved_name_desc: {
      reducerName: 'stage_reserved_name_desc',
      argsType: StageReservedNameDesc.getTypeScriptAlgebraicType()
    },
    stage_resource_clump_desc: {
      reducerName: 'stage_resource_clump_desc',
      argsType: StageResourceClumpDesc.getTypeScriptAlgebraicType()
    },
    stage_resource_desc: {
      reducerName: 'stage_resource_desc',
      argsType: StageResourceDesc.getTypeScriptAlgebraicType()
    },
    stage_resource_growth_recipe_desc: {
      reducerName: 'stage_resource_growth_recipe_desc',
      argsType: StageResourceGrowthRecipeDesc.getTypeScriptAlgebraicType()
    },
    stage_resource_placement_recipe_desc: {
      reducerName: 'stage_resource_placement_recipe_desc',
      argsType: StageResourcePlacementRecipeDesc.getTypeScriptAlgebraicType()
    },
    stage_secondary_knowledge_desc: {
      reducerName: 'stage_secondary_knowledge_desc',
      argsType: StageSecondaryKnowledgeDesc.getTypeScriptAlgebraicType()
    },
    stage_skill_desc: {
      reducerName: 'stage_skill_desc',
      argsType: StageSkillDesc.getTypeScriptAlgebraicType()
    },
    stage_targeting_matrix_desc: {
      reducerName: 'stage_targeting_matrix_desc',
      argsType: StageTargetingMatrixDesc.getTypeScriptAlgebraicType()
    },
    stage_teleport_item_desc: {
      reducerName: 'stage_teleport_item_desc',
      argsType: StageTeleportItemDesc.getTypeScriptAlgebraicType()
    },
    stage_terraform_recipe_desc: {
      reducerName: 'stage_terraform_recipe_desc',
      argsType: StageTerraformRecipeDesc.getTypeScriptAlgebraicType()
    },
    stage_tool_desc: {
      reducerName: 'stage_tool_desc',
      argsType: StageToolDesc.getTypeScriptAlgebraicType()
    },
    stage_tool_type_desc: {
      reducerName: 'stage_tool_type_desc',
      argsType: StageToolTypeDesc.getTypeScriptAlgebraicType()
    },
    stage_traveler_task_desc: {
      reducerName: 'stage_traveler_task_desc',
      argsType: StageTravelerTaskDesc.getTypeScriptAlgebraicType()
    },
    stage_traveler_trade_order_desc: {
      reducerName: 'stage_traveler_trade_order_desc',
      argsType: StageTravelerTradeOrderDesc.getTypeScriptAlgebraicType()
    },
    stage_wall_desc: {
      reducerName: 'stage_wall_desc',
      argsType: StageWallDesc.getTypeScriptAlgebraicType()
    },
    stage_weapon_desc: {
      reducerName: 'stage_weapon_desc',
      argsType: StageWeaponDesc.getTypeScriptAlgebraicType()
    },
    stage_weapon_type_desc: {
      reducerName: 'stage_weapon_type_desc',
      argsType: StageWeaponTypeDesc.getTypeScriptAlgebraicType()
    },
    update_role_for_player: {
      reducerName: 'update_role_for_player',
      argsType: UpdateRoleForPlayer.getTypeScriptAlgebraicType()
    },
    update_scheduled_timers_from_static_data: {
      reducerName: 'update_scheduled_timers_from_static_data',
      argsType: UpdateScheduledTimersFromStaticData.getTypeScriptAlgebraicType()
    },
    user_moderation_clear_all: {
      reducerName: 'user_moderation_clear_all',
      argsType: UserModerationClearAll.getTypeScriptAlgebraicType()
    },
    user_moderation_create: {
      reducerName: 'user_moderation_create',
      argsType: UserModerationCreate.getTypeScriptAlgebraicType()
    },
    user_moderation_delete: {
      reducerName: 'user_moderation_delete',
      argsType: UserModerationDelete.getTypeScriptAlgebraicType()
    },
    user_moderation_list_all: {
      reducerName: 'user_moderation_list_all',
      argsType: UserModerationListAll.getTypeScriptAlgebraicType()
    }
  },
  versionInfo: {
    cliVersion: '1.2.0'
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp)
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags)
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags()
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer =
  | never
  | { name: 'AdminBroadcastMsg'; args: AdminBroadcastMsg }
  | { name: 'AdminGrantShards'; args: AdminGrantShards }
  | { name: 'AdminMarkUserReportAsActioned'; args: AdminMarkUserReportAsActioned }
  | { name: 'AdminNotifyPlayer'; args: AdminNotifyPlayer }
  | { name: 'AdminNotifyPlayerByIdentity'; args: AdminNotifyPlayerByIdentity }
  | { name: 'AdminRenameEmpire'; args: AdminRenameEmpire }
  | { name: 'AdminRenameEmpireEntity'; args: AdminRenameEmpireEntity }
  | { name: 'AdminRenameEmpireRank'; args: AdminRenameEmpireRank }
  | { name: 'AdminRenameEmpireRankEntity'; args: AdminRenameEmpireRankEntity }
  | { name: 'AdminRenamePlayer'; args: AdminRenamePlayer }
  | { name: 'AdminRenamePlayerEntity'; args: AdminRenamePlayerEntity }
  | { name: 'AdminSignOutAll'; args: AdminSignOutAll }
  | { name: 'AdminSkipQueueEntity'; args: AdminSkipQueueEntity }
  | { name: 'AdminSkipQueueIdentity'; args: AdminSkipQueueIdentity }
  | { name: 'AdminSkipQueueName'; args: AdminSkipQueueName }
  | { name: 'AdminUpdateGrantedHubItemState'; args: AdminUpdateGrantedHubItemState }
  | { name: 'AdminUpdateSignInParameters'; args: AdminUpdateSignInParameters }
  | { name: 'Authenticate'; args: Authenticate }
  | { name: 'BlockIdentity'; args: BlockIdentity }
  | { name: 'CheatEmpireSiegeAddSupplies'; args: CheatEmpireSiegeAddSupplies }
  | { name: 'CheatEmpireSiegeCancel'; args: CheatEmpireSiegeCancel }
  | { name: 'CheatPlayerSetName'; args: CheatPlayerSetName }
  | { name: 'CheatShardsGrant'; args: CheatShardsGrant }
  | { name: 'ClearStagedStaticData'; args: ClearStagedStaticData }
  | { name: 'CommitStagedStaticData'; args: CommitStagedStaticData }
  | { name: 'CurrentVersion'; args: CurrentVersion }
  | { name: 'EmpireChangeEmblem'; args: EmpireChangeEmblem }
  | { name: 'EmpireCraftSupplies'; args: EmpireCraftSupplies }
  | { name: 'EmpireCraftSuppliesScheduled'; args: EmpireCraftSuppliesScheduled }
  | { name: 'EmpireDecayAgentLoop'; args: EmpireDecayAgentLoop }
  | { name: 'EmpireDismantle'; args: EmpireDismantle }
  | { name: 'EmpireDonateShards'; args: EmpireDonateShards }
  | { name: 'EmpireForm'; args: EmpireForm }
  | { name: 'EmpireLeave'; args: EmpireLeave }
  | { name: 'EmpireMarkForExpansion'; args: EmpireMarkForExpansion }
  | { name: 'EmpireMarkForSiege'; args: EmpireMarkForSiege }
  | { name: 'EmpirePlayerJoin'; args: EmpirePlayerJoin }
  | { name: 'EmpirePlayerLeave'; args: EmpirePlayerLeave }
  | { name: 'EmpireSetDirectiveMessage'; args: EmpireSetDirectiveMessage }
  | { name: 'EmpireSetNobilityThreshold'; args: EmpireSetNobilityThreshold }
  | { name: 'EmpireSetPlayerRank'; args: EmpireSetPlayerRank }
  | { name: 'EmpireSetRankTitle'; args: EmpireSetRankTitle }
  | { name: 'EmpireSiegeAgentLoop'; args: EmpireSiegeAgentLoop }
  | { name: 'EmpireSubmit'; args: EmpireSubmit }
  | { name: 'EmpireTransferEmperorship'; args: EmpireTransferEmperorship }
  | { name: 'EmpireUpdatePermissions'; args: EmpireUpdatePermissions }
  | { name: 'IdentityConnected'; args: IdentityConnected }
  | { name: 'IdentityDisconnected'; args: IdentityDisconnected }
  | { name: 'ImportAchievementDesc'; args: ImportAchievementDesc }
  | { name: 'ImportActiveBuffState'; args: ImportActiveBuffState }
  | { name: 'ImportAdminBroadcast'; args: ImportAdminBroadcast }
  | { name: 'ImportAlertDesc'; args: ImportAlertDesc }
  | { name: 'ImportAlertState'; args: ImportAlertState }
  | { name: 'ImportAttackOutcomeState'; args: ImportAttackOutcomeState }
  | { name: 'ImportBiomeDesc'; args: ImportBiomeDesc }
  | { name: 'ImportBuffDesc'; args: ImportBuffDesc }
  | { name: 'ImportBuffTypeDesc'; args: ImportBuffTypeDesc }
  | { name: 'ImportBuildingClaimDesc'; args: ImportBuildingClaimDesc }
  | { name: 'ImportBuildingDesc'; args: ImportBuildingDesc }
  | { name: 'ImportBuildingPortalDesc'; args: ImportBuildingPortalDesc }
  | { name: 'ImportBuildingRepairsDesc'; args: ImportBuildingRepairsDesc }
  | { name: 'ImportBuildingSpawnDesc'; args: ImportBuildingSpawnDesc }
  | { name: 'ImportBuildingState'; args: ImportBuildingState }
  | { name: 'ImportBuildingTypeDesc'; args: ImportBuildingTypeDesc }
  | { name: 'ImportCargoDesc'; args: ImportCargoDesc }
  | { name: 'ImportCharacterStatDesc'; args: ImportCharacterStatDesc }
  | { name: 'ImportCharacterStatsState'; args: ImportCharacterStatsState }
  | { name: 'ImportChatMessageState'; args: ImportChatMessageState }
  | { name: 'ImportChestRarityDesc'; args: ImportChestRarityDesc }
  | { name: 'ImportClaimLocalState'; args: ImportClaimLocalState }
  | { name: 'ImportClaimRecruitmentState'; args: ImportClaimRecruitmentState }
  | { name: 'ImportClaimState'; args: ImportClaimState }
  | { name: 'ImportClaimTechDesc'; args: ImportClaimTechDesc }
  | { name: 'ImportClaimTechState'; args: ImportClaimTechState }
  | { name: 'ImportClaimTileCost'; args: ImportClaimTileCost }
  | { name: 'ImportClaimTileState'; args: ImportClaimTileState }
  | { name: 'ImportClimbRequirementDesc'; args: ImportClimbRequirementDesc }
  | { name: 'ImportClothingDesc'; args: ImportClothingDesc }
  | { name: 'ImportCollectibleDesc'; args: ImportCollectibleDesc }
  | { name: 'ImportCombatActionDesc'; args: ImportCombatActionDesc }
  | { name: 'ImportCombatState'; args: ImportCombatState }
  | { name: 'ImportConfig'; args: ImportConfig }
  | { name: 'ImportConstructionRecipeDesc'; args: ImportConstructionRecipeDesc }
  | { name: 'ImportCraftingRecipeDesc'; args: ImportCraftingRecipeDesc }
  | { name: 'ImportDeconstructionRecipeDesc'; args: ImportDeconstructionRecipeDesc }
  | { name: 'ImportDeployableDesc'; args: ImportDeployableDesc }
  | { name: 'ImportDeployableState'; args: ImportDeployableState }
  | { name: 'ImportDimensionDescriptionState'; args: ImportDimensionDescriptionState }
  | { name: 'ImportDimensionNetworkDescriptionState'; args: ImportDimensionNetworkDescriptionState }
  | { name: 'ImportDistantVisibleEntityDesc'; args: ImportDistantVisibleEntityDesc }
  | { name: 'ImportDroppedInventoryState'; args: ImportDroppedInventoryState }
  | { name: 'ImportElevatorDesc'; args: ImportElevatorDesc }
  | { name: 'ImportEmoteDesc'; args: ImportEmoteDesc }
  | { name: 'ImportEmpireColorsDesc'; args: ImportEmpireColorsDesc }
  | { name: 'ImportEmpireNotificationDesc'; args: ImportEmpireNotificationDesc }
  | { name: 'ImportEmpireRankDesc'; args: ImportEmpireRankDesc }
  | { name: 'ImportEmpireSuppliesDesc'; args: ImportEmpireSuppliesDesc }
  | { name: 'ImportEmpireTerritoryDesc'; args: ImportEmpireTerritoryDesc }
  | { name: 'ImportEnemyAiParamsDesc'; args: ImportEnemyAiParamsDesc }
  | { name: 'ImportEnemyDesc'; args: ImportEnemyDesc }
  | { name: 'ImportEnemyState'; args: ImportEnemyState }
  | { name: 'ImportEnvironmentDebuffDesc'; args: ImportEnvironmentDebuffDesc }
  | { name: 'ImportEquipmentDesc'; args: ImportEquipmentDesc }
  | { name: 'ImportEquipmentState'; args: ImportEquipmentState }
  | { name: 'ImportExperienceState'; args: ImportExperienceState }
  | { name: 'ImportExplorationChunksState'; args: ImportExplorationChunksState }
  | { name: 'ImportExtractionRecipeDesc'; args: ImportExtractionRecipeDesc }
  | { name: 'ImportFoodDesc'; args: ImportFoodDesc }
  | { name: 'ImportFootprintTileState'; args: ImportFootprintTileState }
  | { name: 'ImportGateDesc'; args: ImportGateDesc }
  | { name: 'ImportGlobals'; args: ImportGlobals }
  | { name: 'ImportGrowthState'; args: ImportGrowthState }
  | { name: 'ImportHealthState'; args: ImportHealthState }
  | { name: 'ImportHerdCache'; args: ImportHerdCache }
  | { name: 'ImportHexiteExchangeEntryDesc'; args: ImportHexiteExchangeEntryDesc }
  | { name: 'ImportIdentityRole'; args: ImportIdentityRole }
  | { name: 'ImportInteriorCollapseTriggerState'; args: ImportInteriorCollapseTriggerState }
  | { name: 'ImportInteriorInstanceDesc'; args: ImportInteriorInstanceDesc }
  | { name: 'ImportInteriorNetworkDesc'; args: ImportInteriorNetworkDesc }
  | { name: 'ImportInteriorPortalConnectionsDesc'; args: ImportInteriorPortalConnectionsDesc }
  | { name: 'ImportInteriorShapeDesc'; args: ImportInteriorShapeDesc }
  | { name: 'ImportInteriorSpawnDesc'; args: ImportInteriorSpawnDesc }
  | { name: 'ImportInventoryState'; args: ImportInventoryState }
  | { name: 'ImportItemConversionRecipeDesc'; args: ImportItemConversionRecipeDesc }
  | { name: 'ImportItemDesc'; args: ImportItemDesc }
  | { name: 'ImportItemListDesc'; args: ImportItemListDesc }
  | { name: 'ImportKnowledgeAchievementState'; args: ImportKnowledgeAchievementState }
  | { name: 'ImportKnowledgeBattleActionState'; args: ImportKnowledgeBattleActionState }
  | { name: 'ImportKnowledgeBuildingState'; args: ImportKnowledgeBuildingState }
  | { name: 'ImportKnowledgeCargoState'; args: ImportKnowledgeCargoState }
  | { name: 'ImportKnowledgeConstructionState'; args: ImportKnowledgeConstructionState }
  | { name: 'ImportKnowledgeCraftState'; args: ImportKnowledgeCraftState }
  | { name: 'ImportKnowledgeDeployableState'; args: ImportKnowledgeDeployableState }
  | { name: 'ImportKnowledgeEnemyState'; args: ImportKnowledgeEnemyState }
  | { name: 'ImportKnowledgeExtractState'; args: ImportKnowledgeExtractState }
  | { name: 'ImportKnowledgeItemState'; args: ImportKnowledgeItemState }
  | { name: 'ImportKnowledgeLoreState'; args: ImportKnowledgeLoreState }
  | { name: 'ImportKnowledgeNpcState'; args: ImportKnowledgeNpcState }
  | { name: 'ImportKnowledgePavingState'; args: ImportKnowledgePavingState }
  | { name: 'ImportKnowledgeResourcePlacementState'; args: ImportKnowledgeResourcePlacementState }
  | { name: 'ImportKnowledgeResourceState'; args: ImportKnowledgeResourceState }
  | { name: 'ImportKnowledgeRuinsState'; args: ImportKnowledgeRuinsState }
  | { name: 'ImportKnowledgeScrollDesc'; args: ImportKnowledgeScrollDesc }
  | { name: 'ImportKnowledgeScrollTypeDesc'; args: ImportKnowledgeScrollTypeDesc }
  | { name: 'ImportKnowledgeSecondaryState'; args: ImportKnowledgeSecondaryState }
  | { name: 'ImportKnowledgeStatModifierDesc'; args: ImportKnowledgeStatModifierDesc }
  | { name: 'ImportKnowledgeVaultState'; args: ImportKnowledgeVaultState }
  | { name: 'ImportLocationState'; args: ImportLocationState }
  | { name: 'ImportLootChestDesc'; args: ImportLootChestDesc }
  | { name: 'ImportLootChestState'; args: ImportLootChestState }
  | { name: 'ImportLootRarityDesc'; args: ImportLootRarityDesc }
  | { name: 'ImportLootTableDesc'; args: ImportLootTableDesc }
  | { name: 'ImportMobileEntityState'; args: ImportMobileEntityState }
  | { name: 'ImportMountingState'; args: ImportMountingState }
  | { name: 'ImportNpcDesc'; args: ImportNpcDesc }
  | { name: 'ImportNpcState'; args: ImportNpcState }
  | { name: 'ImportOnboardingRewardDesc'; args: ImportOnboardingRewardDesc }
  | { name: 'ImportOnboardingState'; args: ImportOnboardingState }
  | { name: 'ImportParametersDesc'; args: ImportParametersDesc }
  | { name: 'ImportPathfindingDesc'; args: ImportPathfindingDesc }
  | { name: 'ImportPavedTileState'; args: ImportPavedTileState }
  | { name: 'ImportPavingTileDesc'; args: ImportPavingTileDesc }
  | { name: 'ImportPlayerActionDesc'; args: ImportPlayerActionDesc }
  | { name: 'ImportPlayerActionState'; args: ImportPlayerActionState }
  | { name: 'ImportPlayerPrefsState'; args: ImportPlayerPrefsState }
  | { name: 'ImportPlayerState'; args: ImportPlayerState }
  | { name: 'ImportPlayerVoteState'; args: ImportPlayerVoteState }
  | { name: 'ImportPortalState'; args: ImportPortalState }
  | { name: 'ImportPrivateParametersDesc'; args: ImportPrivateParametersDesc }
  | { name: 'ImportProgressiveActionState'; args: ImportProgressiveActionState }
  | { name: 'ImportProjectSiteState'; args: ImportProjectSiteState }
  | { name: 'ImportRegionConnectionInfo'; args: ImportRegionConnectionInfo }
  | { name: 'ImportRegionSignInParameters'; args: ImportRegionSignInParameters }
  | { name: 'ImportRentState'; args: ImportRentState }
  | { name: 'ImportResourceClumpDesc'; args: ImportResourceClumpDesc }
  | { name: 'ImportResourceCount'; args: ImportResourceCount }
  | { name: 'ImportResourceDesc'; args: ImportResourceDesc }
  | { name: 'ImportResourceGrowthRecipeDesc'; args: ImportResourceGrowthRecipeDesc }
  | { name: 'ImportResourcePlacementRecipeDesc'; args: ImportResourcePlacementRecipeDesc }
  | { name: 'ImportResourceState'; args: ImportResourceState }
  | { name: 'ImportSatiationState'; args: ImportSatiationState }
  | { name: 'ImportSecondaryKnowledgeDesc'; args: ImportSecondaryKnowledgeDesc }
  | { name: 'ImportServerIdentity'; args: ImportServerIdentity }
  | { name: 'ImportSignedInPlayerState'; args: ImportSignedInPlayerState }
  | { name: 'ImportSkillDesc'; args: ImportSkillDesc }
  | { name: 'ImportStaminaState'; args: ImportStaminaState }
  | { name: 'ImportTargetState'; args: ImportTargetState }
  | { name: 'ImportTargetableState'; args: ImportTargetableState }
  | { name: 'ImportTargetingMatrixDesc'; args: ImportTargetingMatrixDesc }
  | { name: 'ImportTeleportItemDesc'; args: ImportTeleportItemDesc }
  | { name: 'ImportTerraformRecipeDesc'; args: ImportTerraformRecipeDesc }
  | { name: 'ImportTerrainChunkState'; args: ImportTerrainChunkState }
  | { name: 'ImportToolDesc'; args: ImportToolDesc }
  | { name: 'ImportToolTypeDesc'; args: ImportToolTypeDesc }
  | { name: 'ImportTradeOrderState'; args: ImportTradeOrderState }
  | { name: 'ImportTradeSessionState'; args: ImportTradeSessionState }
  | { name: 'ImportTravelerTaskDesc'; args: ImportTravelerTaskDesc }
  | { name: 'ImportTravelerTradeOrderDesc'; args: ImportTravelerTradeOrderDesc }
  | { name: 'ImportUserModerationState'; args: ImportUserModerationState }
  | { name: 'ImportUserState'; args: ImportUserState }
  | { name: 'ImportVaultState'; args: ImportVaultState }
  | { name: 'ImportWallDesc'; args: ImportWallDesc }
  | { name: 'ImportWeaponDesc'; args: ImportWeaponDesc }
  | { name: 'ImportWeaponTypeDesc'; args: ImportWeaponTypeDesc }
  | { name: 'ImportWorldRegionNameState'; args: ImportWorldRegionNameState }
  | { name: 'ImportWorldRegionState'; args: ImportWorldRegionState }
  | { name: 'LoadConfig'; args: LoadConfig }
  | { name: 'LogEmpireLeaderboard'; args: LogEmpireLeaderboard }
  | { name: 'LogPlayerWith'; args: LogPlayerWith }
  | { name: 'OnInterModuleMessageProcessed'; args: OnInterModuleMessageProcessed }
  | { name: 'PlayerClaimDailyShards'; args: PlayerClaimDailyShards }
  | { name: 'PlayerCreate'; args: PlayerCreate }
  | { name: 'PlayerDismissNotification'; args: PlayerDismissNotification }
  | { name: 'PlayerNotificationEventReducer'; args: PlayerNotificationEventReducer }
  | { name: 'PlayerSetName'; args: PlayerSetName }
  | { name: 'PlayerVoteAnswer'; args: PlayerVoteAnswer }
  | { name: 'PlayerVoteConclude'; args: PlayerVoteConclude }
  | { name: 'ProcessInterModuleMessage'; args: ProcessInterModuleMessage }
  | { name: 'SetRoleForIdentity'; args: SetRoleForIdentity }
  | { name: 'SignIn'; args: SignIn }
  | { name: 'StageAchievementDesc'; args: StageAchievementDesc }
  | { name: 'StageAlertDesc'; args: StageAlertDesc }
  | { name: 'StageBiomeDesc'; args: StageBiomeDesc }
  | { name: 'StageBuffDesc'; args: StageBuffDesc }
  | { name: 'StageBuffTypeDesc'; args: StageBuffTypeDesc }
  | { name: 'StageBuildingClaimDesc'; args: StageBuildingClaimDesc }
  | { name: 'StageBuildingDesc'; args: StageBuildingDesc }
  | { name: 'StageBuildingPortalDesc'; args: StageBuildingPortalDesc }
  | { name: 'StageBuildingRepairsDesc'; args: StageBuildingRepairsDesc }
  | { name: 'StageBuildingSpawnDesc'; args: StageBuildingSpawnDesc }
  | { name: 'StageBuildingTypeDesc'; args: StageBuildingTypeDesc }
  | { name: 'StageCargoDesc'; args: StageCargoDesc }
  | { name: 'StageCharacterStatDesc'; args: StageCharacterStatDesc }
  | { name: 'StageChestRarityDesc'; args: StageChestRarityDesc }
  | { name: 'StageClaimTechDesc'; args: StageClaimTechDesc }
  | { name: 'StageClaimTileCost'; args: StageClaimTileCost }
  | { name: 'StageClimbRequirementDesc'; args: StageClimbRequirementDesc }
  | { name: 'StageClothingDesc'; args: StageClothingDesc }
  | { name: 'StageCollectibleDesc'; args: StageCollectibleDesc }
  | { name: 'StageCombatActionDesc'; args: StageCombatActionDesc }
  | { name: 'StageConstructionRecipeDesc'; args: StageConstructionRecipeDesc }
  | { name: 'StageCraftingRecipeDesc'; args: StageCraftingRecipeDesc }
  | { name: 'StageDeconstructionRecipeDesc'; args: StageDeconstructionRecipeDesc }
  | { name: 'StageDeployableDesc'; args: StageDeployableDesc }
  | { name: 'StageDistantVisibleEntityDesc'; args: StageDistantVisibleEntityDesc }
  | { name: 'StageElevatorDesc'; args: StageElevatorDesc }
  | { name: 'StageEmoteDesc'; args: StageEmoteDesc }
  | { name: 'StageEmpireColorsDesc'; args: StageEmpireColorsDesc }
  | { name: 'StageEmpireIconDesc'; args: StageEmpireIconDesc }
  | { name: 'StageEmpireNotificationDesc'; args: StageEmpireNotificationDesc }
  | { name: 'StageEmpireRankDesc'; args: StageEmpireRankDesc }
  | { name: 'StageEmpireSuppliesDesc'; args: StageEmpireSuppliesDesc }
  | { name: 'StageEmpireTerritoryDesc'; args: StageEmpireTerritoryDesc }
  | { name: 'StageEnemyAiParamsDesc'; args: StageEnemyAiParamsDesc }
  | { name: 'StageEnemyDesc'; args: StageEnemyDesc }
  | { name: 'StageEnvironmentDebuffDesc'; args: StageEnvironmentDebuffDesc }
  | { name: 'StageEquipmentDesc'; args: StageEquipmentDesc }
  | { name: 'StageExtractionRecipeDesc'; args: StageExtractionRecipeDesc }
  | { name: 'StageFoodDesc'; args: StageFoodDesc }
  | { name: 'StageGateDesc'; args: StageGateDesc }
  | { name: 'StageHexiteExchangeEntryDesc'; args: StageHexiteExchangeEntryDesc }
  | { name: 'StageInteriorEnvironmentDesc'; args: StageInteriorEnvironmentDesc }
  | { name: 'StageInteriorInstanceDesc'; args: StageInteriorInstanceDesc }
  | { name: 'StageInteriorNetworkDesc'; args: StageInteriorNetworkDesc }
  | { name: 'StageInteriorPortalConnectionsDesc'; args: StageInteriorPortalConnectionsDesc }
  | { name: 'StageInteriorShapeDesc'; args: StageInteriorShapeDesc }
  | { name: 'StageInteriorSpawnDesc'; args: StageInteriorSpawnDesc }
  | { name: 'StageItemConversionRecipeDesc'; args: StageItemConversionRecipeDesc }
  | { name: 'StageItemDesc'; args: StageItemDesc }
  | { name: 'StageItemListDesc'; args: StageItemListDesc }
  | { name: 'StageKnowledgeScrollDesc'; args: StageKnowledgeScrollDesc }
  | { name: 'StageKnowledgeScrollTypeDesc'; args: StageKnowledgeScrollTypeDesc }
  | { name: 'StageKnowledgeStatModifierDesc'; args: StageKnowledgeStatModifierDesc }
  | { name: 'StageLootChestDesc'; args: StageLootChestDesc }
  | { name: 'StageLootRarityDesc'; args: StageLootRarityDesc }
  | { name: 'StageLootTableDesc'; args: StageLootTableDesc }
  | { name: 'StageNpcDesc'; args: StageNpcDesc }
  | { name: 'StageOnboardingRewardDesc'; args: StageOnboardingRewardDesc }
  | { name: 'StageParametersDesc'; args: StageParametersDesc }
  | { name: 'StagePathfindingDesc'; args: StagePathfindingDesc }
  | { name: 'StagePavingTileDesc'; args: StagePavingTileDesc }
  | { name: 'StagePillarShapingDesc'; args: StagePillarShapingDesc }
  | { name: 'StagePlayerActionDesc'; args: StagePlayerActionDesc }
  | { name: 'StagePlayerHousingDesc'; args: StagePlayerHousingDesc }
  | { name: 'StagePrivateParametersDesc'; args: StagePrivateParametersDesc }
  | { name: 'StageReservedNameDesc'; args: StageReservedNameDesc }
  | { name: 'StageResourceClumpDesc'; args: StageResourceClumpDesc }
  | { name: 'StageResourceDesc'; args: StageResourceDesc }
  | { name: 'StageResourceGrowthRecipeDesc'; args: StageResourceGrowthRecipeDesc }
  | { name: 'StageResourcePlacementRecipeDesc'; args: StageResourcePlacementRecipeDesc }
  | { name: 'StageSecondaryKnowledgeDesc'; args: StageSecondaryKnowledgeDesc }
  | { name: 'StageSkillDesc'; args: StageSkillDesc }
  | { name: 'StageTargetingMatrixDesc'; args: StageTargetingMatrixDesc }
  | { name: 'StageTeleportItemDesc'; args: StageTeleportItemDesc }
  | { name: 'StageTerraformRecipeDesc'; args: StageTerraformRecipeDesc }
  | { name: 'StageToolDesc'; args: StageToolDesc }
  | { name: 'StageToolTypeDesc'; args: StageToolTypeDesc }
  | { name: 'StageTravelerTaskDesc'; args: StageTravelerTaskDesc }
  | { name: 'StageTravelerTradeOrderDesc'; args: StageTravelerTradeOrderDesc }
  | { name: 'StageWallDesc'; args: StageWallDesc }
  | { name: 'StageWeaponDesc'; args: StageWeaponDesc }
  | { name: 'StageWeaponTypeDesc'; args: StageWeaponTypeDesc }
  | { name: 'UpdateRoleForPlayer'; args: UpdateRoleForPlayer }
  | { name: 'UpdateScheduledTimersFromStaticData'; args: UpdateScheduledTimersFromStaticData }
  | { name: 'UserModerationClearAll'; args: UserModerationClearAll }
  | { name: 'UserModerationCreate'; args: UserModerationCreate }
  | { name: 'UserModerationDelete'; args: UserModerationDelete }
  | { name: 'UserModerationListAll'; args: UserModerationListAll }

export class RemoteReducers {
  constructor(
    private connection: DbConnectionImpl,
    private setCallReducerFlags: SetReducerFlags
  ) {}

  adminBroadcastMsg(region: number, title: string, message: string) {
    const __args = { region, title, message }
    let __writer = new BinaryWriter(1024)
    AdminBroadcastMsg.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('admin_broadcast_msg', __argsBuffer, this.setCallReducerFlags.adminBroadcastMsgFlags)
  }

  onAdminBroadcastMsg(callback: (ctx: ReducerEventContext, region: number, title: string, message: string) => void) {
    this.connection.onReducer('admin_broadcast_msg', callback)
  }

  removeOnAdminBroadcastMsg(
    callback: (ctx: ReducerEventContext, region: number, title: string, message: string) => void
  ) {
    this.connection.offReducer('admin_broadcast_msg', callback)
  }

  adminGrantShards(identity: string, amount: number) {
    const __args = { identity, amount }
    let __writer = new BinaryWriter(1024)
    AdminGrantShards.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('admin_grant_shards', __argsBuffer, this.setCallReducerFlags.adminGrantShardsFlags)
  }

  onAdminGrantShards(callback: (ctx: ReducerEventContext, identity: string, amount: number) => void) {
    this.connection.onReducer('admin_grant_shards', callback)
  }

  removeOnAdminGrantShards(callback: (ctx: ReducerEventContext, identity: string, amount: number) => void) {
    this.connection.offReducer('admin_grant_shards', callback)
  }

  adminMarkUserReportAsActioned(entityId: bigint, actioned: boolean) {
    const __args = { entityId, actioned }
    let __writer = new BinaryWriter(1024)
    AdminMarkUserReportAsActioned.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'admin_mark_user_report_as_actioned',
      __argsBuffer,
      this.setCallReducerFlags.adminMarkUserReportAsActionedFlags
    )
  }

  onAdminMarkUserReportAsActioned(callback: (ctx: ReducerEventContext, entityId: bigint, actioned: boolean) => void) {
    this.connection.onReducer('admin_mark_user_report_as_actioned', callback)
  }

  removeOnAdminMarkUserReportAsActioned(
    callback: (ctx: ReducerEventContext, entityId: bigint, actioned: boolean) => void
  ) {
    this.connection.offReducer('admin_mark_user_report_as_actioned', callback)
  }

  adminNotifyPlayer(username: string, title: string, message: string) {
    const __args = { username, title, message }
    let __writer = new BinaryWriter(1024)
    AdminNotifyPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('admin_notify_player', __argsBuffer, this.setCallReducerFlags.adminNotifyPlayerFlags)
  }

  onAdminNotifyPlayer(callback: (ctx: ReducerEventContext, username: string, title: string, message: string) => void) {
    this.connection.onReducer('admin_notify_player', callback)
  }

  removeOnAdminNotifyPlayer(
    callback: (ctx: ReducerEventContext, username: string, title: string, message: string) => void
  ) {
    this.connection.offReducer('admin_notify_player', callback)
  }

  adminNotifyPlayerByIdentity(identity: string, title: string, message: string) {
    const __args = { identity, title, message }
    let __writer = new BinaryWriter(1024)
    AdminNotifyPlayerByIdentity.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'admin_notify_player_by_identity',
      __argsBuffer,
      this.setCallReducerFlags.adminNotifyPlayerByIdentityFlags
    )
  }

  onAdminNotifyPlayerByIdentity(
    callback: (ctx: ReducerEventContext, identity: string, title: string, message: string) => void
  ) {
    this.connection.onReducer('admin_notify_player_by_identity', callback)
  }

  removeOnAdminNotifyPlayerByIdentity(
    callback: (ctx: ReducerEventContext, identity: string, title: string, message: string) => void
  ) {
    this.connection.offReducer('admin_notify_player_by_identity', callback)
  }

  adminRenameEmpire(currentName: string, newName: string) {
    const __args = { currentName, newName }
    let __writer = new BinaryWriter(1024)
    AdminRenameEmpire.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('admin_rename_empire', __argsBuffer, this.setCallReducerFlags.adminRenameEmpireFlags)
  }

  onAdminRenameEmpire(callback: (ctx: ReducerEventContext, currentName: string, newName: string) => void) {
    this.connection.onReducer('admin_rename_empire', callback)
  }

  removeOnAdminRenameEmpire(callback: (ctx: ReducerEventContext, currentName: string, newName: string) => void) {
    this.connection.offReducer('admin_rename_empire', callback)
  }

  adminRenameEmpireEntity(entityId: bigint, newName: string) {
    const __args = { entityId, newName }
    let __writer = new BinaryWriter(1024)
    AdminRenameEmpireEntity.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'admin_rename_empire_entity',
      __argsBuffer,
      this.setCallReducerFlags.adminRenameEmpireEntityFlags
    )
  }

  onAdminRenameEmpireEntity(callback: (ctx: ReducerEventContext, entityId: bigint, newName: string) => void) {
    this.connection.onReducer('admin_rename_empire_entity', callback)
  }

  removeOnAdminRenameEmpireEntity(callback: (ctx: ReducerEventContext, entityId: bigint, newName: string) => void) {
    this.connection.offReducer('admin_rename_empire_entity', callback)
  }

  adminRenameEmpireRank(empireName: string, rank: number, newName: string) {
    const __args = { empireName, rank, newName }
    let __writer = new BinaryWriter(1024)
    AdminRenameEmpireRank.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'admin_rename_empire_rank',
      __argsBuffer,
      this.setCallReducerFlags.adminRenameEmpireRankFlags
    )
  }

  onAdminRenameEmpireRank(
    callback: (ctx: ReducerEventContext, empireName: string, rank: number, newName: string) => void
  ) {
    this.connection.onReducer('admin_rename_empire_rank', callback)
  }

  removeOnAdminRenameEmpireRank(
    callback: (ctx: ReducerEventContext, empireName: string, rank: number, newName: string) => void
  ) {
    this.connection.offReducer('admin_rename_empire_rank', callback)
  }

  adminRenameEmpireRankEntity(empireEntityId: bigint, rank: number, newName: string) {
    const __args = { empireEntityId, rank, newName }
    let __writer = new BinaryWriter(1024)
    AdminRenameEmpireRankEntity.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'admin_rename_empire_rank_entity',
      __argsBuffer,
      this.setCallReducerFlags.adminRenameEmpireRankEntityFlags
    )
  }

  onAdminRenameEmpireRankEntity(
    callback: (ctx: ReducerEventContext, empireEntityId: bigint, rank: number, newName: string) => void
  ) {
    this.connection.onReducer('admin_rename_empire_rank_entity', callback)
  }

  removeOnAdminRenameEmpireRankEntity(
    callback: (ctx: ReducerEventContext, empireEntityId: bigint, rank: number, newName: string) => void
  ) {
    this.connection.offReducer('admin_rename_empire_rank_entity', callback)
  }

  adminRenamePlayer(currentName: string, newName: string) {
    const __args = { currentName, newName }
    let __writer = new BinaryWriter(1024)
    AdminRenamePlayer.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('admin_rename_player', __argsBuffer, this.setCallReducerFlags.adminRenamePlayerFlags)
  }

  onAdminRenamePlayer(callback: (ctx: ReducerEventContext, currentName: string, newName: string) => void) {
    this.connection.onReducer('admin_rename_player', callback)
  }

  removeOnAdminRenamePlayer(callback: (ctx: ReducerEventContext, currentName: string, newName: string) => void) {
    this.connection.offReducer('admin_rename_player', callback)
  }

  adminRenamePlayerEntity(entityId: bigint, newName: string) {
    const __args = { entityId, newName }
    let __writer = new BinaryWriter(1024)
    AdminRenamePlayerEntity.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'admin_rename_player_entity',
      __argsBuffer,
      this.setCallReducerFlags.adminRenamePlayerEntityFlags
    )
  }

  onAdminRenamePlayerEntity(callback: (ctx: ReducerEventContext, entityId: bigint, newName: string) => void) {
    this.connection.onReducer('admin_rename_player_entity', callback)
  }

  removeOnAdminRenamePlayerEntity(callback: (ctx: ReducerEventContext, entityId: bigint, newName: string) => void) {
    this.connection.offReducer('admin_rename_player_entity', callback)
  }

  adminSignOutAll(region: number) {
    const __args = { region }
    let __writer = new BinaryWriter(1024)
    AdminSignOutAll.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('admin_sign_out_all', __argsBuffer, this.setCallReducerFlags.adminSignOutAllFlags)
  }

  onAdminSignOutAll(callback: (ctx: ReducerEventContext, region: number) => void) {
    this.connection.onReducer('admin_sign_out_all', callback)
  }

  removeOnAdminSignOutAll(callback: (ctx: ReducerEventContext, region: number) => void) {
    this.connection.offReducer('admin_sign_out_all', callback)
  }

  adminSkipQueueEntity(entityId: bigint) {
    const __args = { entityId }
    let __writer = new BinaryWriter(1024)
    AdminSkipQueueEntity.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'admin_skip_queue_entity',
      __argsBuffer,
      this.setCallReducerFlags.adminSkipQueueEntityFlags
    )
  }

  onAdminSkipQueueEntity(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.onReducer('admin_skip_queue_entity', callback)
  }

  removeOnAdminSkipQueueEntity(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.offReducer('admin_skip_queue_entity', callback)
  }

  adminSkipQueueIdentity(identity: Identity) {
    const __args = { identity }
    let __writer = new BinaryWriter(1024)
    AdminSkipQueueIdentity.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'admin_skip_queue_identity',
      __argsBuffer,
      this.setCallReducerFlags.adminSkipQueueIdentityFlags
    )
  }

  onAdminSkipQueueIdentity(callback: (ctx: ReducerEventContext, identity: Identity) => void) {
    this.connection.onReducer('admin_skip_queue_identity', callback)
  }

  removeOnAdminSkipQueueIdentity(callback: (ctx: ReducerEventContext, identity: Identity) => void) {
    this.connection.offReducer('admin_skip_queue_identity', callback)
  }

  adminSkipQueueName(name: string) {
    const __args = { name }
    let __writer = new BinaryWriter(1024)
    AdminSkipQueueName.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('admin_skip_queue_name', __argsBuffer, this.setCallReducerFlags.adminSkipQueueNameFlags)
  }

  onAdminSkipQueueName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer('admin_skip_queue_name', callback)
  }

  removeOnAdminSkipQueueName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer('admin_skip_queue_name', callback)
  }

  adminUpdateGrantedHubItemState(identity: Identity, itemType: HubItemType, itemId: number, balance: number) {
    const __args = { identity, itemType, itemId, balance }
    let __writer = new BinaryWriter(1024)
    AdminUpdateGrantedHubItemState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'admin_update_granted_hub_item_state',
      __argsBuffer,
      this.setCallReducerFlags.adminUpdateGrantedHubItemStateFlags
    )
  }

  onAdminUpdateGrantedHubItemState(
    callback: (
      ctx: ReducerEventContext,
      identity: Identity,
      itemType: HubItemType,
      itemId: number,
      balance: number
    ) => void
  ) {
    this.connection.onReducer('admin_update_granted_hub_item_state', callback)
  }

  removeOnAdminUpdateGrantedHubItemState(
    callback: (
      ctx: ReducerEventContext,
      identity: Identity,
      itemType: HubItemType,
      itemId: number,
      balance: number
    ) => void
  ) {
    this.connection.offReducer('admin_update_granted_hub_item_state', callback)
  }

  adminUpdateSignInParameters(regionSignInParameters: RegionSignInParameters, region: number) {
    const __args = { regionSignInParameters, region }
    let __writer = new BinaryWriter(1024)
    AdminUpdateSignInParameters.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'admin_update_sign_in_parameters',
      __argsBuffer,
      this.setCallReducerFlags.adminUpdateSignInParametersFlags
    )
  }

  onAdminUpdateSignInParameters(
    callback: (ctx: ReducerEventContext, regionSignInParameters: RegionSignInParameters, region: number) => void
  ) {
    this.connection.onReducer('admin_update_sign_in_parameters', callback)
  }

  removeOnAdminUpdateSignInParameters(
    callback: (ctx: ReducerEventContext, regionSignInParameters: RegionSignInParameters, region: number) => void
  ) {
    this.connection.offReducer('admin_update_sign_in_parameters', callback)
  }

  authenticate(identity: string) {
    const __args = { identity }
    let __writer = new BinaryWriter(1024)
    Authenticate.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('authenticate', __argsBuffer, this.setCallReducerFlags.authenticateFlags)
  }

  onAuthenticate(callback: (ctx: ReducerEventContext, identity: string) => void) {
    this.connection.onReducer('authenticate', callback)
  }

  removeOnAuthenticate(callback: (ctx: ReducerEventContext, identity: string) => void) {
    this.connection.offReducer('authenticate', callback)
  }

  blockIdentity(identity: string) {
    const __args = { identity }
    let __writer = new BinaryWriter(1024)
    BlockIdentity.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('block_identity', __argsBuffer, this.setCallReducerFlags.blockIdentityFlags)
  }

  onBlockIdentity(callback: (ctx: ReducerEventContext, identity: string) => void) {
    this.connection.onReducer('block_identity', callback)
  }

  removeOnBlockIdentity(callback: (ctx: ReducerEventContext, identity: string) => void) {
    this.connection.offReducer('block_identity', callback)
  }

  cheatEmpireSiegeAddSupplies(siegeNodeEntityId: bigint, supplies: number) {
    const __args = { siegeNodeEntityId, supplies }
    let __writer = new BinaryWriter(1024)
    CheatEmpireSiegeAddSupplies.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'cheat_empire_siege_add_supplies',
      __argsBuffer,
      this.setCallReducerFlags.cheatEmpireSiegeAddSuppliesFlags
    )
  }

  onCheatEmpireSiegeAddSupplies(
    callback: (ctx: ReducerEventContext, siegeNodeEntityId: bigint, supplies: number) => void
  ) {
    this.connection.onReducer('cheat_empire_siege_add_supplies', callback)
  }

  removeOnCheatEmpireSiegeAddSupplies(
    callback: (ctx: ReducerEventContext, siegeNodeEntityId: bigint, supplies: number) => void
  ) {
    this.connection.offReducer('cheat_empire_siege_add_supplies', callback)
  }

  cheatEmpireSiegeCancel(siegeNodeEntityId: bigint) {
    const __args = { siegeNodeEntityId }
    let __writer = new BinaryWriter(1024)
    CheatEmpireSiegeCancel.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'cheat_empire_siege_cancel',
      __argsBuffer,
      this.setCallReducerFlags.cheatEmpireSiegeCancelFlags
    )
  }

  onCheatEmpireSiegeCancel(callback: (ctx: ReducerEventContext, siegeNodeEntityId: bigint) => void) {
    this.connection.onReducer('cheat_empire_siege_cancel', callback)
  }

  removeOnCheatEmpireSiegeCancel(callback: (ctx: ReducerEventContext, siegeNodeEntityId: bigint) => void) {
    this.connection.offReducer('cheat_empire_siege_cancel', callback)
  }

  cheatPlayerSetName(playerEntityId: bigint, name: string) {
    const __args = { playerEntityId, name }
    let __writer = new BinaryWriter(1024)
    CheatPlayerSetName.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('cheat_player_set_name', __argsBuffer, this.setCallReducerFlags.cheatPlayerSetNameFlags)
  }

  onCheatPlayerSetName(callback: (ctx: ReducerEventContext, playerEntityId: bigint, name: string) => void) {
    this.connection.onReducer('cheat_player_set_name', callback)
  }

  removeOnCheatPlayerSetName(callback: (ctx: ReducerEventContext, playerEntityId: bigint, name: string) => void) {
    this.connection.offReducer('cheat_player_set_name', callback)
  }

  cheatShardsGrant(request: CheatShardsGrantRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    CheatShardsGrant.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('cheat_shards_grant', __argsBuffer, this.setCallReducerFlags.cheatShardsGrantFlags)
  }

  onCheatShardsGrant(callback: (ctx: ReducerEventContext, request: CheatShardsGrantRequest) => void) {
    this.connection.onReducer('cheat_shards_grant', callback)
  }

  removeOnCheatShardsGrant(callback: (ctx: ReducerEventContext, request: CheatShardsGrantRequest) => void) {
    this.connection.offReducer('cheat_shards_grant', callback)
  }

  clearStagedStaticData() {
    this.connection.callReducer(
      'clear_staged_static_data',
      new Uint8Array(0),
      this.setCallReducerFlags.clearStagedStaticDataFlags
    )
  }

  onClearStagedStaticData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('clear_staged_static_data', callback)
  }

  removeOnClearStagedStaticData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('clear_staged_static_data', callback)
  }

  commitStagedStaticData() {
    this.connection.callReducer(
      'commit_staged_static_data',
      new Uint8Array(0),
      this.setCallReducerFlags.commitStagedStaticDataFlags
    )
  }

  onCommitStagedStaticData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('commit_staged_static_data', callback)
  }

  removeOnCommitStagedStaticData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('commit_staged_static_data', callback)
  }

  currentVersion() {
    this.connection.callReducer('current_version', new Uint8Array(0), this.setCallReducerFlags.currentVersionFlags)
  }

  onCurrentVersion(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('current_version', callback)
  }

  removeOnCurrentVersion(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('current_version', callback)
  }

  empireChangeEmblem(request: EmpireChangeEmblemRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    EmpireChangeEmblem.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('empire_change_emblem', __argsBuffer, this.setCallReducerFlags.empireChangeEmblemFlags)
  }

  onEmpireChangeEmblem(callback: (ctx: ReducerEventContext, request: EmpireChangeEmblemRequest) => void) {
    this.connection.onReducer('empire_change_emblem', callback)
  }

  removeOnEmpireChangeEmblem(callback: (ctx: ReducerEventContext, request: EmpireChangeEmblemRequest) => void) {
    this.connection.offReducer('empire_change_emblem', callback)
  }

  empireCraftSupplies(foundryEntityId: bigint) {
    const __args = { foundryEntityId }
    let __writer = new BinaryWriter(1024)
    EmpireCraftSupplies.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'empire_craft_supplies',
      __argsBuffer,
      this.setCallReducerFlags.empireCraftSuppliesFlags
    )
  }

  onEmpireCraftSupplies(callback: (ctx: ReducerEventContext, foundryEntityId: bigint) => void) {
    this.connection.onReducer('empire_craft_supplies', callback)
  }

  removeOnEmpireCraftSupplies(callback: (ctx: ReducerEventContext, foundryEntityId: bigint) => void) {
    this.connection.offReducer('empire_craft_supplies', callback)
  }

  empireCraftSuppliesScheduled(timer: EmpireCraftSuppliesTimer) {
    const __args = { timer }
    let __writer = new BinaryWriter(1024)
    EmpireCraftSuppliesScheduled.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'empire_craft_supplies_scheduled',
      __argsBuffer,
      this.setCallReducerFlags.empireCraftSuppliesScheduledFlags
    )
  }

  onEmpireCraftSuppliesScheduled(callback: (ctx: ReducerEventContext, timer: EmpireCraftSuppliesTimer) => void) {
    this.connection.onReducer('empire_craft_supplies_scheduled', callback)
  }

  removeOnEmpireCraftSuppliesScheduled(callback: (ctx: ReducerEventContext, timer: EmpireCraftSuppliesTimer) => void) {
    this.connection.offReducer('empire_craft_supplies_scheduled', callback)
  }

  empireDecayAgentLoop(timer: EmpireDecayLoopTimer) {
    const __args = { timer }
    let __writer = new BinaryWriter(1024)
    EmpireDecayAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'empire_decay_agent_loop',
      __argsBuffer,
      this.setCallReducerFlags.empireDecayAgentLoopFlags
    )
  }

  onEmpireDecayAgentLoop(callback: (ctx: ReducerEventContext, timer: EmpireDecayLoopTimer) => void) {
    this.connection.onReducer('empire_decay_agent_loop', callback)
  }

  removeOnEmpireDecayAgentLoop(callback: (ctx: ReducerEventContext, timer: EmpireDecayLoopTimer) => void) {
    this.connection.offReducer('empire_decay_agent_loop', callback)
  }

  empireDismantle(request: EmpireDismantleRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    EmpireDismantle.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('empire_dismantle', __argsBuffer, this.setCallReducerFlags.empireDismantleFlags)
  }

  onEmpireDismantle(callback: (ctx: ReducerEventContext, request: EmpireDismantleRequest) => void) {
    this.connection.onReducer('empire_dismantle', callback)
  }

  removeOnEmpireDismantle(callback: (ctx: ReducerEventContext, request: EmpireDismantleRequest) => void) {
    this.connection.offReducer('empire_dismantle', callback)
  }

  empireDonateShards(request: EmpireDonateShardsRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    EmpireDonateShards.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('empire_donate_shards', __argsBuffer, this.setCallReducerFlags.empireDonateShardsFlags)
  }

  onEmpireDonateShards(callback: (ctx: ReducerEventContext, request: EmpireDonateShardsRequest) => void) {
    this.connection.onReducer('empire_donate_shards', callback)
  }

  removeOnEmpireDonateShards(callback: (ctx: ReducerEventContext, request: EmpireDonateShardsRequest) => void) {
    this.connection.offReducer('empire_donate_shards', callback)
  }

  empireForm(request: EmpireFormRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    EmpireForm.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('empire_form', __argsBuffer, this.setCallReducerFlags.empireFormFlags)
  }

  onEmpireForm(callback: (ctx: ReducerEventContext, request: EmpireFormRequest) => void) {
    this.connection.onReducer('empire_form', callback)
  }

  removeOnEmpireForm(callback: (ctx: ReducerEventContext, request: EmpireFormRequest) => void) {
    this.connection.offReducer('empire_form', callback)
  }

  empireLeave(request: EmpireLeaveRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    EmpireLeave.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('empire_leave', __argsBuffer, this.setCallReducerFlags.empireLeaveFlags)
  }

  onEmpireLeave(callback: (ctx: ReducerEventContext, request: EmpireLeaveRequest) => void) {
    this.connection.onReducer('empire_leave', callback)
  }

  removeOnEmpireLeave(callback: (ctx: ReducerEventContext, request: EmpireLeaveRequest) => void) {
    this.connection.offReducer('empire_leave', callback)
  }

  empireMarkForExpansion(request: EmpireMarkForExpansionRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    EmpireMarkForExpansion.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'empire_mark_for_expansion',
      __argsBuffer,
      this.setCallReducerFlags.empireMarkForExpansionFlags
    )
  }

  onEmpireMarkForExpansion(callback: (ctx: ReducerEventContext, request: EmpireMarkForExpansionRequest) => void) {
    this.connection.onReducer('empire_mark_for_expansion', callback)
  }

  removeOnEmpireMarkForExpansion(callback: (ctx: ReducerEventContext, request: EmpireMarkForExpansionRequest) => void) {
    this.connection.offReducer('empire_mark_for_expansion', callback)
  }

  empireMarkForSiege(request: EmpireMarkForSiegeRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    EmpireMarkForSiege.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('empire_mark_for_siege', __argsBuffer, this.setCallReducerFlags.empireMarkForSiegeFlags)
  }

  onEmpireMarkForSiege(callback: (ctx: ReducerEventContext, request: EmpireMarkForSiegeRequest) => void) {
    this.connection.onReducer('empire_mark_for_siege', callback)
  }

  removeOnEmpireMarkForSiege(callback: (ctx: ReducerEventContext, request: EmpireMarkForSiegeRequest) => void) {
    this.connection.offReducer('empire_mark_for_siege', callback)
  }

  empirePlayerJoin(request: EmpirePlayerJoinRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    EmpirePlayerJoin.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('empire_player_join', __argsBuffer, this.setCallReducerFlags.empirePlayerJoinFlags)
  }

  onEmpirePlayerJoin(callback: (ctx: ReducerEventContext, request: EmpirePlayerJoinRequest) => void) {
    this.connection.onReducer('empire_player_join', callback)
  }

  removeOnEmpirePlayerJoin(callback: (ctx: ReducerEventContext, request: EmpirePlayerJoinRequest) => void) {
    this.connection.offReducer('empire_player_join', callback)
  }

  empirePlayerLeave(request: EmpirePlayerLeaveRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    EmpirePlayerLeave.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('empire_player_leave', __argsBuffer, this.setCallReducerFlags.empirePlayerLeaveFlags)
  }

  onEmpirePlayerLeave(callback: (ctx: ReducerEventContext, request: EmpirePlayerLeaveRequest) => void) {
    this.connection.onReducer('empire_player_leave', callback)
  }

  removeOnEmpirePlayerLeave(callback: (ctx: ReducerEventContext, request: EmpirePlayerLeaveRequest) => void) {
    this.connection.offReducer('empire_player_leave', callback)
  }

  empireSetDirectiveMessage(request: EmpireSetDirectiveMessageRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    EmpireSetDirectiveMessage.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'empire_set_directive_message',
      __argsBuffer,
      this.setCallReducerFlags.empireSetDirectiveMessageFlags
    )
  }

  onEmpireSetDirectiveMessage(callback: (ctx: ReducerEventContext, request: EmpireSetDirectiveMessageRequest) => void) {
    this.connection.onReducer('empire_set_directive_message', callback)
  }

  removeOnEmpireSetDirectiveMessage(
    callback: (ctx: ReducerEventContext, request: EmpireSetDirectiveMessageRequest) => void
  ) {
    this.connection.offReducer('empire_set_directive_message', callback)
  }

  empireSetNobilityThreshold(threshold: number) {
    const __args = { threshold }
    let __writer = new BinaryWriter(1024)
    EmpireSetNobilityThreshold.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'empire_set_nobility_threshold',
      __argsBuffer,
      this.setCallReducerFlags.empireSetNobilityThresholdFlags
    )
  }

  onEmpireSetNobilityThreshold(callback: (ctx: ReducerEventContext, threshold: number) => void) {
    this.connection.onReducer('empire_set_nobility_threshold', callback)
  }

  removeOnEmpireSetNobilityThreshold(callback: (ctx: ReducerEventContext, threshold: number) => void) {
    this.connection.offReducer('empire_set_nobility_threshold', callback)
  }

  empireSetPlayerRank(request: EmpireSetPlayerRankRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    EmpireSetPlayerRank.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'empire_set_player_rank',
      __argsBuffer,
      this.setCallReducerFlags.empireSetPlayerRankFlags
    )
  }

  onEmpireSetPlayerRank(callback: (ctx: ReducerEventContext, request: EmpireSetPlayerRankRequest) => void) {
    this.connection.onReducer('empire_set_player_rank', callback)
  }

  removeOnEmpireSetPlayerRank(callback: (ctx: ReducerEventContext, request: EmpireSetPlayerRankRequest) => void) {
    this.connection.offReducer('empire_set_player_rank', callback)
  }

  empireSetRankTitle(request: EmpireSetRankTitleRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    EmpireSetRankTitle.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('empire_set_rank_title', __argsBuffer, this.setCallReducerFlags.empireSetRankTitleFlags)
  }

  onEmpireSetRankTitle(callback: (ctx: ReducerEventContext, request: EmpireSetRankTitleRequest) => void) {
    this.connection.onReducer('empire_set_rank_title', callback)
  }

  removeOnEmpireSetRankTitle(callback: (ctx: ReducerEventContext, request: EmpireSetRankTitleRequest) => void) {
    this.connection.offReducer('empire_set_rank_title', callback)
  }

  empireSiegeAgentLoop(timer: EmpireSiegeLoopTimer) {
    const __args = { timer }
    let __writer = new BinaryWriter(1024)
    EmpireSiegeAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'empire_siege_agent_loop',
      __argsBuffer,
      this.setCallReducerFlags.empireSiegeAgentLoopFlags
    )
  }

  onEmpireSiegeAgentLoop(callback: (ctx: ReducerEventContext, timer: EmpireSiegeLoopTimer) => void) {
    this.connection.onReducer('empire_siege_agent_loop', callback)
  }

  removeOnEmpireSiegeAgentLoop(callback: (ctx: ReducerEventContext, timer: EmpireSiegeLoopTimer) => void) {
    this.connection.offReducer('empire_siege_agent_loop', callback)
  }

  empireSubmit(newEmpireEntityId: bigint) {
    const __args = { newEmpireEntityId }
    let __writer = new BinaryWriter(1024)
    EmpireSubmit.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('empire_submit', __argsBuffer, this.setCallReducerFlags.empireSubmitFlags)
  }

  onEmpireSubmit(callback: (ctx: ReducerEventContext, newEmpireEntityId: bigint) => void) {
    this.connection.onReducer('empire_submit', callback)
  }

  removeOnEmpireSubmit(callback: (ctx: ReducerEventContext, newEmpireEntityId: bigint) => void) {
    this.connection.offReducer('empire_submit', callback)
  }

  empireTransferEmperorship(targetPlayerEntityId: bigint) {
    const __args = { targetPlayerEntityId }
    let __writer = new BinaryWriter(1024)
    EmpireTransferEmperorship.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'empire_transfer_emperorship',
      __argsBuffer,
      this.setCallReducerFlags.empireTransferEmperorshipFlags
    )
  }

  onEmpireTransferEmperorship(callback: (ctx: ReducerEventContext, targetPlayerEntityId: bigint) => void) {
    this.connection.onReducer('empire_transfer_emperorship', callback)
  }

  removeOnEmpireTransferEmperorship(callback: (ctx: ReducerEventContext, targetPlayerEntityId: bigint) => void) {
    this.connection.offReducer('empire_transfer_emperorship', callback)
  }

  empireUpdatePermissions(request: EmpireUpdatePermissionsRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    EmpireUpdatePermissions.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'empire_update_permissions',
      __argsBuffer,
      this.setCallReducerFlags.empireUpdatePermissionsFlags
    )
  }

  onEmpireUpdatePermissions(callback: (ctx: ReducerEventContext, request: EmpireUpdatePermissionsRequest) => void) {
    this.connection.onReducer('empire_update_permissions', callback)
  }

  removeOnEmpireUpdatePermissions(
    callback: (ctx: ReducerEventContext, request: EmpireUpdatePermissionsRequest) => void
  ) {
    this.connection.offReducer('empire_update_permissions', callback)
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('identity_connected', callback)
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('identity_connected', callback)
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('identity_disconnected', callback)
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('identity_disconnected', callback)
  }

  importAchievementDesc(records: AchievementDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportAchievementDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_achievement_desc',
      __argsBuffer,
      this.setCallReducerFlags.importAchievementDescFlags
    )
  }

  onImportAchievementDesc(callback: (ctx: ReducerEventContext, records: AchievementDesc[]) => void) {
    this.connection.onReducer('import_achievement_desc', callback)
  }

  removeOnImportAchievementDesc(callback: (ctx: ReducerEventContext, records: AchievementDesc[]) => void) {
    this.connection.offReducer('import_achievement_desc', callback)
  }

  importActiveBuffState(records: ActiveBuffState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportActiveBuffState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_active_buff_state',
      __argsBuffer,
      this.setCallReducerFlags.importActiveBuffStateFlags
    )
  }

  onImportActiveBuffState(callback: (ctx: ReducerEventContext, records: ActiveBuffState[]) => void) {
    this.connection.onReducer('import_active_buff_state', callback)
  }

  removeOnImportActiveBuffState(callback: (ctx: ReducerEventContext, records: ActiveBuffState[]) => void) {
    this.connection.offReducer('import_active_buff_state', callback)
  }

  importAdminBroadcast(records: AdminBroadcast[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportAdminBroadcast.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_admin_broadcast',
      __argsBuffer,
      this.setCallReducerFlags.importAdminBroadcastFlags
    )
  }

  onImportAdminBroadcast(callback: (ctx: ReducerEventContext, records: AdminBroadcast[]) => void) {
    this.connection.onReducer('import_admin_broadcast', callback)
  }

  removeOnImportAdminBroadcast(callback: (ctx: ReducerEventContext, records: AdminBroadcast[]) => void) {
    this.connection.offReducer('import_admin_broadcast', callback)
  }

  importAlertDesc(records: AlertDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportAlertDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_alert_desc', __argsBuffer, this.setCallReducerFlags.importAlertDescFlags)
  }

  onImportAlertDesc(callback: (ctx: ReducerEventContext, records: AlertDesc[]) => void) {
    this.connection.onReducer('import_alert_desc', callback)
  }

  removeOnImportAlertDesc(callback: (ctx: ReducerEventContext, records: AlertDesc[]) => void) {
    this.connection.offReducer('import_alert_desc', callback)
  }

  importAlertState(records: AlertState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportAlertState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_alert_state', __argsBuffer, this.setCallReducerFlags.importAlertStateFlags)
  }

  onImportAlertState(callback: (ctx: ReducerEventContext, records: AlertState[]) => void) {
    this.connection.onReducer('import_alert_state', callback)
  }

  removeOnImportAlertState(callback: (ctx: ReducerEventContext, records: AlertState[]) => void) {
    this.connection.offReducer('import_alert_state', callback)
  }

  importAttackOutcomeState(records: AttackOutcomeState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportAttackOutcomeState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_attack_outcome_state',
      __argsBuffer,
      this.setCallReducerFlags.importAttackOutcomeStateFlags
    )
  }

  onImportAttackOutcomeState(callback: (ctx: ReducerEventContext, records: AttackOutcomeState[]) => void) {
    this.connection.onReducer('import_attack_outcome_state', callback)
  }

  removeOnImportAttackOutcomeState(callback: (ctx: ReducerEventContext, records: AttackOutcomeState[]) => void) {
    this.connection.offReducer('import_attack_outcome_state', callback)
  }

  importBiomeDesc(records: BiomeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportBiomeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_biome_desc', __argsBuffer, this.setCallReducerFlags.importBiomeDescFlags)
  }

  onImportBiomeDesc(callback: (ctx: ReducerEventContext, records: BiomeDesc[]) => void) {
    this.connection.onReducer('import_biome_desc', callback)
  }

  removeOnImportBiomeDesc(callback: (ctx: ReducerEventContext, records: BiomeDesc[]) => void) {
    this.connection.offReducer('import_biome_desc', callback)
  }

  importBuffDesc(records: BuffDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportBuffDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_buff_desc', __argsBuffer, this.setCallReducerFlags.importBuffDescFlags)
  }

  onImportBuffDesc(callback: (ctx: ReducerEventContext, records: BuffDesc[]) => void) {
    this.connection.onReducer('import_buff_desc', callback)
  }

  removeOnImportBuffDesc(callback: (ctx: ReducerEventContext, records: BuffDesc[]) => void) {
    this.connection.offReducer('import_buff_desc', callback)
  }

  importBuffTypeDesc(records: BuffTypeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportBuffTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_buff_type_desc', __argsBuffer, this.setCallReducerFlags.importBuffTypeDescFlags)
  }

  onImportBuffTypeDesc(callback: (ctx: ReducerEventContext, records: BuffTypeDesc[]) => void) {
    this.connection.onReducer('import_buff_type_desc', callback)
  }

  removeOnImportBuffTypeDesc(callback: (ctx: ReducerEventContext, records: BuffTypeDesc[]) => void) {
    this.connection.offReducer('import_buff_type_desc', callback)
  }

  importBuildingClaimDesc(records: BuildingClaimDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportBuildingClaimDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_building_claim_desc',
      __argsBuffer,
      this.setCallReducerFlags.importBuildingClaimDescFlags
    )
  }

  onImportBuildingClaimDesc(callback: (ctx: ReducerEventContext, records: BuildingClaimDesc[]) => void) {
    this.connection.onReducer('import_building_claim_desc', callback)
  }

  removeOnImportBuildingClaimDesc(callback: (ctx: ReducerEventContext, records: BuildingClaimDesc[]) => void) {
    this.connection.offReducer('import_building_claim_desc', callback)
  }

  importBuildingDesc(records: BuildingDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportBuildingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_building_desc', __argsBuffer, this.setCallReducerFlags.importBuildingDescFlags)
  }

  onImportBuildingDesc(callback: (ctx: ReducerEventContext, records: BuildingDesc[]) => void) {
    this.connection.onReducer('import_building_desc', callback)
  }

  removeOnImportBuildingDesc(callback: (ctx: ReducerEventContext, records: BuildingDesc[]) => void) {
    this.connection.offReducer('import_building_desc', callback)
  }

  importBuildingPortalDesc(records: BuildingPortalDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportBuildingPortalDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_building_portal_desc',
      __argsBuffer,
      this.setCallReducerFlags.importBuildingPortalDescFlags
    )
  }

  onImportBuildingPortalDesc(callback: (ctx: ReducerEventContext, records: BuildingPortalDesc[]) => void) {
    this.connection.onReducer('import_building_portal_desc', callback)
  }

  removeOnImportBuildingPortalDesc(callback: (ctx: ReducerEventContext, records: BuildingPortalDesc[]) => void) {
    this.connection.offReducer('import_building_portal_desc', callback)
  }

  importBuildingRepairsDesc(records: BuildingRepairsDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportBuildingRepairsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_building_repairs_desc',
      __argsBuffer,
      this.setCallReducerFlags.importBuildingRepairsDescFlags
    )
  }

  onImportBuildingRepairsDesc(callback: (ctx: ReducerEventContext, records: BuildingRepairsDesc[]) => void) {
    this.connection.onReducer('import_building_repairs_desc', callback)
  }

  removeOnImportBuildingRepairsDesc(callback: (ctx: ReducerEventContext, records: BuildingRepairsDesc[]) => void) {
    this.connection.offReducer('import_building_repairs_desc', callback)
  }

  importBuildingSpawnDesc(records: BuildingSpawnDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportBuildingSpawnDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_building_spawn_desc',
      __argsBuffer,
      this.setCallReducerFlags.importBuildingSpawnDescFlags
    )
  }

  onImportBuildingSpawnDesc(callback: (ctx: ReducerEventContext, records: BuildingSpawnDesc[]) => void) {
    this.connection.onReducer('import_building_spawn_desc', callback)
  }

  removeOnImportBuildingSpawnDesc(callback: (ctx: ReducerEventContext, records: BuildingSpawnDesc[]) => void) {
    this.connection.offReducer('import_building_spawn_desc', callback)
  }

  importBuildingState(records: BuildingState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportBuildingState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_building_state',
      __argsBuffer,
      this.setCallReducerFlags.importBuildingStateFlags
    )
  }

  onImportBuildingState(callback: (ctx: ReducerEventContext, records: BuildingState[]) => void) {
    this.connection.onReducer('import_building_state', callback)
  }

  removeOnImportBuildingState(callback: (ctx: ReducerEventContext, records: BuildingState[]) => void) {
    this.connection.offReducer('import_building_state', callback)
  }

  importBuildingTypeDesc(records: BuildingTypeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportBuildingTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_building_type_desc',
      __argsBuffer,
      this.setCallReducerFlags.importBuildingTypeDescFlags
    )
  }

  onImportBuildingTypeDesc(callback: (ctx: ReducerEventContext, records: BuildingTypeDesc[]) => void) {
    this.connection.onReducer('import_building_type_desc', callback)
  }

  removeOnImportBuildingTypeDesc(callback: (ctx: ReducerEventContext, records: BuildingTypeDesc[]) => void) {
    this.connection.offReducer('import_building_type_desc', callback)
  }

  importCargoDesc(records: CargoDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportCargoDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_cargo_desc', __argsBuffer, this.setCallReducerFlags.importCargoDescFlags)
  }

  onImportCargoDesc(callback: (ctx: ReducerEventContext, records: CargoDesc[]) => void) {
    this.connection.onReducer('import_cargo_desc', callback)
  }

  removeOnImportCargoDesc(callback: (ctx: ReducerEventContext, records: CargoDesc[]) => void) {
    this.connection.offReducer('import_cargo_desc', callback)
  }

  importCharacterStatDesc(records: CharacterStatDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportCharacterStatDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_character_stat_desc',
      __argsBuffer,
      this.setCallReducerFlags.importCharacterStatDescFlags
    )
  }

  onImportCharacterStatDesc(callback: (ctx: ReducerEventContext, records: CharacterStatDesc[]) => void) {
    this.connection.onReducer('import_character_stat_desc', callback)
  }

  removeOnImportCharacterStatDesc(callback: (ctx: ReducerEventContext, records: CharacterStatDesc[]) => void) {
    this.connection.offReducer('import_character_stat_desc', callback)
  }

  importCharacterStatsState(records: CharacterStatsState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportCharacterStatsState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_character_stats_state',
      __argsBuffer,
      this.setCallReducerFlags.importCharacterStatsStateFlags
    )
  }

  onImportCharacterStatsState(callback: (ctx: ReducerEventContext, records: CharacterStatsState[]) => void) {
    this.connection.onReducer('import_character_stats_state', callback)
  }

  removeOnImportCharacterStatsState(callback: (ctx: ReducerEventContext, records: CharacterStatsState[]) => void) {
    this.connection.offReducer('import_character_stats_state', callback)
  }

  importChatMessageState(records: ChatMessageState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportChatMessageState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_chat_message_state',
      __argsBuffer,
      this.setCallReducerFlags.importChatMessageStateFlags
    )
  }

  onImportChatMessageState(callback: (ctx: ReducerEventContext, records: ChatMessageState[]) => void) {
    this.connection.onReducer('import_chat_message_state', callback)
  }

  removeOnImportChatMessageState(callback: (ctx: ReducerEventContext, records: ChatMessageState[]) => void) {
    this.connection.offReducer('import_chat_message_state', callback)
  }

  importChestRarityDesc(records: ChestRarityDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportChestRarityDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_chest_rarity_desc',
      __argsBuffer,
      this.setCallReducerFlags.importChestRarityDescFlags
    )
  }

  onImportChestRarityDesc(callback: (ctx: ReducerEventContext, records: ChestRarityDesc[]) => void) {
    this.connection.onReducer('import_chest_rarity_desc', callback)
  }

  removeOnImportChestRarityDesc(callback: (ctx: ReducerEventContext, records: ChestRarityDesc[]) => void) {
    this.connection.offReducer('import_chest_rarity_desc', callback)
  }

  importClaimLocalState(records: ClaimLocalState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportClaimLocalState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_claim_local_state',
      __argsBuffer,
      this.setCallReducerFlags.importClaimLocalStateFlags
    )
  }

  onImportClaimLocalState(callback: (ctx: ReducerEventContext, records: ClaimLocalState[]) => void) {
    this.connection.onReducer('import_claim_local_state', callback)
  }

  removeOnImportClaimLocalState(callback: (ctx: ReducerEventContext, records: ClaimLocalState[]) => void) {
    this.connection.offReducer('import_claim_local_state', callback)
  }

  importClaimRecruitmentState(records: ClaimRecruitmentState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportClaimRecruitmentState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_claim_recruitment_state',
      __argsBuffer,
      this.setCallReducerFlags.importClaimRecruitmentStateFlags
    )
  }

  onImportClaimRecruitmentState(callback: (ctx: ReducerEventContext, records: ClaimRecruitmentState[]) => void) {
    this.connection.onReducer('import_claim_recruitment_state', callback)
  }

  removeOnImportClaimRecruitmentState(callback: (ctx: ReducerEventContext, records: ClaimRecruitmentState[]) => void) {
    this.connection.offReducer('import_claim_recruitment_state', callback)
  }

  importClaimState(records: ClaimState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportClaimState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_claim_state', __argsBuffer, this.setCallReducerFlags.importClaimStateFlags)
  }

  onImportClaimState(callback: (ctx: ReducerEventContext, records: ClaimState[]) => void) {
    this.connection.onReducer('import_claim_state', callback)
  }

  removeOnImportClaimState(callback: (ctx: ReducerEventContext, records: ClaimState[]) => void) {
    this.connection.offReducer('import_claim_state', callback)
  }

  importClaimTechDesc(records: ClaimTechDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportClaimTechDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_claim_tech_desc',
      __argsBuffer,
      this.setCallReducerFlags.importClaimTechDescFlags
    )
  }

  onImportClaimTechDesc(callback: (ctx: ReducerEventContext, records: ClaimTechDesc[]) => void) {
    this.connection.onReducer('import_claim_tech_desc', callback)
  }

  removeOnImportClaimTechDesc(callback: (ctx: ReducerEventContext, records: ClaimTechDesc[]) => void) {
    this.connection.offReducer('import_claim_tech_desc', callback)
  }

  importClaimTechState(records: ClaimTechState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportClaimTechState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_claim_tech_state',
      __argsBuffer,
      this.setCallReducerFlags.importClaimTechStateFlags
    )
  }

  onImportClaimTechState(callback: (ctx: ReducerEventContext, records: ClaimTechState[]) => void) {
    this.connection.onReducer('import_claim_tech_state', callback)
  }

  removeOnImportClaimTechState(callback: (ctx: ReducerEventContext, records: ClaimTechState[]) => void) {
    this.connection.offReducer('import_claim_tech_state', callback)
  }

  importClaimTileCost(records: ClaimTileCost[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportClaimTileCost.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_claim_tile_cost',
      __argsBuffer,
      this.setCallReducerFlags.importClaimTileCostFlags
    )
  }

  onImportClaimTileCost(callback: (ctx: ReducerEventContext, records: ClaimTileCost[]) => void) {
    this.connection.onReducer('import_claim_tile_cost', callback)
  }

  removeOnImportClaimTileCost(callback: (ctx: ReducerEventContext, records: ClaimTileCost[]) => void) {
    this.connection.offReducer('import_claim_tile_cost', callback)
  }

  importClaimTileState(records: ClaimTileState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportClaimTileState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_claim_tile_state',
      __argsBuffer,
      this.setCallReducerFlags.importClaimTileStateFlags
    )
  }

  onImportClaimTileState(callback: (ctx: ReducerEventContext, records: ClaimTileState[]) => void) {
    this.connection.onReducer('import_claim_tile_state', callback)
  }

  removeOnImportClaimTileState(callback: (ctx: ReducerEventContext, records: ClaimTileState[]) => void) {
    this.connection.offReducer('import_claim_tile_state', callback)
  }

  importClimbRequirementDesc(records: ClimbRequirementDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportClimbRequirementDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_climb_requirement_desc',
      __argsBuffer,
      this.setCallReducerFlags.importClimbRequirementDescFlags
    )
  }

  onImportClimbRequirementDesc(callback: (ctx: ReducerEventContext, records: ClimbRequirementDesc[]) => void) {
    this.connection.onReducer('import_climb_requirement_desc', callback)
  }

  removeOnImportClimbRequirementDesc(callback: (ctx: ReducerEventContext, records: ClimbRequirementDesc[]) => void) {
    this.connection.offReducer('import_climb_requirement_desc', callback)
  }

  importClothingDesc(records: ClothingDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportClothingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_clothing_desc', __argsBuffer, this.setCallReducerFlags.importClothingDescFlags)
  }

  onImportClothingDesc(callback: (ctx: ReducerEventContext, records: ClothingDesc[]) => void) {
    this.connection.onReducer('import_clothing_desc', callback)
  }

  removeOnImportClothingDesc(callback: (ctx: ReducerEventContext, records: ClothingDesc[]) => void) {
    this.connection.offReducer('import_clothing_desc', callback)
  }

  importCollectibleDesc(records: CollectibleDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportCollectibleDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_collectible_desc',
      __argsBuffer,
      this.setCallReducerFlags.importCollectibleDescFlags
    )
  }

  onImportCollectibleDesc(callback: (ctx: ReducerEventContext, records: CollectibleDesc[]) => void) {
    this.connection.onReducer('import_collectible_desc', callback)
  }

  removeOnImportCollectibleDesc(callback: (ctx: ReducerEventContext, records: CollectibleDesc[]) => void) {
    this.connection.offReducer('import_collectible_desc', callback)
  }

  importCombatActionDesc(records: CombatActionDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportCombatActionDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_combat_action_desc',
      __argsBuffer,
      this.setCallReducerFlags.importCombatActionDescFlags
    )
  }

  onImportCombatActionDesc(callback: (ctx: ReducerEventContext, records: CombatActionDesc[]) => void) {
    this.connection.onReducer('import_combat_action_desc', callback)
  }

  removeOnImportCombatActionDesc(callback: (ctx: ReducerEventContext, records: CombatActionDesc[]) => void) {
    this.connection.offReducer('import_combat_action_desc', callback)
  }

  importCombatState(records: CombatState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportCombatState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_combat_state', __argsBuffer, this.setCallReducerFlags.importCombatStateFlags)
  }

  onImportCombatState(callback: (ctx: ReducerEventContext, records: CombatState[]) => void) {
    this.connection.onReducer('import_combat_state', callback)
  }

  removeOnImportCombatState(callback: (ctx: ReducerEventContext, records: CombatState[]) => void) {
    this.connection.offReducer('import_combat_state', callback)
  }

  importConfig(records: Config[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportConfig.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_config', __argsBuffer, this.setCallReducerFlags.importConfigFlags)
  }

  onImportConfig(callback: (ctx: ReducerEventContext, records: Config[]) => void) {
    this.connection.onReducer('import_config', callback)
  }

  removeOnImportConfig(callback: (ctx: ReducerEventContext, records: Config[]) => void) {
    this.connection.offReducer('import_config', callback)
  }

  importConstructionRecipeDesc(records: ConstructionRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportConstructionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_construction_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.importConstructionRecipeDescFlags
    )
  }

  onImportConstructionRecipeDesc(callback: (ctx: ReducerEventContext, records: ConstructionRecipeDesc[]) => void) {
    this.connection.onReducer('import_construction_recipe_desc', callback)
  }

  removeOnImportConstructionRecipeDesc(
    callback: (ctx: ReducerEventContext, records: ConstructionRecipeDesc[]) => void
  ) {
    this.connection.offReducer('import_construction_recipe_desc', callback)
  }

  importCraftingRecipeDesc(records: CraftingRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportCraftingRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_crafting_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.importCraftingRecipeDescFlags
    )
  }

  onImportCraftingRecipeDesc(callback: (ctx: ReducerEventContext, records: CraftingRecipeDesc[]) => void) {
    this.connection.onReducer('import_crafting_recipe_desc', callback)
  }

  removeOnImportCraftingRecipeDesc(callback: (ctx: ReducerEventContext, records: CraftingRecipeDesc[]) => void) {
    this.connection.offReducer('import_crafting_recipe_desc', callback)
  }

  importDeconstructionRecipeDesc(records: DeconstructionRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportDeconstructionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_deconstruction_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.importDeconstructionRecipeDescFlags
    )
  }

  onImportDeconstructionRecipeDesc(callback: (ctx: ReducerEventContext, records: DeconstructionRecipeDesc[]) => void) {
    this.connection.onReducer('import_deconstruction_recipe_desc', callback)
  }

  removeOnImportDeconstructionRecipeDesc(
    callback: (ctx: ReducerEventContext, records: DeconstructionRecipeDesc[]) => void
  ) {
    this.connection.offReducer('import_deconstruction_recipe_desc', callback)
  }

  importDeployableDesc(records: DeployableDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportDeployableDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_deployable_desc',
      __argsBuffer,
      this.setCallReducerFlags.importDeployableDescFlags
    )
  }

  onImportDeployableDesc(callback: (ctx: ReducerEventContext, records: DeployableDesc[]) => void) {
    this.connection.onReducer('import_deployable_desc', callback)
  }

  removeOnImportDeployableDesc(callback: (ctx: ReducerEventContext, records: DeployableDesc[]) => void) {
    this.connection.offReducer('import_deployable_desc', callback)
  }

  importDeployableState(records: DeployableState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportDeployableState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_deployable_state',
      __argsBuffer,
      this.setCallReducerFlags.importDeployableStateFlags
    )
  }

  onImportDeployableState(callback: (ctx: ReducerEventContext, records: DeployableState[]) => void) {
    this.connection.onReducer('import_deployable_state', callback)
  }

  removeOnImportDeployableState(callback: (ctx: ReducerEventContext, records: DeployableState[]) => void) {
    this.connection.offReducer('import_deployable_state', callback)
  }

  importDimensionDescriptionState(records: DimensionDescriptionState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportDimensionDescriptionState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_dimension_description_state',
      __argsBuffer,
      this.setCallReducerFlags.importDimensionDescriptionStateFlags
    )
  }

  onImportDimensionDescriptionState(
    callback: (ctx: ReducerEventContext, records: DimensionDescriptionState[]) => void
  ) {
    this.connection.onReducer('import_dimension_description_state', callback)
  }

  removeOnImportDimensionDescriptionState(
    callback: (ctx: ReducerEventContext, records: DimensionDescriptionState[]) => void
  ) {
    this.connection.offReducer('import_dimension_description_state', callback)
  }

  importDimensionNetworkDescriptionState(records: DimensionNetworkState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportDimensionNetworkDescriptionState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_dimension_network_description_state',
      __argsBuffer,
      this.setCallReducerFlags.importDimensionNetworkDescriptionStateFlags
    )
  }

  onImportDimensionNetworkDescriptionState(
    callback: (ctx: ReducerEventContext, records: DimensionNetworkState[]) => void
  ) {
    this.connection.onReducer('import_dimension_network_description_state', callback)
  }

  removeOnImportDimensionNetworkDescriptionState(
    callback: (ctx: ReducerEventContext, records: DimensionNetworkState[]) => void
  ) {
    this.connection.offReducer('import_dimension_network_description_state', callback)
  }

  importDistantVisibleEntityDesc(records: DistantVisibleEntityDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportDistantVisibleEntityDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_distant_visible_entity_desc',
      __argsBuffer,
      this.setCallReducerFlags.importDistantVisibleEntityDescFlags
    )
  }

  onImportDistantVisibleEntityDesc(callback: (ctx: ReducerEventContext, records: DistantVisibleEntityDesc[]) => void) {
    this.connection.onReducer('import_distant_visible_entity_desc', callback)
  }

  removeOnImportDistantVisibleEntityDesc(
    callback: (ctx: ReducerEventContext, records: DistantVisibleEntityDesc[]) => void
  ) {
    this.connection.offReducer('import_distant_visible_entity_desc', callback)
  }

  importDroppedInventoryState(records: DroppedInventoryState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportDroppedInventoryState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_dropped_inventory_state',
      __argsBuffer,
      this.setCallReducerFlags.importDroppedInventoryStateFlags
    )
  }

  onImportDroppedInventoryState(callback: (ctx: ReducerEventContext, records: DroppedInventoryState[]) => void) {
    this.connection.onReducer('import_dropped_inventory_state', callback)
  }

  removeOnImportDroppedInventoryState(callback: (ctx: ReducerEventContext, records: DroppedInventoryState[]) => void) {
    this.connection.offReducer('import_dropped_inventory_state', callback)
  }

  importElevatorDesc(records: ElevatorDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportElevatorDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_elevator_desc', __argsBuffer, this.setCallReducerFlags.importElevatorDescFlags)
  }

  onImportElevatorDesc(callback: (ctx: ReducerEventContext, records: ElevatorDesc[]) => void) {
    this.connection.onReducer('import_elevator_desc', callback)
  }

  removeOnImportElevatorDesc(callback: (ctx: ReducerEventContext, records: ElevatorDesc[]) => void) {
    this.connection.offReducer('import_elevator_desc', callback)
  }

  importEmoteDesc(records: EmoteDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportEmoteDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_emote_desc', __argsBuffer, this.setCallReducerFlags.importEmoteDescFlags)
  }

  onImportEmoteDesc(callback: (ctx: ReducerEventContext, records: EmoteDesc[]) => void) {
    this.connection.onReducer('import_emote_desc', callback)
  }

  removeOnImportEmoteDesc(callback: (ctx: ReducerEventContext, records: EmoteDesc[]) => void) {
    this.connection.offReducer('import_emote_desc', callback)
  }

  importEmpireColorsDesc(records: EmpireColorDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportEmpireColorsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_empire_colors_desc',
      __argsBuffer,
      this.setCallReducerFlags.importEmpireColorsDescFlags
    )
  }

  onImportEmpireColorsDesc(callback: (ctx: ReducerEventContext, records: EmpireColorDesc[]) => void) {
    this.connection.onReducer('import_empire_colors_desc', callback)
  }

  removeOnImportEmpireColorsDesc(callback: (ctx: ReducerEventContext, records: EmpireColorDesc[]) => void) {
    this.connection.offReducer('import_empire_colors_desc', callback)
  }

  importEmpireNotificationDesc(records: EmpireNotificationDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportEmpireNotificationDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_empire_notification_desc',
      __argsBuffer,
      this.setCallReducerFlags.importEmpireNotificationDescFlags
    )
  }

  onImportEmpireNotificationDesc(callback: (ctx: ReducerEventContext, records: EmpireNotificationDesc[]) => void) {
    this.connection.onReducer('import_empire_notification_desc', callback)
  }

  removeOnImportEmpireNotificationDesc(
    callback: (ctx: ReducerEventContext, records: EmpireNotificationDesc[]) => void
  ) {
    this.connection.offReducer('import_empire_notification_desc', callback)
  }

  importEmpireRankDesc(records: EmpireRankDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportEmpireRankDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_empire_rank_desc',
      __argsBuffer,
      this.setCallReducerFlags.importEmpireRankDescFlags
    )
  }

  onImportEmpireRankDesc(callback: (ctx: ReducerEventContext, records: EmpireRankDesc[]) => void) {
    this.connection.onReducer('import_empire_rank_desc', callback)
  }

  removeOnImportEmpireRankDesc(callback: (ctx: ReducerEventContext, records: EmpireRankDesc[]) => void) {
    this.connection.offReducer('import_empire_rank_desc', callback)
  }

  importEmpireSuppliesDesc(records: EmpireSuppliesDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportEmpireSuppliesDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_empire_supplies_desc',
      __argsBuffer,
      this.setCallReducerFlags.importEmpireSuppliesDescFlags
    )
  }

  onImportEmpireSuppliesDesc(callback: (ctx: ReducerEventContext, records: EmpireSuppliesDesc[]) => void) {
    this.connection.onReducer('import_empire_supplies_desc', callback)
  }

  removeOnImportEmpireSuppliesDesc(callback: (ctx: ReducerEventContext, records: EmpireSuppliesDesc[]) => void) {
    this.connection.offReducer('import_empire_supplies_desc', callback)
  }

  importEmpireTerritoryDesc(records: EmpireTerritoryDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportEmpireTerritoryDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_empire_territory_desc',
      __argsBuffer,
      this.setCallReducerFlags.importEmpireTerritoryDescFlags
    )
  }

  onImportEmpireTerritoryDesc(callback: (ctx: ReducerEventContext, records: EmpireTerritoryDesc[]) => void) {
    this.connection.onReducer('import_empire_territory_desc', callback)
  }

  removeOnImportEmpireTerritoryDesc(callback: (ctx: ReducerEventContext, records: EmpireTerritoryDesc[]) => void) {
    this.connection.offReducer('import_empire_territory_desc', callback)
  }

  importEnemyAiParamsDesc(records: EnemyAiParamsDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportEnemyAiParamsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_enemy_ai_params_desc',
      __argsBuffer,
      this.setCallReducerFlags.importEnemyAiParamsDescFlags
    )
  }

  onImportEnemyAiParamsDesc(callback: (ctx: ReducerEventContext, records: EnemyAiParamsDesc[]) => void) {
    this.connection.onReducer('import_enemy_ai_params_desc', callback)
  }

  removeOnImportEnemyAiParamsDesc(callback: (ctx: ReducerEventContext, records: EnemyAiParamsDesc[]) => void) {
    this.connection.offReducer('import_enemy_ai_params_desc', callback)
  }

  importEnemyDesc(records: EnemyDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportEnemyDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_enemy_desc', __argsBuffer, this.setCallReducerFlags.importEnemyDescFlags)
  }

  onImportEnemyDesc(callback: (ctx: ReducerEventContext, records: EnemyDesc[]) => void) {
    this.connection.onReducer('import_enemy_desc', callback)
  }

  removeOnImportEnemyDesc(callback: (ctx: ReducerEventContext, records: EnemyDesc[]) => void) {
    this.connection.offReducer('import_enemy_desc', callback)
  }

  importEnemyState(records: EnemyState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportEnemyState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_enemy_state', __argsBuffer, this.setCallReducerFlags.importEnemyStateFlags)
  }

  onImportEnemyState(callback: (ctx: ReducerEventContext, records: EnemyState[]) => void) {
    this.connection.onReducer('import_enemy_state', callback)
  }

  removeOnImportEnemyState(callback: (ctx: ReducerEventContext, records: EnemyState[]) => void) {
    this.connection.offReducer('import_enemy_state', callback)
  }

  importEnvironmentDebuffDesc(records: EnvironmentDebuffDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportEnvironmentDebuffDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_environment_debuff_desc',
      __argsBuffer,
      this.setCallReducerFlags.importEnvironmentDebuffDescFlags
    )
  }

  onImportEnvironmentDebuffDesc(callback: (ctx: ReducerEventContext, records: EnvironmentDebuffDesc[]) => void) {
    this.connection.onReducer('import_environment_debuff_desc', callback)
  }

  removeOnImportEnvironmentDebuffDesc(callback: (ctx: ReducerEventContext, records: EnvironmentDebuffDesc[]) => void) {
    this.connection.offReducer('import_environment_debuff_desc', callback)
  }

  importEquipmentDesc(records: EquipmentDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportEquipmentDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_equipment_desc',
      __argsBuffer,
      this.setCallReducerFlags.importEquipmentDescFlags
    )
  }

  onImportEquipmentDesc(callback: (ctx: ReducerEventContext, records: EquipmentDesc[]) => void) {
    this.connection.onReducer('import_equipment_desc', callback)
  }

  removeOnImportEquipmentDesc(callback: (ctx: ReducerEventContext, records: EquipmentDesc[]) => void) {
    this.connection.offReducer('import_equipment_desc', callback)
  }

  importEquipmentState(records: EquipmentState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportEquipmentState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_equipment_state',
      __argsBuffer,
      this.setCallReducerFlags.importEquipmentStateFlags
    )
  }

  onImportEquipmentState(callback: (ctx: ReducerEventContext, records: EquipmentState[]) => void) {
    this.connection.onReducer('import_equipment_state', callback)
  }

  removeOnImportEquipmentState(callback: (ctx: ReducerEventContext, records: EquipmentState[]) => void) {
    this.connection.offReducer('import_equipment_state', callback)
  }

  importExperienceState(records: ExperienceState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportExperienceState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_experience_state',
      __argsBuffer,
      this.setCallReducerFlags.importExperienceStateFlags
    )
  }

  onImportExperienceState(callback: (ctx: ReducerEventContext, records: ExperienceState[]) => void) {
    this.connection.onReducer('import_experience_state', callback)
  }

  removeOnImportExperienceState(callback: (ctx: ReducerEventContext, records: ExperienceState[]) => void) {
    this.connection.offReducer('import_experience_state', callback)
  }

  importExplorationChunksState(records: ExplorationChunksState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportExplorationChunksState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_exploration_chunks_state',
      __argsBuffer,
      this.setCallReducerFlags.importExplorationChunksStateFlags
    )
  }

  onImportExplorationChunksState(callback: (ctx: ReducerEventContext, records: ExplorationChunksState[]) => void) {
    this.connection.onReducer('import_exploration_chunks_state', callback)
  }

  removeOnImportExplorationChunksState(
    callback: (ctx: ReducerEventContext, records: ExplorationChunksState[]) => void
  ) {
    this.connection.offReducer('import_exploration_chunks_state', callback)
  }

  importExtractionRecipeDesc(records: ExtractionRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportExtractionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_extraction_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.importExtractionRecipeDescFlags
    )
  }

  onImportExtractionRecipeDesc(callback: (ctx: ReducerEventContext, records: ExtractionRecipeDesc[]) => void) {
    this.connection.onReducer('import_extraction_recipe_desc', callback)
  }

  removeOnImportExtractionRecipeDesc(callback: (ctx: ReducerEventContext, records: ExtractionRecipeDesc[]) => void) {
    this.connection.offReducer('import_extraction_recipe_desc', callback)
  }

  importFoodDesc(records: FoodDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportFoodDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_food_desc', __argsBuffer, this.setCallReducerFlags.importFoodDescFlags)
  }

  onImportFoodDesc(callback: (ctx: ReducerEventContext, records: FoodDesc[]) => void) {
    this.connection.onReducer('import_food_desc', callback)
  }

  removeOnImportFoodDesc(callback: (ctx: ReducerEventContext, records: FoodDesc[]) => void) {
    this.connection.offReducer('import_food_desc', callback)
  }

  importFootprintTileState(records: FootprintTileState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportFootprintTileState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_footprint_tile_state',
      __argsBuffer,
      this.setCallReducerFlags.importFootprintTileStateFlags
    )
  }

  onImportFootprintTileState(callback: (ctx: ReducerEventContext, records: FootprintTileState[]) => void) {
    this.connection.onReducer('import_footprint_tile_state', callback)
  }

  removeOnImportFootprintTileState(callback: (ctx: ReducerEventContext, records: FootprintTileState[]) => void) {
    this.connection.offReducer('import_footprint_tile_state', callback)
  }

  importGateDesc(records: GateDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportGateDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_gate_desc', __argsBuffer, this.setCallReducerFlags.importGateDescFlags)
  }

  onImportGateDesc(callback: (ctx: ReducerEventContext, records: GateDesc[]) => void) {
    this.connection.onReducer('import_gate_desc', callback)
  }

  removeOnImportGateDesc(callback: (ctx: ReducerEventContext, records: GateDesc[]) => void) {
    this.connection.offReducer('import_gate_desc', callback)
  }

  importGlobals(records: Globals[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportGlobals.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_globals', __argsBuffer, this.setCallReducerFlags.importGlobalsFlags)
  }

  onImportGlobals(callback: (ctx: ReducerEventContext, records: Globals[]) => void) {
    this.connection.onReducer('import_globals', callback)
  }

  removeOnImportGlobals(callback: (ctx: ReducerEventContext, records: Globals[]) => void) {
    this.connection.offReducer('import_globals', callback)
  }

  importGrowthState(records: GrowthState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportGrowthState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_growth_state', __argsBuffer, this.setCallReducerFlags.importGrowthStateFlags)
  }

  onImportGrowthState(callback: (ctx: ReducerEventContext, records: GrowthState[]) => void) {
    this.connection.onReducer('import_growth_state', callback)
  }

  removeOnImportGrowthState(callback: (ctx: ReducerEventContext, records: GrowthState[]) => void) {
    this.connection.offReducer('import_growth_state', callback)
  }

  importHealthState(records: HealthState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportHealthState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_health_state', __argsBuffer, this.setCallReducerFlags.importHealthStateFlags)
  }

  onImportHealthState(callback: (ctx: ReducerEventContext, records: HealthState[]) => void) {
    this.connection.onReducer('import_health_state', callback)
  }

  removeOnImportHealthState(callback: (ctx: ReducerEventContext, records: HealthState[]) => void) {
    this.connection.offReducer('import_health_state', callback)
  }

  importHerdCache(records: HerdState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportHerdCache.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_herd_cache', __argsBuffer, this.setCallReducerFlags.importHerdCacheFlags)
  }

  onImportHerdCache(callback: (ctx: ReducerEventContext, records: HerdState[]) => void) {
    this.connection.onReducer('import_herd_cache', callback)
  }

  removeOnImportHerdCache(callback: (ctx: ReducerEventContext, records: HerdState[]) => void) {
    this.connection.offReducer('import_herd_cache', callback)
  }

  importHexiteExchangeEntryDesc(records: HexiteExchangeEntryDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportHexiteExchangeEntryDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_hexite_exchange_entry_desc',
      __argsBuffer,
      this.setCallReducerFlags.importHexiteExchangeEntryDescFlags
    )
  }

  onImportHexiteExchangeEntryDesc(callback: (ctx: ReducerEventContext, records: HexiteExchangeEntryDesc[]) => void) {
    this.connection.onReducer('import_hexite_exchange_entry_desc', callback)
  }

  removeOnImportHexiteExchangeEntryDesc(
    callback: (ctx: ReducerEventContext, records: HexiteExchangeEntryDesc[]) => void
  ) {
    this.connection.offReducer('import_hexite_exchange_entry_desc', callback)
  }

  importIdentityRole(records: IdentityRole[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportIdentityRole.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_identity_role', __argsBuffer, this.setCallReducerFlags.importIdentityRoleFlags)
  }

  onImportIdentityRole(callback: (ctx: ReducerEventContext, records: IdentityRole[]) => void) {
    this.connection.onReducer('import_identity_role', callback)
  }

  removeOnImportIdentityRole(callback: (ctx: ReducerEventContext, records: IdentityRole[]) => void) {
    this.connection.offReducer('import_identity_role', callback)
  }

  importInteriorCollapseTriggerState(records: InteriorCollapseTriggerState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportInteriorCollapseTriggerState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_interior_collapse_trigger_state',
      __argsBuffer,
      this.setCallReducerFlags.importInteriorCollapseTriggerStateFlags
    )
  }

  onImportInteriorCollapseTriggerState(
    callback: (ctx: ReducerEventContext, records: InteriorCollapseTriggerState[]) => void
  ) {
    this.connection.onReducer('import_interior_collapse_trigger_state', callback)
  }

  removeOnImportInteriorCollapseTriggerState(
    callback: (ctx: ReducerEventContext, records: InteriorCollapseTriggerState[]) => void
  ) {
    this.connection.offReducer('import_interior_collapse_trigger_state', callback)
  }

  importInteriorInstanceDesc(records: InteriorInstanceDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportInteriorInstanceDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_interior_instance_desc',
      __argsBuffer,
      this.setCallReducerFlags.importInteriorInstanceDescFlags
    )
  }

  onImportInteriorInstanceDesc(callback: (ctx: ReducerEventContext, records: InteriorInstanceDesc[]) => void) {
    this.connection.onReducer('import_interior_instance_desc', callback)
  }

  removeOnImportInteriorInstanceDesc(callback: (ctx: ReducerEventContext, records: InteriorInstanceDesc[]) => void) {
    this.connection.offReducer('import_interior_instance_desc', callback)
  }

  importInteriorNetworkDesc(records: InteriorNetworkDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportInteriorNetworkDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_interior_network_desc',
      __argsBuffer,
      this.setCallReducerFlags.importInteriorNetworkDescFlags
    )
  }

  onImportInteriorNetworkDesc(callback: (ctx: ReducerEventContext, records: InteriorNetworkDesc[]) => void) {
    this.connection.onReducer('import_interior_network_desc', callback)
  }

  removeOnImportInteriorNetworkDesc(callback: (ctx: ReducerEventContext, records: InteriorNetworkDesc[]) => void) {
    this.connection.offReducer('import_interior_network_desc', callback)
  }

  importInteriorPortalConnectionsDesc(records: InteriorPortalConnectionsDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportInteriorPortalConnectionsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_interior_portal_connections_desc',
      __argsBuffer,
      this.setCallReducerFlags.importInteriorPortalConnectionsDescFlags
    )
  }

  onImportInteriorPortalConnectionsDesc(
    callback: (ctx: ReducerEventContext, records: InteriorPortalConnectionsDesc[]) => void
  ) {
    this.connection.onReducer('import_interior_portal_connections_desc', callback)
  }

  removeOnImportInteriorPortalConnectionsDesc(
    callback: (ctx: ReducerEventContext, records: InteriorPortalConnectionsDesc[]) => void
  ) {
    this.connection.offReducer('import_interior_portal_connections_desc', callback)
  }

  importInteriorShapeDesc(records: InteriorShapeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportInteriorShapeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_interior_shape_desc',
      __argsBuffer,
      this.setCallReducerFlags.importInteriorShapeDescFlags
    )
  }

  onImportInteriorShapeDesc(callback: (ctx: ReducerEventContext, records: InteriorShapeDesc[]) => void) {
    this.connection.onReducer('import_interior_shape_desc', callback)
  }

  removeOnImportInteriorShapeDesc(callback: (ctx: ReducerEventContext, records: InteriorShapeDesc[]) => void) {
    this.connection.offReducer('import_interior_shape_desc', callback)
  }

  importInteriorSpawnDesc(records: InteriorSpawnDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportInteriorSpawnDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_interior_spawn_desc',
      __argsBuffer,
      this.setCallReducerFlags.importInteriorSpawnDescFlags
    )
  }

  onImportInteriorSpawnDesc(callback: (ctx: ReducerEventContext, records: InteriorSpawnDesc[]) => void) {
    this.connection.onReducer('import_interior_spawn_desc', callback)
  }

  removeOnImportInteriorSpawnDesc(callback: (ctx: ReducerEventContext, records: InteriorSpawnDesc[]) => void) {
    this.connection.offReducer('import_interior_spawn_desc', callback)
  }

  importInventoryState(records: InventoryState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportInventoryState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_inventory_state',
      __argsBuffer,
      this.setCallReducerFlags.importInventoryStateFlags
    )
  }

  onImportInventoryState(callback: (ctx: ReducerEventContext, records: InventoryState[]) => void) {
    this.connection.onReducer('import_inventory_state', callback)
  }

  removeOnImportInventoryState(callback: (ctx: ReducerEventContext, records: InventoryState[]) => void) {
    this.connection.offReducer('import_inventory_state', callback)
  }

  importItemConversionRecipeDesc(records: ItemConversionRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportItemConversionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_item_conversion_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.importItemConversionRecipeDescFlags
    )
  }

  onImportItemConversionRecipeDesc(callback: (ctx: ReducerEventContext, records: ItemConversionRecipeDesc[]) => void) {
    this.connection.onReducer('import_item_conversion_recipe_desc', callback)
  }

  removeOnImportItemConversionRecipeDesc(
    callback: (ctx: ReducerEventContext, records: ItemConversionRecipeDesc[]) => void
  ) {
    this.connection.offReducer('import_item_conversion_recipe_desc', callback)
  }

  importItemDesc(records: ItemDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportItemDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_item_desc', __argsBuffer, this.setCallReducerFlags.importItemDescFlags)
  }

  onImportItemDesc(callback: (ctx: ReducerEventContext, records: ItemDesc[]) => void) {
    this.connection.onReducer('import_item_desc', callback)
  }

  removeOnImportItemDesc(callback: (ctx: ReducerEventContext, records: ItemDesc[]) => void) {
    this.connection.offReducer('import_item_desc', callback)
  }

  importItemListDesc(records: ItemListDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportItemListDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_item_list_desc', __argsBuffer, this.setCallReducerFlags.importItemListDescFlags)
  }

  onImportItemListDesc(callback: (ctx: ReducerEventContext, records: ItemListDesc[]) => void) {
    this.connection.onReducer('import_item_list_desc', callback)
  }

  removeOnImportItemListDesc(callback: (ctx: ReducerEventContext, records: ItemListDesc[]) => void) {
    this.connection.offReducer('import_item_list_desc', callback)
  }

  importKnowledgeAchievementState(records: KnowledgeAchievementState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeAchievementState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_achievement_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeAchievementStateFlags
    )
  }

  onImportKnowledgeAchievementState(
    callback: (ctx: ReducerEventContext, records: KnowledgeAchievementState[]) => void
  ) {
    this.connection.onReducer('import_knowledge_achievement_state', callback)
  }

  removeOnImportKnowledgeAchievementState(
    callback: (ctx: ReducerEventContext, records: KnowledgeAchievementState[]) => void
  ) {
    this.connection.offReducer('import_knowledge_achievement_state', callback)
  }

  importKnowledgeBattleActionState(records: KnowledgeBattleActionState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeBattleActionState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_battle_action_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeBattleActionStateFlags
    )
  }

  onImportKnowledgeBattleActionState(
    callback: (ctx: ReducerEventContext, records: KnowledgeBattleActionState[]) => void
  ) {
    this.connection.onReducer('import_knowledge_battle_action_state', callback)
  }

  removeOnImportKnowledgeBattleActionState(
    callback: (ctx: ReducerEventContext, records: KnowledgeBattleActionState[]) => void
  ) {
    this.connection.offReducer('import_knowledge_battle_action_state', callback)
  }

  importKnowledgeBuildingState(records: KnowledgeBuildingState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeBuildingState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_building_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeBuildingStateFlags
    )
  }

  onImportKnowledgeBuildingState(callback: (ctx: ReducerEventContext, records: KnowledgeBuildingState[]) => void) {
    this.connection.onReducer('import_knowledge_building_state', callback)
  }

  removeOnImportKnowledgeBuildingState(
    callback: (ctx: ReducerEventContext, records: KnowledgeBuildingState[]) => void
  ) {
    this.connection.offReducer('import_knowledge_building_state', callback)
  }

  importKnowledgeCargoState(records: KnowledgeCargoState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeCargoState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_cargo_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeCargoStateFlags
    )
  }

  onImportKnowledgeCargoState(callback: (ctx: ReducerEventContext, records: KnowledgeCargoState[]) => void) {
    this.connection.onReducer('import_knowledge_cargo_state', callback)
  }

  removeOnImportKnowledgeCargoState(callback: (ctx: ReducerEventContext, records: KnowledgeCargoState[]) => void) {
    this.connection.offReducer('import_knowledge_cargo_state', callback)
  }

  importKnowledgeConstructionState(records: KnowledgeConstructionState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeConstructionState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_construction_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeConstructionStateFlags
    )
  }

  onImportKnowledgeConstructionState(
    callback: (ctx: ReducerEventContext, records: KnowledgeConstructionState[]) => void
  ) {
    this.connection.onReducer('import_knowledge_construction_state', callback)
  }

  removeOnImportKnowledgeConstructionState(
    callback: (ctx: ReducerEventContext, records: KnowledgeConstructionState[]) => void
  ) {
    this.connection.offReducer('import_knowledge_construction_state', callback)
  }

  importKnowledgeCraftState(records: KnowledgeCraftState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeCraftState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_craft_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeCraftStateFlags
    )
  }

  onImportKnowledgeCraftState(callback: (ctx: ReducerEventContext, records: KnowledgeCraftState[]) => void) {
    this.connection.onReducer('import_knowledge_craft_state', callback)
  }

  removeOnImportKnowledgeCraftState(callback: (ctx: ReducerEventContext, records: KnowledgeCraftState[]) => void) {
    this.connection.offReducer('import_knowledge_craft_state', callback)
  }

  importKnowledgeDeployableState(records: KnowledgeDeployableState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeDeployableState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_deployable_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeDeployableStateFlags
    )
  }

  onImportKnowledgeDeployableState(callback: (ctx: ReducerEventContext, records: KnowledgeDeployableState[]) => void) {
    this.connection.onReducer('import_knowledge_deployable_state', callback)
  }

  removeOnImportKnowledgeDeployableState(
    callback: (ctx: ReducerEventContext, records: KnowledgeDeployableState[]) => void
  ) {
    this.connection.offReducer('import_knowledge_deployable_state', callback)
  }

  importKnowledgeEnemyState(records: KnowledgeEnemyState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeEnemyState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_enemy_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeEnemyStateFlags
    )
  }

  onImportKnowledgeEnemyState(callback: (ctx: ReducerEventContext, records: KnowledgeEnemyState[]) => void) {
    this.connection.onReducer('import_knowledge_enemy_state', callback)
  }

  removeOnImportKnowledgeEnemyState(callback: (ctx: ReducerEventContext, records: KnowledgeEnemyState[]) => void) {
    this.connection.offReducer('import_knowledge_enemy_state', callback)
  }

  importKnowledgeExtractState(records: KnowledgeExtractState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeExtractState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_extract_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeExtractStateFlags
    )
  }

  onImportKnowledgeExtractState(callback: (ctx: ReducerEventContext, records: KnowledgeExtractState[]) => void) {
    this.connection.onReducer('import_knowledge_extract_state', callback)
  }

  removeOnImportKnowledgeExtractState(callback: (ctx: ReducerEventContext, records: KnowledgeExtractState[]) => void) {
    this.connection.offReducer('import_knowledge_extract_state', callback)
  }

  importKnowledgeItemState(records: KnowledgeItemState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeItemState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_item_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeItemStateFlags
    )
  }

  onImportKnowledgeItemState(callback: (ctx: ReducerEventContext, records: KnowledgeItemState[]) => void) {
    this.connection.onReducer('import_knowledge_item_state', callback)
  }

  removeOnImportKnowledgeItemState(callback: (ctx: ReducerEventContext, records: KnowledgeItemState[]) => void) {
    this.connection.offReducer('import_knowledge_item_state', callback)
  }

  importKnowledgeLoreState(records: KnowledgeLoreState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeLoreState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_lore_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeLoreStateFlags
    )
  }

  onImportKnowledgeLoreState(callback: (ctx: ReducerEventContext, records: KnowledgeLoreState[]) => void) {
    this.connection.onReducer('import_knowledge_lore_state', callback)
  }

  removeOnImportKnowledgeLoreState(callback: (ctx: ReducerEventContext, records: KnowledgeLoreState[]) => void) {
    this.connection.offReducer('import_knowledge_lore_state', callback)
  }

  importKnowledgeNpcState(records: KnowledgeNpcState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeNpcState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_npc_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeNpcStateFlags
    )
  }

  onImportKnowledgeNpcState(callback: (ctx: ReducerEventContext, records: KnowledgeNpcState[]) => void) {
    this.connection.onReducer('import_knowledge_npc_state', callback)
  }

  removeOnImportKnowledgeNpcState(callback: (ctx: ReducerEventContext, records: KnowledgeNpcState[]) => void) {
    this.connection.offReducer('import_knowledge_npc_state', callback)
  }

  importKnowledgePavingState(records: KnowledgePavingState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgePavingState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_paving_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgePavingStateFlags
    )
  }

  onImportKnowledgePavingState(callback: (ctx: ReducerEventContext, records: KnowledgePavingState[]) => void) {
    this.connection.onReducer('import_knowledge_paving_state', callback)
  }

  removeOnImportKnowledgePavingState(callback: (ctx: ReducerEventContext, records: KnowledgePavingState[]) => void) {
    this.connection.offReducer('import_knowledge_paving_state', callback)
  }

  importKnowledgeResourcePlacementState(records: KnowledgeResourcePlacementState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeResourcePlacementState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_resource_placement_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeResourcePlacementStateFlags
    )
  }

  onImportKnowledgeResourcePlacementState(
    callback: (ctx: ReducerEventContext, records: KnowledgeResourcePlacementState[]) => void
  ) {
    this.connection.onReducer('import_knowledge_resource_placement_state', callback)
  }

  removeOnImportKnowledgeResourcePlacementState(
    callback: (ctx: ReducerEventContext, records: KnowledgeResourcePlacementState[]) => void
  ) {
    this.connection.offReducer('import_knowledge_resource_placement_state', callback)
  }

  importKnowledgeResourceState(records: KnowledgeResourceState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeResourceState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_resource_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeResourceStateFlags
    )
  }

  onImportKnowledgeResourceState(callback: (ctx: ReducerEventContext, records: KnowledgeResourceState[]) => void) {
    this.connection.onReducer('import_knowledge_resource_state', callback)
  }

  removeOnImportKnowledgeResourceState(
    callback: (ctx: ReducerEventContext, records: KnowledgeResourceState[]) => void
  ) {
    this.connection.offReducer('import_knowledge_resource_state', callback)
  }

  importKnowledgeRuinsState(records: KnowledgeRuinsState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeRuinsState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_ruins_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeRuinsStateFlags
    )
  }

  onImportKnowledgeRuinsState(callback: (ctx: ReducerEventContext, records: KnowledgeRuinsState[]) => void) {
    this.connection.onReducer('import_knowledge_ruins_state', callback)
  }

  removeOnImportKnowledgeRuinsState(callback: (ctx: ReducerEventContext, records: KnowledgeRuinsState[]) => void) {
    this.connection.offReducer('import_knowledge_ruins_state', callback)
  }

  importKnowledgeScrollDesc(records: KnowledgeScrollDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeScrollDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_scroll_desc',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeScrollDescFlags
    )
  }

  onImportKnowledgeScrollDesc(callback: (ctx: ReducerEventContext, records: KnowledgeScrollDesc[]) => void) {
    this.connection.onReducer('import_knowledge_scroll_desc', callback)
  }

  removeOnImportKnowledgeScrollDesc(callback: (ctx: ReducerEventContext, records: KnowledgeScrollDesc[]) => void) {
    this.connection.offReducer('import_knowledge_scroll_desc', callback)
  }

  importKnowledgeScrollTypeDesc(records: KnowledgeScrollTypeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeScrollTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_scroll_type_desc',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeScrollTypeDescFlags
    )
  }

  onImportKnowledgeScrollTypeDesc(callback: (ctx: ReducerEventContext, records: KnowledgeScrollTypeDesc[]) => void) {
    this.connection.onReducer('import_knowledge_scroll_type_desc', callback)
  }

  removeOnImportKnowledgeScrollTypeDesc(
    callback: (ctx: ReducerEventContext, records: KnowledgeScrollTypeDesc[]) => void
  ) {
    this.connection.offReducer('import_knowledge_scroll_type_desc', callback)
  }

  importKnowledgeSecondaryState(records: KnowledgeSecondaryState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeSecondaryState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_secondary_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeSecondaryStateFlags
    )
  }

  onImportKnowledgeSecondaryState(callback: (ctx: ReducerEventContext, records: KnowledgeSecondaryState[]) => void) {
    this.connection.onReducer('import_knowledge_secondary_state', callback)
  }

  removeOnImportKnowledgeSecondaryState(
    callback: (ctx: ReducerEventContext, records: KnowledgeSecondaryState[]) => void
  ) {
    this.connection.offReducer('import_knowledge_secondary_state', callback)
  }

  importKnowledgeStatModifierDesc(records: KnowledgeStatModifierDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeStatModifierDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_stat_modifier_desc',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeStatModifierDescFlags
    )
  }

  onImportKnowledgeStatModifierDesc(
    callback: (ctx: ReducerEventContext, records: KnowledgeStatModifierDesc[]) => void
  ) {
    this.connection.onReducer('import_knowledge_stat_modifier_desc', callback)
  }

  removeOnImportKnowledgeStatModifierDesc(
    callback: (ctx: ReducerEventContext, records: KnowledgeStatModifierDesc[]) => void
  ) {
    this.connection.offReducer('import_knowledge_stat_modifier_desc', callback)
  }

  importKnowledgeVaultState(records: KnowledgeVaultState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportKnowledgeVaultState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_knowledge_vault_state',
      __argsBuffer,
      this.setCallReducerFlags.importKnowledgeVaultStateFlags
    )
  }

  onImportKnowledgeVaultState(callback: (ctx: ReducerEventContext, records: KnowledgeVaultState[]) => void) {
    this.connection.onReducer('import_knowledge_vault_state', callback)
  }

  removeOnImportKnowledgeVaultState(callback: (ctx: ReducerEventContext, records: KnowledgeVaultState[]) => void) {
    this.connection.offReducer('import_knowledge_vault_state', callback)
  }

  importLocationState(records: LocationState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportLocationState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_location_state',
      __argsBuffer,
      this.setCallReducerFlags.importLocationStateFlags
    )
  }

  onImportLocationState(callback: (ctx: ReducerEventContext, records: LocationState[]) => void) {
    this.connection.onReducer('import_location_state', callback)
  }

  removeOnImportLocationState(callback: (ctx: ReducerEventContext, records: LocationState[]) => void) {
    this.connection.offReducer('import_location_state', callback)
  }

  importLootChestDesc(records: LootChestDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportLootChestDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_loot_chest_desc',
      __argsBuffer,
      this.setCallReducerFlags.importLootChestDescFlags
    )
  }

  onImportLootChestDesc(callback: (ctx: ReducerEventContext, records: LootChestDesc[]) => void) {
    this.connection.onReducer('import_loot_chest_desc', callback)
  }

  removeOnImportLootChestDesc(callback: (ctx: ReducerEventContext, records: LootChestDesc[]) => void) {
    this.connection.offReducer('import_loot_chest_desc', callback)
  }

  importLootChestState(records: LootChestState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportLootChestState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_loot_chest_state',
      __argsBuffer,
      this.setCallReducerFlags.importLootChestStateFlags
    )
  }

  onImportLootChestState(callback: (ctx: ReducerEventContext, records: LootChestState[]) => void) {
    this.connection.onReducer('import_loot_chest_state', callback)
  }

  removeOnImportLootChestState(callback: (ctx: ReducerEventContext, records: LootChestState[]) => void) {
    this.connection.offReducer('import_loot_chest_state', callback)
  }

  importLootRarityDesc(records: LootRarityDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportLootRarityDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_loot_rarity_desc',
      __argsBuffer,
      this.setCallReducerFlags.importLootRarityDescFlags
    )
  }

  onImportLootRarityDesc(callback: (ctx: ReducerEventContext, records: LootRarityDesc[]) => void) {
    this.connection.onReducer('import_loot_rarity_desc', callback)
  }

  removeOnImportLootRarityDesc(callback: (ctx: ReducerEventContext, records: LootRarityDesc[]) => void) {
    this.connection.offReducer('import_loot_rarity_desc', callback)
  }

  importLootTableDesc(records: LootTableDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportLootTableDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_loot_table_desc',
      __argsBuffer,
      this.setCallReducerFlags.importLootTableDescFlags
    )
  }

  onImportLootTableDesc(callback: (ctx: ReducerEventContext, records: LootTableDesc[]) => void) {
    this.connection.onReducer('import_loot_table_desc', callback)
  }

  removeOnImportLootTableDesc(callback: (ctx: ReducerEventContext, records: LootTableDesc[]) => void) {
    this.connection.offReducer('import_loot_table_desc', callback)
  }

  importMobileEntityState(records: MobileEntityState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportMobileEntityState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_mobile_entity_state',
      __argsBuffer,
      this.setCallReducerFlags.importMobileEntityStateFlags
    )
  }

  onImportMobileEntityState(callback: (ctx: ReducerEventContext, records: MobileEntityState[]) => void) {
    this.connection.onReducer('import_mobile_entity_state', callback)
  }

  removeOnImportMobileEntityState(callback: (ctx: ReducerEventContext, records: MobileEntityState[]) => void) {
    this.connection.offReducer('import_mobile_entity_state', callback)
  }

  importMountingState(records: MountingState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportMountingState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_mounting_state',
      __argsBuffer,
      this.setCallReducerFlags.importMountingStateFlags
    )
  }

  onImportMountingState(callback: (ctx: ReducerEventContext, records: MountingState[]) => void) {
    this.connection.onReducer('import_mounting_state', callback)
  }

  removeOnImportMountingState(callback: (ctx: ReducerEventContext, records: MountingState[]) => void) {
    this.connection.offReducer('import_mounting_state', callback)
  }

  importNpcDesc(records: NpcDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportNpcDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_npc_desc', __argsBuffer, this.setCallReducerFlags.importNpcDescFlags)
  }

  onImportNpcDesc(callback: (ctx: ReducerEventContext, records: NpcDesc[]) => void) {
    this.connection.onReducer('import_npc_desc', callback)
  }

  removeOnImportNpcDesc(callback: (ctx: ReducerEventContext, records: NpcDesc[]) => void) {
    this.connection.offReducer('import_npc_desc', callback)
  }

  importNpcState(records: NpcState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportNpcState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_npc_state', __argsBuffer, this.setCallReducerFlags.importNpcStateFlags)
  }

  onImportNpcState(callback: (ctx: ReducerEventContext, records: NpcState[]) => void) {
    this.connection.onReducer('import_npc_state', callback)
  }

  removeOnImportNpcState(callback: (ctx: ReducerEventContext, records: NpcState[]) => void) {
    this.connection.offReducer('import_npc_state', callback)
  }

  importOnboardingRewardDesc(records: OnboardingRewardDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportOnboardingRewardDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_onboarding_reward_desc',
      __argsBuffer,
      this.setCallReducerFlags.importOnboardingRewardDescFlags
    )
  }

  onImportOnboardingRewardDesc(callback: (ctx: ReducerEventContext, records: OnboardingRewardDesc[]) => void) {
    this.connection.onReducer('import_onboarding_reward_desc', callback)
  }

  removeOnImportOnboardingRewardDesc(callback: (ctx: ReducerEventContext, records: OnboardingRewardDesc[]) => void) {
    this.connection.offReducer('import_onboarding_reward_desc', callback)
  }

  importOnboardingState(records: OnboardingState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportOnboardingState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_onboarding_state',
      __argsBuffer,
      this.setCallReducerFlags.importOnboardingStateFlags
    )
  }

  onImportOnboardingState(callback: (ctx: ReducerEventContext, records: OnboardingState[]) => void) {
    this.connection.onReducer('import_onboarding_state', callback)
  }

  removeOnImportOnboardingState(callback: (ctx: ReducerEventContext, records: OnboardingState[]) => void) {
    this.connection.offReducer('import_onboarding_state', callback)
  }

  importParametersDesc(records: ParametersDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportParametersDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_parameters_desc',
      __argsBuffer,
      this.setCallReducerFlags.importParametersDescFlags
    )
  }

  onImportParametersDesc(callback: (ctx: ReducerEventContext, records: ParametersDesc[]) => void) {
    this.connection.onReducer('import_parameters_desc', callback)
  }

  removeOnImportParametersDesc(callback: (ctx: ReducerEventContext, records: ParametersDesc[]) => void) {
    this.connection.offReducer('import_parameters_desc', callback)
  }

  importPathfindingDesc(records: PathfindingDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportPathfindingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_pathfinding_desc',
      __argsBuffer,
      this.setCallReducerFlags.importPathfindingDescFlags
    )
  }

  onImportPathfindingDesc(callback: (ctx: ReducerEventContext, records: PathfindingDesc[]) => void) {
    this.connection.onReducer('import_pathfinding_desc', callback)
  }

  removeOnImportPathfindingDesc(callback: (ctx: ReducerEventContext, records: PathfindingDesc[]) => void) {
    this.connection.offReducer('import_pathfinding_desc', callback)
  }

  importPavedTileState(records: PavedTileState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportPavedTileState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_paved_tile_state',
      __argsBuffer,
      this.setCallReducerFlags.importPavedTileStateFlags
    )
  }

  onImportPavedTileState(callback: (ctx: ReducerEventContext, records: PavedTileState[]) => void) {
    this.connection.onReducer('import_paved_tile_state', callback)
  }

  removeOnImportPavedTileState(callback: (ctx: ReducerEventContext, records: PavedTileState[]) => void) {
    this.connection.offReducer('import_paved_tile_state', callback)
  }

  importPavingTileDesc(records: PavingTileDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportPavingTileDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_paving_tile_desc',
      __argsBuffer,
      this.setCallReducerFlags.importPavingTileDescFlags
    )
  }

  onImportPavingTileDesc(callback: (ctx: ReducerEventContext, records: PavingTileDesc[]) => void) {
    this.connection.onReducer('import_paving_tile_desc', callback)
  }

  removeOnImportPavingTileDesc(callback: (ctx: ReducerEventContext, records: PavingTileDesc[]) => void) {
    this.connection.offReducer('import_paving_tile_desc', callback)
  }

  importPlayerActionDesc(records: PlayerActionDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportPlayerActionDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_player_action_desc',
      __argsBuffer,
      this.setCallReducerFlags.importPlayerActionDescFlags
    )
  }

  onImportPlayerActionDesc(callback: (ctx: ReducerEventContext, records: PlayerActionDesc[]) => void) {
    this.connection.onReducer('import_player_action_desc', callback)
  }

  removeOnImportPlayerActionDesc(callback: (ctx: ReducerEventContext, records: PlayerActionDesc[]) => void) {
    this.connection.offReducer('import_player_action_desc', callback)
  }

  importPlayerActionState(records: PlayerActionState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportPlayerActionState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_player_action_state',
      __argsBuffer,
      this.setCallReducerFlags.importPlayerActionStateFlags
    )
  }

  onImportPlayerActionState(callback: (ctx: ReducerEventContext, records: PlayerActionState[]) => void) {
    this.connection.onReducer('import_player_action_state', callback)
  }

  removeOnImportPlayerActionState(callback: (ctx: ReducerEventContext, records: PlayerActionState[]) => void) {
    this.connection.offReducer('import_player_action_state', callback)
  }

  importPlayerPrefsState(records: PlayerPrefsState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportPlayerPrefsState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_player_prefs_state',
      __argsBuffer,
      this.setCallReducerFlags.importPlayerPrefsStateFlags
    )
  }

  onImportPlayerPrefsState(callback: (ctx: ReducerEventContext, records: PlayerPrefsState[]) => void) {
    this.connection.onReducer('import_player_prefs_state', callback)
  }

  removeOnImportPlayerPrefsState(callback: (ctx: ReducerEventContext, records: PlayerPrefsState[]) => void) {
    this.connection.offReducer('import_player_prefs_state', callback)
  }

  importPlayerState(records: PlayerState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportPlayerState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_player_state', __argsBuffer, this.setCallReducerFlags.importPlayerStateFlags)
  }

  onImportPlayerState(callback: (ctx: ReducerEventContext, records: PlayerState[]) => void) {
    this.connection.onReducer('import_player_state', callback)
  }

  removeOnImportPlayerState(callback: (ctx: ReducerEventContext, records: PlayerState[]) => void) {
    this.connection.offReducer('import_player_state', callback)
  }

  importPlayerVoteState(records: PlayerVoteState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportPlayerVoteState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_player_vote_state',
      __argsBuffer,
      this.setCallReducerFlags.importPlayerVoteStateFlags
    )
  }

  onImportPlayerVoteState(callback: (ctx: ReducerEventContext, records: PlayerVoteState[]) => void) {
    this.connection.onReducer('import_player_vote_state', callback)
  }

  removeOnImportPlayerVoteState(callback: (ctx: ReducerEventContext, records: PlayerVoteState[]) => void) {
    this.connection.offReducer('import_player_vote_state', callback)
  }

  importPortalState(records: PortalState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportPortalState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_portal_state', __argsBuffer, this.setCallReducerFlags.importPortalStateFlags)
  }

  onImportPortalState(callback: (ctx: ReducerEventContext, records: PortalState[]) => void) {
    this.connection.onReducer('import_portal_state', callback)
  }

  removeOnImportPortalState(callback: (ctx: ReducerEventContext, records: PortalState[]) => void) {
    this.connection.offReducer('import_portal_state', callback)
  }

  importPrivateParametersDesc(records: PrivateParametersDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportPrivateParametersDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_private_parameters_desc',
      __argsBuffer,
      this.setCallReducerFlags.importPrivateParametersDescFlags
    )
  }

  onImportPrivateParametersDesc(callback: (ctx: ReducerEventContext, records: PrivateParametersDesc[]) => void) {
    this.connection.onReducer('import_private_parameters_desc', callback)
  }

  removeOnImportPrivateParametersDesc(callback: (ctx: ReducerEventContext, records: PrivateParametersDesc[]) => void) {
    this.connection.offReducer('import_private_parameters_desc', callback)
  }

  importProgressiveActionState(records: ProgressiveActionState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportProgressiveActionState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_progressive_action_state',
      __argsBuffer,
      this.setCallReducerFlags.importProgressiveActionStateFlags
    )
  }

  onImportProgressiveActionState(callback: (ctx: ReducerEventContext, records: ProgressiveActionState[]) => void) {
    this.connection.onReducer('import_progressive_action_state', callback)
  }

  removeOnImportProgressiveActionState(
    callback: (ctx: ReducerEventContext, records: ProgressiveActionState[]) => void
  ) {
    this.connection.offReducer('import_progressive_action_state', callback)
  }

  importProjectSiteState(records: ProjectSiteState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportProjectSiteState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_project_site_state',
      __argsBuffer,
      this.setCallReducerFlags.importProjectSiteStateFlags
    )
  }

  onImportProjectSiteState(callback: (ctx: ReducerEventContext, records: ProjectSiteState[]) => void) {
    this.connection.onReducer('import_project_site_state', callback)
  }

  removeOnImportProjectSiteState(callback: (ctx: ReducerEventContext, records: ProjectSiteState[]) => void) {
    this.connection.offReducer('import_project_site_state', callback)
  }

  importRegionConnectionInfo(records: RegionConnectionInfo[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportRegionConnectionInfo.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_region_connection_info',
      __argsBuffer,
      this.setCallReducerFlags.importRegionConnectionInfoFlags
    )
  }

  onImportRegionConnectionInfo(callback: (ctx: ReducerEventContext, records: RegionConnectionInfo[]) => void) {
    this.connection.onReducer('import_region_connection_info', callback)
  }

  removeOnImportRegionConnectionInfo(callback: (ctx: ReducerEventContext, records: RegionConnectionInfo[]) => void) {
    this.connection.offReducer('import_region_connection_info', callback)
  }

  importRegionSignInParameters(records: RegionSignInParameters[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportRegionSignInParameters.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_region_sign_in_parameters',
      __argsBuffer,
      this.setCallReducerFlags.importRegionSignInParametersFlags
    )
  }

  onImportRegionSignInParameters(callback: (ctx: ReducerEventContext, records: RegionSignInParameters[]) => void) {
    this.connection.onReducer('import_region_sign_in_parameters', callback)
  }

  removeOnImportRegionSignInParameters(
    callback: (ctx: ReducerEventContext, records: RegionSignInParameters[]) => void
  ) {
    this.connection.offReducer('import_region_sign_in_parameters', callback)
  }

  importRentState(records: RentState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportRentState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_rent_state', __argsBuffer, this.setCallReducerFlags.importRentStateFlags)
  }

  onImportRentState(callback: (ctx: ReducerEventContext, records: RentState[]) => void) {
    this.connection.onReducer('import_rent_state', callback)
  }

  removeOnImportRentState(callback: (ctx: ReducerEventContext, records: RentState[]) => void) {
    this.connection.offReducer('import_rent_state', callback)
  }

  importResourceClumpDesc(records: ResourceClumpDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportResourceClumpDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_resource_clump_desc',
      __argsBuffer,
      this.setCallReducerFlags.importResourceClumpDescFlags
    )
  }

  onImportResourceClumpDesc(callback: (ctx: ReducerEventContext, records: ResourceClumpDesc[]) => void) {
    this.connection.onReducer('import_resource_clump_desc', callback)
  }

  removeOnImportResourceClumpDesc(callback: (ctx: ReducerEventContext, records: ResourceClumpDesc[]) => void) {
    this.connection.offReducer('import_resource_clump_desc', callback)
  }

  importResourceCount(records: ResourceCount[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportResourceCount.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_resource_count',
      __argsBuffer,
      this.setCallReducerFlags.importResourceCountFlags
    )
  }

  onImportResourceCount(callback: (ctx: ReducerEventContext, records: ResourceCount[]) => void) {
    this.connection.onReducer('import_resource_count', callback)
  }

  removeOnImportResourceCount(callback: (ctx: ReducerEventContext, records: ResourceCount[]) => void) {
    this.connection.offReducer('import_resource_count', callback)
  }

  importResourceDesc(records: ResourceDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportResourceDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_resource_desc', __argsBuffer, this.setCallReducerFlags.importResourceDescFlags)
  }

  onImportResourceDesc(callback: (ctx: ReducerEventContext, records: ResourceDesc[]) => void) {
    this.connection.onReducer('import_resource_desc', callback)
  }

  removeOnImportResourceDesc(callback: (ctx: ReducerEventContext, records: ResourceDesc[]) => void) {
    this.connection.offReducer('import_resource_desc', callback)
  }

  importResourceGrowthRecipeDesc(records: ResourceGrowthRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportResourceGrowthRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_resource_growth_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.importResourceGrowthRecipeDescFlags
    )
  }

  onImportResourceGrowthRecipeDesc(callback: (ctx: ReducerEventContext, records: ResourceGrowthRecipeDesc[]) => void) {
    this.connection.onReducer('import_resource_growth_recipe_desc', callback)
  }

  removeOnImportResourceGrowthRecipeDesc(
    callback: (ctx: ReducerEventContext, records: ResourceGrowthRecipeDesc[]) => void
  ) {
    this.connection.offReducer('import_resource_growth_recipe_desc', callback)
  }

  importResourcePlacementRecipeDesc(records: ResourcePlacementRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportResourcePlacementRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_resource_placement_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.importResourcePlacementRecipeDescFlags
    )
  }

  onImportResourcePlacementRecipeDesc(
    callback: (ctx: ReducerEventContext, records: ResourcePlacementRecipeDesc[]) => void
  ) {
    this.connection.onReducer('import_resource_placement_recipe_desc', callback)
  }

  removeOnImportResourcePlacementRecipeDesc(
    callback: (ctx: ReducerEventContext, records: ResourcePlacementRecipeDesc[]) => void
  ) {
    this.connection.offReducer('import_resource_placement_recipe_desc', callback)
  }

  importResourceState(records: ResourceState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportResourceState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_resource_state',
      __argsBuffer,
      this.setCallReducerFlags.importResourceStateFlags
    )
  }

  onImportResourceState(callback: (ctx: ReducerEventContext, records: ResourceState[]) => void) {
    this.connection.onReducer('import_resource_state', callback)
  }

  removeOnImportResourceState(callback: (ctx: ReducerEventContext, records: ResourceState[]) => void) {
    this.connection.offReducer('import_resource_state', callback)
  }

  importSatiationState(records: SatiationState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportSatiationState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_satiation_state',
      __argsBuffer,
      this.setCallReducerFlags.importSatiationStateFlags
    )
  }

  onImportSatiationState(callback: (ctx: ReducerEventContext, records: SatiationState[]) => void) {
    this.connection.onReducer('import_satiation_state', callback)
  }

  removeOnImportSatiationState(callback: (ctx: ReducerEventContext, records: SatiationState[]) => void) {
    this.connection.offReducer('import_satiation_state', callback)
  }

  importSecondaryKnowledgeDesc(records: SecondaryKnowledgeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportSecondaryKnowledgeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_secondary_knowledge_desc',
      __argsBuffer,
      this.setCallReducerFlags.importSecondaryKnowledgeDescFlags
    )
  }

  onImportSecondaryKnowledgeDesc(callback: (ctx: ReducerEventContext, records: SecondaryKnowledgeDesc[]) => void) {
    this.connection.onReducer('import_secondary_knowledge_desc', callback)
  }

  removeOnImportSecondaryKnowledgeDesc(
    callback: (ctx: ReducerEventContext, records: SecondaryKnowledgeDesc[]) => void
  ) {
    this.connection.offReducer('import_secondary_knowledge_desc', callback)
  }

  importServerIdentity(records: ServerIdentity[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportServerIdentity.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_server_identity',
      __argsBuffer,
      this.setCallReducerFlags.importServerIdentityFlags
    )
  }

  onImportServerIdentity(callback: (ctx: ReducerEventContext, records: ServerIdentity[]) => void) {
    this.connection.onReducer('import_server_identity', callback)
  }

  removeOnImportServerIdentity(callback: (ctx: ReducerEventContext, records: ServerIdentity[]) => void) {
    this.connection.offReducer('import_server_identity', callback)
  }

  importSignedInPlayerState(records: SignedInPlayerState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportSignedInPlayerState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_signed_in_player_state',
      __argsBuffer,
      this.setCallReducerFlags.importSignedInPlayerStateFlags
    )
  }

  onImportSignedInPlayerState(callback: (ctx: ReducerEventContext, records: SignedInPlayerState[]) => void) {
    this.connection.onReducer('import_signed_in_player_state', callback)
  }

  removeOnImportSignedInPlayerState(callback: (ctx: ReducerEventContext, records: SignedInPlayerState[]) => void) {
    this.connection.offReducer('import_signed_in_player_state', callback)
  }

  importSkillDesc(records: SkillDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportSkillDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_skill_desc', __argsBuffer, this.setCallReducerFlags.importSkillDescFlags)
  }

  onImportSkillDesc(callback: (ctx: ReducerEventContext, records: SkillDesc[]) => void) {
    this.connection.onReducer('import_skill_desc', callback)
  }

  removeOnImportSkillDesc(callback: (ctx: ReducerEventContext, records: SkillDesc[]) => void) {
    this.connection.offReducer('import_skill_desc', callback)
  }

  importStaminaState(records: StaminaState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportStaminaState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_stamina_state', __argsBuffer, this.setCallReducerFlags.importStaminaStateFlags)
  }

  onImportStaminaState(callback: (ctx: ReducerEventContext, records: StaminaState[]) => void) {
    this.connection.onReducer('import_stamina_state', callback)
  }

  removeOnImportStaminaState(callback: (ctx: ReducerEventContext, records: StaminaState[]) => void) {
    this.connection.offReducer('import_stamina_state', callback)
  }

  importTargetState(records: TargetState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportTargetState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_target_state', __argsBuffer, this.setCallReducerFlags.importTargetStateFlags)
  }

  onImportTargetState(callback: (ctx: ReducerEventContext, records: TargetState[]) => void) {
    this.connection.onReducer('import_target_state', callback)
  }

  removeOnImportTargetState(callback: (ctx: ReducerEventContext, records: TargetState[]) => void) {
    this.connection.offReducer('import_target_state', callback)
  }

  importTargetableState(records: TargetableState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportTargetableState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_targetable_state',
      __argsBuffer,
      this.setCallReducerFlags.importTargetableStateFlags
    )
  }

  onImportTargetableState(callback: (ctx: ReducerEventContext, records: TargetableState[]) => void) {
    this.connection.onReducer('import_targetable_state', callback)
  }

  removeOnImportTargetableState(callback: (ctx: ReducerEventContext, records: TargetableState[]) => void) {
    this.connection.offReducer('import_targetable_state', callback)
  }

  importTargetingMatrixDesc(records: TargetingMatrixDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportTargetingMatrixDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_targeting_matrix_desc',
      __argsBuffer,
      this.setCallReducerFlags.importTargetingMatrixDescFlags
    )
  }

  onImportTargetingMatrixDesc(callback: (ctx: ReducerEventContext, records: TargetingMatrixDesc[]) => void) {
    this.connection.onReducer('import_targeting_matrix_desc', callback)
  }

  removeOnImportTargetingMatrixDesc(callback: (ctx: ReducerEventContext, records: TargetingMatrixDesc[]) => void) {
    this.connection.offReducer('import_targeting_matrix_desc', callback)
  }

  importTeleportItemDesc(records: TeleportItemDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportTeleportItemDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_teleport_item_desc',
      __argsBuffer,
      this.setCallReducerFlags.importTeleportItemDescFlags
    )
  }

  onImportTeleportItemDesc(callback: (ctx: ReducerEventContext, records: TeleportItemDesc[]) => void) {
    this.connection.onReducer('import_teleport_item_desc', callback)
  }

  removeOnImportTeleportItemDesc(callback: (ctx: ReducerEventContext, records: TeleportItemDesc[]) => void) {
    this.connection.offReducer('import_teleport_item_desc', callback)
  }

  importTerraformRecipeDesc(records: TerraformRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportTerraformRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_terraform_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.importTerraformRecipeDescFlags
    )
  }

  onImportTerraformRecipeDesc(callback: (ctx: ReducerEventContext, records: TerraformRecipeDesc[]) => void) {
    this.connection.onReducer('import_terraform_recipe_desc', callback)
  }

  removeOnImportTerraformRecipeDesc(callback: (ctx: ReducerEventContext, records: TerraformRecipeDesc[]) => void) {
    this.connection.offReducer('import_terraform_recipe_desc', callback)
  }

  importTerrainChunkState(records: TerrainChunkState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportTerrainChunkState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_terrain_chunk_state',
      __argsBuffer,
      this.setCallReducerFlags.importTerrainChunkStateFlags
    )
  }

  onImportTerrainChunkState(callback: (ctx: ReducerEventContext, records: TerrainChunkState[]) => void) {
    this.connection.onReducer('import_terrain_chunk_state', callback)
  }

  removeOnImportTerrainChunkState(callback: (ctx: ReducerEventContext, records: TerrainChunkState[]) => void) {
    this.connection.offReducer('import_terrain_chunk_state', callback)
  }

  importToolDesc(records: ToolDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportToolDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_tool_desc', __argsBuffer, this.setCallReducerFlags.importToolDescFlags)
  }

  onImportToolDesc(callback: (ctx: ReducerEventContext, records: ToolDesc[]) => void) {
    this.connection.onReducer('import_tool_desc', callback)
  }

  removeOnImportToolDesc(callback: (ctx: ReducerEventContext, records: ToolDesc[]) => void) {
    this.connection.offReducer('import_tool_desc', callback)
  }

  importToolTypeDesc(records: ToolTypeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportToolTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_tool_type_desc', __argsBuffer, this.setCallReducerFlags.importToolTypeDescFlags)
  }

  onImportToolTypeDesc(callback: (ctx: ReducerEventContext, records: ToolTypeDesc[]) => void) {
    this.connection.onReducer('import_tool_type_desc', callback)
  }

  removeOnImportToolTypeDesc(callback: (ctx: ReducerEventContext, records: ToolTypeDesc[]) => void) {
    this.connection.offReducer('import_tool_type_desc', callback)
  }

  importTradeOrderState(records: TradeOrderState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportTradeOrderState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_trade_order_state',
      __argsBuffer,
      this.setCallReducerFlags.importTradeOrderStateFlags
    )
  }

  onImportTradeOrderState(callback: (ctx: ReducerEventContext, records: TradeOrderState[]) => void) {
    this.connection.onReducer('import_trade_order_state', callback)
  }

  removeOnImportTradeOrderState(callback: (ctx: ReducerEventContext, records: TradeOrderState[]) => void) {
    this.connection.offReducer('import_trade_order_state', callback)
  }

  importTradeSessionState(records: TradeSessionState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportTradeSessionState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_trade_session_state',
      __argsBuffer,
      this.setCallReducerFlags.importTradeSessionStateFlags
    )
  }

  onImportTradeSessionState(callback: (ctx: ReducerEventContext, records: TradeSessionState[]) => void) {
    this.connection.onReducer('import_trade_session_state', callback)
  }

  removeOnImportTradeSessionState(callback: (ctx: ReducerEventContext, records: TradeSessionState[]) => void) {
    this.connection.offReducer('import_trade_session_state', callback)
  }

  importTravelerTaskDesc(records: TravelerTaskDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportTravelerTaskDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_traveler_task_desc',
      __argsBuffer,
      this.setCallReducerFlags.importTravelerTaskDescFlags
    )
  }

  onImportTravelerTaskDesc(callback: (ctx: ReducerEventContext, records: TravelerTaskDesc[]) => void) {
    this.connection.onReducer('import_traveler_task_desc', callback)
  }

  removeOnImportTravelerTaskDesc(callback: (ctx: ReducerEventContext, records: TravelerTaskDesc[]) => void) {
    this.connection.offReducer('import_traveler_task_desc', callback)
  }

  importTravelerTradeOrderDesc(records: TravelerTradeOrderDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportTravelerTradeOrderDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_traveler_trade_order_desc',
      __argsBuffer,
      this.setCallReducerFlags.importTravelerTradeOrderDescFlags
    )
  }

  onImportTravelerTradeOrderDesc(callback: (ctx: ReducerEventContext, records: TravelerTradeOrderDesc[]) => void) {
    this.connection.onReducer('import_traveler_trade_order_desc', callback)
  }

  removeOnImportTravelerTradeOrderDesc(
    callback: (ctx: ReducerEventContext, records: TravelerTradeOrderDesc[]) => void
  ) {
    this.connection.offReducer('import_traveler_trade_order_desc', callback)
  }

  importUserModerationState(records: UserModerationState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportUserModerationState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_user_moderation_state',
      __argsBuffer,
      this.setCallReducerFlags.importUserModerationStateFlags
    )
  }

  onImportUserModerationState(callback: (ctx: ReducerEventContext, records: UserModerationState[]) => void) {
    this.connection.onReducer('import_user_moderation_state', callback)
  }

  removeOnImportUserModerationState(callback: (ctx: ReducerEventContext, records: UserModerationState[]) => void) {
    this.connection.offReducer('import_user_moderation_state', callback)
  }

  importUserState(records: UserState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportUserState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_user_state', __argsBuffer, this.setCallReducerFlags.importUserStateFlags)
  }

  onImportUserState(callback: (ctx: ReducerEventContext, records: UserState[]) => void) {
    this.connection.onReducer('import_user_state', callback)
  }

  removeOnImportUserState(callback: (ctx: ReducerEventContext, records: UserState[]) => void) {
    this.connection.offReducer('import_user_state', callback)
  }

  importVaultState(records: VaultState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportVaultState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_vault_state', __argsBuffer, this.setCallReducerFlags.importVaultStateFlags)
  }

  onImportVaultState(callback: (ctx: ReducerEventContext, records: VaultState[]) => void) {
    this.connection.onReducer('import_vault_state', callback)
  }

  removeOnImportVaultState(callback: (ctx: ReducerEventContext, records: VaultState[]) => void) {
    this.connection.offReducer('import_vault_state', callback)
  }

  importWallDesc(records: WallDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportWallDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_wall_desc', __argsBuffer, this.setCallReducerFlags.importWallDescFlags)
  }

  onImportWallDesc(callback: (ctx: ReducerEventContext, records: WallDesc[]) => void) {
    this.connection.onReducer('import_wall_desc', callback)
  }

  removeOnImportWallDesc(callback: (ctx: ReducerEventContext, records: WallDesc[]) => void) {
    this.connection.offReducer('import_wall_desc', callback)
  }

  importWeaponDesc(records: WeaponDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportWeaponDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('import_weapon_desc', __argsBuffer, this.setCallReducerFlags.importWeaponDescFlags)
  }

  onImportWeaponDesc(callback: (ctx: ReducerEventContext, records: WeaponDesc[]) => void) {
    this.connection.onReducer('import_weapon_desc', callback)
  }

  removeOnImportWeaponDesc(callback: (ctx: ReducerEventContext, records: WeaponDesc[]) => void) {
    this.connection.offReducer('import_weapon_desc', callback)
  }

  importWeaponTypeDesc(records: WeaponTypeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportWeaponTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_weapon_type_desc',
      __argsBuffer,
      this.setCallReducerFlags.importWeaponTypeDescFlags
    )
  }

  onImportWeaponTypeDesc(callback: (ctx: ReducerEventContext, records: WeaponTypeDesc[]) => void) {
    this.connection.onReducer('import_weapon_type_desc', callback)
  }

  removeOnImportWeaponTypeDesc(callback: (ctx: ReducerEventContext, records: WeaponTypeDesc[]) => void) {
    this.connection.offReducer('import_weapon_type_desc', callback)
  }

  importWorldRegionNameState(records: WorldRegionNameState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportWorldRegionNameState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_world_region_name_state',
      __argsBuffer,
      this.setCallReducerFlags.importWorldRegionNameStateFlags
    )
  }

  onImportWorldRegionNameState(callback: (ctx: ReducerEventContext, records: WorldRegionNameState[]) => void) {
    this.connection.onReducer('import_world_region_name_state', callback)
  }

  removeOnImportWorldRegionNameState(callback: (ctx: ReducerEventContext, records: WorldRegionNameState[]) => void) {
    this.connection.offReducer('import_world_region_name_state', callback)
  }

  importWorldRegionState(records: WorldRegionState[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    ImportWorldRegionState.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'import_world_region_state',
      __argsBuffer,
      this.setCallReducerFlags.importWorldRegionStateFlags
    )
  }

  onImportWorldRegionState(callback: (ctx: ReducerEventContext, records: WorldRegionState[]) => void) {
    this.connection.onReducer('import_world_region_state', callback)
  }

  removeOnImportWorldRegionState(callback: (ctx: ReducerEventContext, records: WorldRegionState[]) => void) {
    this.connection.offReducer('import_world_region_state', callback)
  }

  loadConfig(environmentNames: string[], contents: string[]) {
    const __args = { environmentNames, contents }
    let __writer = new BinaryWriter(1024)
    LoadConfig.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('load_config', __argsBuffer, this.setCallReducerFlags.loadConfigFlags)
  }

  onLoadConfig(callback: (ctx: ReducerEventContext, environmentNames: string[], contents: string[]) => void) {
    this.connection.onReducer('load_config', callback)
  }

  removeOnLoadConfig(callback: (ctx: ReducerEventContext, environmentNames: string[], contents: string[]) => void) {
    this.connection.offReducer('load_config', callback)
  }

  logEmpireLeaderboard() {
    this.connection.callReducer(
      'log_empire_leaderboard',
      new Uint8Array(0),
      this.setCallReducerFlags.logEmpireLeaderboardFlags
    )
  }

  onLogEmpireLeaderboard(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('log_empire_leaderboard', callback)
  }

  removeOnLogEmpireLeaderboard(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('log_empire_leaderboard', callback)
  }

  logPlayerWith() {
    this.connection.callReducer('log_player_with_', new Uint8Array(0), this.setCallReducerFlags.logPlayerWithFlags)
  }

  onLogPlayerWith(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('log_player_with_', callback)
  }

  removeOnLogPlayerWith(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('log_player_with_', callback)
  }

  onInterModuleMessageProcessed(id: bigint, error: string | undefined) {
    const __args = { id, error }
    let __writer = new BinaryWriter(1024)
    OnInterModuleMessageProcessed.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'on_inter_module_message_processed',
      __argsBuffer,
      this.setCallReducerFlags.onInterModuleMessageProcessedFlags
    )
  }

  onOnInterModuleMessageProcessed(callback: (ctx: ReducerEventContext, id: bigint, error: string | undefined) => void) {
    this.connection.onReducer('on_inter_module_message_processed', callback)
  }

  removeOnOnInterModuleMessageProcessed(
    callback: (ctx: ReducerEventContext, id: bigint, error: string | undefined) => void
  ) {
    this.connection.offReducer('on_inter_module_message_processed', callback)
  }

  playerClaimDailyShards() {
    this.connection.callReducer(
      'player_claim_daily_shards',
      new Uint8Array(0),
      this.setCallReducerFlags.playerClaimDailyShardsFlags
    )
  }

  onPlayerClaimDailyShards(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('player_claim_daily_shards', callback)
  }

  removeOnPlayerClaimDailyShards(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('player_claim_daily_shards', callback)
  }

  playerCreate() {
    this.connection.callReducer('player_create', new Uint8Array(0), this.setCallReducerFlags.playerCreateFlags)
  }

  onPlayerCreate(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('player_create', callback)
  }

  removeOnPlayerCreate(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('player_create', callback)
  }

  playerDismissNotification() {
    this.connection.callReducer(
      'player_dismiss_notification',
      new Uint8Array(0),
      this.setCallReducerFlags.playerDismissNotificationFlags
    )
  }

  onPlayerDismissNotification(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('player_dismiss_notification', callback)
  }

  removeOnPlayerDismissNotification(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('player_dismiss_notification', callback)
  }

  playerNotificationEventReducer(timer: PlayerNotificationEvent) {
    const __args = { timer }
    let __writer = new BinaryWriter(1024)
    PlayerNotificationEventReducer.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'player_notification_event_reducer',
      __argsBuffer,
      this.setCallReducerFlags.playerNotificationEventReducerFlags
    )
  }

  onPlayerNotificationEventReducer(callback: (ctx: ReducerEventContext, timer: PlayerNotificationEvent) => void) {
    this.connection.onReducer('player_notification_event_reducer', callback)
  }

  removeOnPlayerNotificationEventReducer(callback: (ctx: ReducerEventContext, timer: PlayerNotificationEvent) => void) {
    this.connection.offReducer('player_notification_event_reducer', callback)
  }

  playerSetName(request: PlayerSetNameRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    PlayerSetName.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('player_set_name', __argsBuffer, this.setCallReducerFlags.playerSetNameFlags)
  }

  onPlayerSetName(callback: (ctx: ReducerEventContext, request: PlayerSetNameRequest) => void) {
    this.connection.onReducer('player_set_name', callback)
  }

  removeOnPlayerSetName(callback: (ctx: ReducerEventContext, request: PlayerSetNameRequest) => void) {
    this.connection.offReducer('player_set_name', callback)
  }

  playerVoteAnswer(request: PlayerVoteAnswerRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    PlayerVoteAnswer.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('player_vote_answer', __argsBuffer, this.setCallReducerFlags.playerVoteAnswerFlags)
  }

  onPlayerVoteAnswer(callback: (ctx: ReducerEventContext, request: PlayerVoteAnswerRequest) => void) {
    this.connection.onReducer('player_vote_answer', callback)
  }

  removeOnPlayerVoteAnswer(callback: (ctx: ReducerEventContext, request: PlayerVoteAnswerRequest) => void) {
    this.connection.offReducer('player_vote_answer', callback)
  }

  playerVoteConclude(timer: PlayerVoteConcludeTimer) {
    const __args = { timer }
    let __writer = new BinaryWriter(1024)
    PlayerVoteConclude.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('player_vote_conclude', __argsBuffer, this.setCallReducerFlags.playerVoteConcludeFlags)
  }

  onPlayerVoteConclude(callback: (ctx: ReducerEventContext, timer: PlayerVoteConcludeTimer) => void) {
    this.connection.onReducer('player_vote_conclude', callback)
  }

  removeOnPlayerVoteConclude(callback: (ctx: ReducerEventContext, timer: PlayerVoteConcludeTimer) => void) {
    this.connection.offReducer('player_vote_conclude', callback)
  }

  processInterModuleMessage(sender: number, message: InterModuleMessage) {
    const __args = { sender, message }
    let __writer = new BinaryWriter(1024)
    ProcessInterModuleMessage.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'process_inter_module_message',
      __argsBuffer,
      this.setCallReducerFlags.processInterModuleMessageFlags
    )
  }

  onProcessInterModuleMessage(
    callback: (ctx: ReducerEventContext, sender: number, message: InterModuleMessage) => void
  ) {
    this.connection.onReducer('process_inter_module_message', callback)
  }

  removeOnProcessInterModuleMessage(
    callback: (ctx: ReducerEventContext, sender: number, message: InterModuleMessage) => void
  ) {
    this.connection.offReducer('process_inter_module_message', callback)
  }

  setRoleForIdentity(identity: string, role: Role) {
    const __args = { identity, role }
    let __writer = new BinaryWriter(1024)
    SetRoleForIdentity.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('set_role_for_identity', __argsBuffer, this.setCallReducerFlags.setRoleForIdentityFlags)
  }

  onSetRoleForIdentity(callback: (ctx: ReducerEventContext, identity: string, role: Role) => void) {
    this.connection.onReducer('set_role_for_identity', callback)
  }

  removeOnSetRoleForIdentity(callback: (ctx: ReducerEventContext, identity: string, role: Role) => void) {
    this.connection.offReducer('set_role_for_identity', callback)
  }

  signIn(request: PlayerSignInRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    SignIn.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('sign_in', __argsBuffer, this.setCallReducerFlags.signInFlags)
  }

  onSignIn(callback: (ctx: ReducerEventContext, request: PlayerSignInRequest) => void) {
    this.connection.onReducer('sign_in', callback)
  }

  removeOnSignIn(callback: (ctx: ReducerEventContext, request: PlayerSignInRequest) => void) {
    this.connection.offReducer('sign_in', callback)
  }

  stageAchievementDesc(records: AchievementDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageAchievementDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_achievement_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageAchievementDescFlags
    )
  }

  onStageAchievementDesc(callback: (ctx: ReducerEventContext, records: AchievementDesc[]) => void) {
    this.connection.onReducer('stage_achievement_desc', callback)
  }

  removeOnStageAchievementDesc(callback: (ctx: ReducerEventContext, records: AchievementDesc[]) => void) {
    this.connection.offReducer('stage_achievement_desc', callback)
  }

  stageAlertDesc(records: AlertDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageAlertDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_alert_desc', __argsBuffer, this.setCallReducerFlags.stageAlertDescFlags)
  }

  onStageAlertDesc(callback: (ctx: ReducerEventContext, records: AlertDesc[]) => void) {
    this.connection.onReducer('stage_alert_desc', callback)
  }

  removeOnStageAlertDesc(callback: (ctx: ReducerEventContext, records: AlertDesc[]) => void) {
    this.connection.offReducer('stage_alert_desc', callback)
  }

  stageBiomeDesc(records: BiomeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageBiomeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_biome_desc', __argsBuffer, this.setCallReducerFlags.stageBiomeDescFlags)
  }

  onStageBiomeDesc(callback: (ctx: ReducerEventContext, records: BiomeDesc[]) => void) {
    this.connection.onReducer('stage_biome_desc', callback)
  }

  removeOnStageBiomeDesc(callback: (ctx: ReducerEventContext, records: BiomeDesc[]) => void) {
    this.connection.offReducer('stage_biome_desc', callback)
  }

  stageBuffDesc(records: BuffDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageBuffDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_buff_desc', __argsBuffer, this.setCallReducerFlags.stageBuffDescFlags)
  }

  onStageBuffDesc(callback: (ctx: ReducerEventContext, records: BuffDesc[]) => void) {
    this.connection.onReducer('stage_buff_desc', callback)
  }

  removeOnStageBuffDesc(callback: (ctx: ReducerEventContext, records: BuffDesc[]) => void) {
    this.connection.offReducer('stage_buff_desc', callback)
  }

  stageBuffTypeDesc(records: BuffTypeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageBuffTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_buff_type_desc', __argsBuffer, this.setCallReducerFlags.stageBuffTypeDescFlags)
  }

  onStageBuffTypeDesc(callback: (ctx: ReducerEventContext, records: BuffTypeDesc[]) => void) {
    this.connection.onReducer('stage_buff_type_desc', callback)
  }

  removeOnStageBuffTypeDesc(callback: (ctx: ReducerEventContext, records: BuffTypeDesc[]) => void) {
    this.connection.offReducer('stage_buff_type_desc', callback)
  }

  stageBuildingClaimDesc(records: BuildingClaimDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageBuildingClaimDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_building_claim_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageBuildingClaimDescFlags
    )
  }

  onStageBuildingClaimDesc(callback: (ctx: ReducerEventContext, records: BuildingClaimDesc[]) => void) {
    this.connection.onReducer('stage_building_claim_desc', callback)
  }

  removeOnStageBuildingClaimDesc(callback: (ctx: ReducerEventContext, records: BuildingClaimDesc[]) => void) {
    this.connection.offReducer('stage_building_claim_desc', callback)
  }

  stageBuildingDesc(records: BuildingDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageBuildingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_building_desc', __argsBuffer, this.setCallReducerFlags.stageBuildingDescFlags)
  }

  onStageBuildingDesc(callback: (ctx: ReducerEventContext, records: BuildingDesc[]) => void) {
    this.connection.onReducer('stage_building_desc', callback)
  }

  removeOnStageBuildingDesc(callback: (ctx: ReducerEventContext, records: BuildingDesc[]) => void) {
    this.connection.offReducer('stage_building_desc', callback)
  }

  stageBuildingPortalDesc(records: BuildingPortalDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageBuildingPortalDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_building_portal_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageBuildingPortalDescFlags
    )
  }

  onStageBuildingPortalDesc(callback: (ctx: ReducerEventContext, records: BuildingPortalDesc[]) => void) {
    this.connection.onReducer('stage_building_portal_desc', callback)
  }

  removeOnStageBuildingPortalDesc(callback: (ctx: ReducerEventContext, records: BuildingPortalDesc[]) => void) {
    this.connection.offReducer('stage_building_portal_desc', callback)
  }

  stageBuildingRepairsDesc(records: BuildingRepairsDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageBuildingRepairsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_building_repairs_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageBuildingRepairsDescFlags
    )
  }

  onStageBuildingRepairsDesc(callback: (ctx: ReducerEventContext, records: BuildingRepairsDesc[]) => void) {
    this.connection.onReducer('stage_building_repairs_desc', callback)
  }

  removeOnStageBuildingRepairsDesc(callback: (ctx: ReducerEventContext, records: BuildingRepairsDesc[]) => void) {
    this.connection.offReducer('stage_building_repairs_desc', callback)
  }

  stageBuildingSpawnDesc(records: BuildingSpawnDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageBuildingSpawnDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_building_spawn_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageBuildingSpawnDescFlags
    )
  }

  onStageBuildingSpawnDesc(callback: (ctx: ReducerEventContext, records: BuildingSpawnDesc[]) => void) {
    this.connection.onReducer('stage_building_spawn_desc', callback)
  }

  removeOnStageBuildingSpawnDesc(callback: (ctx: ReducerEventContext, records: BuildingSpawnDesc[]) => void) {
    this.connection.offReducer('stage_building_spawn_desc', callback)
  }

  stageBuildingTypeDesc(records: BuildingTypeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageBuildingTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_building_type_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageBuildingTypeDescFlags
    )
  }

  onStageBuildingTypeDesc(callback: (ctx: ReducerEventContext, records: BuildingTypeDesc[]) => void) {
    this.connection.onReducer('stage_building_type_desc', callback)
  }

  removeOnStageBuildingTypeDesc(callback: (ctx: ReducerEventContext, records: BuildingTypeDesc[]) => void) {
    this.connection.offReducer('stage_building_type_desc', callback)
  }

  stageCargoDesc(records: CargoDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageCargoDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_cargo_desc', __argsBuffer, this.setCallReducerFlags.stageCargoDescFlags)
  }

  onStageCargoDesc(callback: (ctx: ReducerEventContext, records: CargoDesc[]) => void) {
    this.connection.onReducer('stage_cargo_desc', callback)
  }

  removeOnStageCargoDesc(callback: (ctx: ReducerEventContext, records: CargoDesc[]) => void) {
    this.connection.offReducer('stage_cargo_desc', callback)
  }

  stageCharacterStatDesc(records: CharacterStatDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageCharacterStatDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_character_stat_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageCharacterStatDescFlags
    )
  }

  onStageCharacterStatDesc(callback: (ctx: ReducerEventContext, records: CharacterStatDesc[]) => void) {
    this.connection.onReducer('stage_character_stat_desc', callback)
  }

  removeOnStageCharacterStatDesc(callback: (ctx: ReducerEventContext, records: CharacterStatDesc[]) => void) {
    this.connection.offReducer('stage_character_stat_desc', callback)
  }

  stageChestRarityDesc(records: ChestRarityDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageChestRarityDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_chest_rarity_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageChestRarityDescFlags
    )
  }

  onStageChestRarityDesc(callback: (ctx: ReducerEventContext, records: ChestRarityDesc[]) => void) {
    this.connection.onReducer('stage_chest_rarity_desc', callback)
  }

  removeOnStageChestRarityDesc(callback: (ctx: ReducerEventContext, records: ChestRarityDesc[]) => void) {
    this.connection.offReducer('stage_chest_rarity_desc', callback)
  }

  stageClaimTechDesc(records: ClaimTechDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageClaimTechDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_claim_tech_desc', __argsBuffer, this.setCallReducerFlags.stageClaimTechDescFlags)
  }

  onStageClaimTechDesc(callback: (ctx: ReducerEventContext, records: ClaimTechDesc[]) => void) {
    this.connection.onReducer('stage_claim_tech_desc', callback)
  }

  removeOnStageClaimTechDesc(callback: (ctx: ReducerEventContext, records: ClaimTechDesc[]) => void) {
    this.connection.offReducer('stage_claim_tech_desc', callback)
  }

  stageClaimTileCost(records: ClaimTileCost[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageClaimTileCost.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_claim_tile_cost', __argsBuffer, this.setCallReducerFlags.stageClaimTileCostFlags)
  }

  onStageClaimTileCost(callback: (ctx: ReducerEventContext, records: ClaimTileCost[]) => void) {
    this.connection.onReducer('stage_claim_tile_cost', callback)
  }

  removeOnStageClaimTileCost(callback: (ctx: ReducerEventContext, records: ClaimTileCost[]) => void) {
    this.connection.offReducer('stage_claim_tile_cost', callback)
  }

  stageClimbRequirementDesc(records: ClimbRequirementDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageClimbRequirementDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_climb_requirement_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageClimbRequirementDescFlags
    )
  }

  onStageClimbRequirementDesc(callback: (ctx: ReducerEventContext, records: ClimbRequirementDesc[]) => void) {
    this.connection.onReducer('stage_climb_requirement_desc', callback)
  }

  removeOnStageClimbRequirementDesc(callback: (ctx: ReducerEventContext, records: ClimbRequirementDesc[]) => void) {
    this.connection.offReducer('stage_climb_requirement_desc', callback)
  }

  stageClothingDesc(records: ClothingDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageClothingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_clothing_desc', __argsBuffer, this.setCallReducerFlags.stageClothingDescFlags)
  }

  onStageClothingDesc(callback: (ctx: ReducerEventContext, records: ClothingDesc[]) => void) {
    this.connection.onReducer('stage_clothing_desc', callback)
  }

  removeOnStageClothingDesc(callback: (ctx: ReducerEventContext, records: ClothingDesc[]) => void) {
    this.connection.offReducer('stage_clothing_desc', callback)
  }

  stageCollectibleDesc(records: CollectibleDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageCollectibleDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_collectible_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageCollectibleDescFlags
    )
  }

  onStageCollectibleDesc(callback: (ctx: ReducerEventContext, records: CollectibleDesc[]) => void) {
    this.connection.onReducer('stage_collectible_desc', callback)
  }

  removeOnStageCollectibleDesc(callback: (ctx: ReducerEventContext, records: CollectibleDesc[]) => void) {
    this.connection.offReducer('stage_collectible_desc', callback)
  }

  stageCombatActionDesc(records: CombatActionDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageCombatActionDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_combat_action_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageCombatActionDescFlags
    )
  }

  onStageCombatActionDesc(callback: (ctx: ReducerEventContext, records: CombatActionDesc[]) => void) {
    this.connection.onReducer('stage_combat_action_desc', callback)
  }

  removeOnStageCombatActionDesc(callback: (ctx: ReducerEventContext, records: CombatActionDesc[]) => void) {
    this.connection.offReducer('stage_combat_action_desc', callback)
  }

  stageConstructionRecipeDesc(records: ConstructionRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageConstructionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_construction_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageConstructionRecipeDescFlags
    )
  }

  onStageConstructionRecipeDesc(callback: (ctx: ReducerEventContext, records: ConstructionRecipeDesc[]) => void) {
    this.connection.onReducer('stage_construction_recipe_desc', callback)
  }

  removeOnStageConstructionRecipeDesc(callback: (ctx: ReducerEventContext, records: ConstructionRecipeDesc[]) => void) {
    this.connection.offReducer('stage_construction_recipe_desc', callback)
  }

  stageCraftingRecipeDesc(records: CraftingRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageCraftingRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_crafting_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageCraftingRecipeDescFlags
    )
  }

  onStageCraftingRecipeDesc(callback: (ctx: ReducerEventContext, records: CraftingRecipeDesc[]) => void) {
    this.connection.onReducer('stage_crafting_recipe_desc', callback)
  }

  removeOnStageCraftingRecipeDesc(callback: (ctx: ReducerEventContext, records: CraftingRecipeDesc[]) => void) {
    this.connection.offReducer('stage_crafting_recipe_desc', callback)
  }

  stageDeconstructionRecipeDesc(records: DeconstructionRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageDeconstructionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_deconstruction_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageDeconstructionRecipeDescFlags
    )
  }

  onStageDeconstructionRecipeDesc(callback: (ctx: ReducerEventContext, records: DeconstructionRecipeDesc[]) => void) {
    this.connection.onReducer('stage_deconstruction_recipe_desc', callback)
  }

  removeOnStageDeconstructionRecipeDesc(
    callback: (ctx: ReducerEventContext, records: DeconstructionRecipeDesc[]) => void
  ) {
    this.connection.offReducer('stage_deconstruction_recipe_desc', callback)
  }

  stageDeployableDesc(records: DeployableDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageDeployableDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_deployable_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageDeployableDescFlags
    )
  }

  onStageDeployableDesc(callback: (ctx: ReducerEventContext, records: DeployableDesc[]) => void) {
    this.connection.onReducer('stage_deployable_desc', callback)
  }

  removeOnStageDeployableDesc(callback: (ctx: ReducerEventContext, records: DeployableDesc[]) => void) {
    this.connection.offReducer('stage_deployable_desc', callback)
  }

  stageDistantVisibleEntityDesc(records: DistantVisibleEntityDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageDistantVisibleEntityDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_distant_visible_entity_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageDistantVisibleEntityDescFlags
    )
  }

  onStageDistantVisibleEntityDesc(callback: (ctx: ReducerEventContext, records: DistantVisibleEntityDesc[]) => void) {
    this.connection.onReducer('stage_distant_visible_entity_desc', callback)
  }

  removeOnStageDistantVisibleEntityDesc(
    callback: (ctx: ReducerEventContext, records: DistantVisibleEntityDesc[]) => void
  ) {
    this.connection.offReducer('stage_distant_visible_entity_desc', callback)
  }

  stageElevatorDesc(records: ElevatorDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageElevatorDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_elevator_desc', __argsBuffer, this.setCallReducerFlags.stageElevatorDescFlags)
  }

  onStageElevatorDesc(callback: (ctx: ReducerEventContext, records: ElevatorDesc[]) => void) {
    this.connection.onReducer('stage_elevator_desc', callback)
  }

  removeOnStageElevatorDesc(callback: (ctx: ReducerEventContext, records: ElevatorDesc[]) => void) {
    this.connection.offReducer('stage_elevator_desc', callback)
  }

  stageEmoteDesc(records: EmoteDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageEmoteDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_emote_desc', __argsBuffer, this.setCallReducerFlags.stageEmoteDescFlags)
  }

  onStageEmoteDesc(callback: (ctx: ReducerEventContext, records: EmoteDesc[]) => void) {
    this.connection.onReducer('stage_emote_desc', callback)
  }

  removeOnStageEmoteDesc(callback: (ctx: ReducerEventContext, records: EmoteDesc[]) => void) {
    this.connection.offReducer('stage_emote_desc', callback)
  }

  stageEmpireColorsDesc(records: EmpireColorDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageEmpireColorsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_empire_colors_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageEmpireColorsDescFlags
    )
  }

  onStageEmpireColorsDesc(callback: (ctx: ReducerEventContext, records: EmpireColorDesc[]) => void) {
    this.connection.onReducer('stage_empire_colors_desc', callback)
  }

  removeOnStageEmpireColorsDesc(callback: (ctx: ReducerEventContext, records: EmpireColorDesc[]) => void) {
    this.connection.offReducer('stage_empire_colors_desc', callback)
  }

  stageEmpireIconDesc(records: EmpireIconDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageEmpireIconDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_empire_icon_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageEmpireIconDescFlags
    )
  }

  onStageEmpireIconDesc(callback: (ctx: ReducerEventContext, records: EmpireIconDesc[]) => void) {
    this.connection.onReducer('stage_empire_icon_desc', callback)
  }

  removeOnStageEmpireIconDesc(callback: (ctx: ReducerEventContext, records: EmpireIconDesc[]) => void) {
    this.connection.offReducer('stage_empire_icon_desc', callback)
  }

  stageEmpireNotificationDesc(records: EmpireNotificationDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageEmpireNotificationDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_empire_notification_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageEmpireNotificationDescFlags
    )
  }

  onStageEmpireNotificationDesc(callback: (ctx: ReducerEventContext, records: EmpireNotificationDesc[]) => void) {
    this.connection.onReducer('stage_empire_notification_desc', callback)
  }

  removeOnStageEmpireNotificationDesc(callback: (ctx: ReducerEventContext, records: EmpireNotificationDesc[]) => void) {
    this.connection.offReducer('stage_empire_notification_desc', callback)
  }

  stageEmpireRankDesc(records: EmpireRankDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageEmpireRankDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_empire_rank_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageEmpireRankDescFlags
    )
  }

  onStageEmpireRankDesc(callback: (ctx: ReducerEventContext, records: EmpireRankDesc[]) => void) {
    this.connection.onReducer('stage_empire_rank_desc', callback)
  }

  removeOnStageEmpireRankDesc(callback: (ctx: ReducerEventContext, records: EmpireRankDesc[]) => void) {
    this.connection.offReducer('stage_empire_rank_desc', callback)
  }

  stageEmpireSuppliesDesc(records: EmpireSuppliesDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageEmpireSuppliesDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_empire_supplies_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageEmpireSuppliesDescFlags
    )
  }

  onStageEmpireSuppliesDesc(callback: (ctx: ReducerEventContext, records: EmpireSuppliesDesc[]) => void) {
    this.connection.onReducer('stage_empire_supplies_desc', callback)
  }

  removeOnStageEmpireSuppliesDesc(callback: (ctx: ReducerEventContext, records: EmpireSuppliesDesc[]) => void) {
    this.connection.offReducer('stage_empire_supplies_desc', callback)
  }

  stageEmpireTerritoryDesc(records: EmpireTerritoryDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageEmpireTerritoryDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_empire_territory_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageEmpireTerritoryDescFlags
    )
  }

  onStageEmpireTerritoryDesc(callback: (ctx: ReducerEventContext, records: EmpireTerritoryDesc[]) => void) {
    this.connection.onReducer('stage_empire_territory_desc', callback)
  }

  removeOnStageEmpireTerritoryDesc(callback: (ctx: ReducerEventContext, records: EmpireTerritoryDesc[]) => void) {
    this.connection.offReducer('stage_empire_territory_desc', callback)
  }

  stageEnemyAiParamsDesc(records: EnemyAiParamsDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageEnemyAiParamsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_enemy_ai_params_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageEnemyAiParamsDescFlags
    )
  }

  onStageEnemyAiParamsDesc(callback: (ctx: ReducerEventContext, records: EnemyAiParamsDesc[]) => void) {
    this.connection.onReducer('stage_enemy_ai_params_desc', callback)
  }

  removeOnStageEnemyAiParamsDesc(callback: (ctx: ReducerEventContext, records: EnemyAiParamsDesc[]) => void) {
    this.connection.offReducer('stage_enemy_ai_params_desc', callback)
  }

  stageEnemyDesc(records: EnemyDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageEnemyDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_enemy_desc', __argsBuffer, this.setCallReducerFlags.stageEnemyDescFlags)
  }

  onStageEnemyDesc(callback: (ctx: ReducerEventContext, records: EnemyDesc[]) => void) {
    this.connection.onReducer('stage_enemy_desc', callback)
  }

  removeOnStageEnemyDesc(callback: (ctx: ReducerEventContext, records: EnemyDesc[]) => void) {
    this.connection.offReducer('stage_enemy_desc', callback)
  }

  stageEnvironmentDebuffDesc(records: EnvironmentDebuffDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageEnvironmentDebuffDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_environment_debuff_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageEnvironmentDebuffDescFlags
    )
  }

  onStageEnvironmentDebuffDesc(callback: (ctx: ReducerEventContext, records: EnvironmentDebuffDesc[]) => void) {
    this.connection.onReducer('stage_environment_debuff_desc', callback)
  }

  removeOnStageEnvironmentDebuffDesc(callback: (ctx: ReducerEventContext, records: EnvironmentDebuffDesc[]) => void) {
    this.connection.offReducer('stage_environment_debuff_desc', callback)
  }

  stageEquipmentDesc(records: EquipmentDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageEquipmentDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_equipment_desc', __argsBuffer, this.setCallReducerFlags.stageEquipmentDescFlags)
  }

  onStageEquipmentDesc(callback: (ctx: ReducerEventContext, records: EquipmentDesc[]) => void) {
    this.connection.onReducer('stage_equipment_desc', callback)
  }

  removeOnStageEquipmentDesc(callback: (ctx: ReducerEventContext, records: EquipmentDesc[]) => void) {
    this.connection.offReducer('stage_equipment_desc', callback)
  }

  stageExtractionRecipeDesc(records: ExtractionRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageExtractionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_extraction_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageExtractionRecipeDescFlags
    )
  }

  onStageExtractionRecipeDesc(callback: (ctx: ReducerEventContext, records: ExtractionRecipeDesc[]) => void) {
    this.connection.onReducer('stage_extraction_recipe_desc', callback)
  }

  removeOnStageExtractionRecipeDesc(callback: (ctx: ReducerEventContext, records: ExtractionRecipeDesc[]) => void) {
    this.connection.offReducer('stage_extraction_recipe_desc', callback)
  }

  stageFoodDesc(records: FoodDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageFoodDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_food_desc', __argsBuffer, this.setCallReducerFlags.stageFoodDescFlags)
  }

  onStageFoodDesc(callback: (ctx: ReducerEventContext, records: FoodDesc[]) => void) {
    this.connection.onReducer('stage_food_desc', callback)
  }

  removeOnStageFoodDesc(callback: (ctx: ReducerEventContext, records: FoodDesc[]) => void) {
    this.connection.offReducer('stage_food_desc', callback)
  }

  stageGateDesc(records: GateDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageGateDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_gate_desc', __argsBuffer, this.setCallReducerFlags.stageGateDescFlags)
  }

  onStageGateDesc(callback: (ctx: ReducerEventContext, records: GateDesc[]) => void) {
    this.connection.onReducer('stage_gate_desc', callback)
  }

  removeOnStageGateDesc(callback: (ctx: ReducerEventContext, records: GateDesc[]) => void) {
    this.connection.offReducer('stage_gate_desc', callback)
  }

  stageHexiteExchangeEntryDesc(records: HexiteExchangeEntryDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageHexiteExchangeEntryDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_hexite_exchange_entry_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageHexiteExchangeEntryDescFlags
    )
  }

  onStageHexiteExchangeEntryDesc(callback: (ctx: ReducerEventContext, records: HexiteExchangeEntryDesc[]) => void) {
    this.connection.onReducer('stage_hexite_exchange_entry_desc', callback)
  }

  removeOnStageHexiteExchangeEntryDesc(
    callback: (ctx: ReducerEventContext, records: HexiteExchangeEntryDesc[]) => void
  ) {
    this.connection.offReducer('stage_hexite_exchange_entry_desc', callback)
  }

  stageInteriorEnvironmentDesc(records: InteriorEnvironmentDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageInteriorEnvironmentDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_interior_environment_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageInteriorEnvironmentDescFlags
    )
  }

  onStageInteriorEnvironmentDesc(callback: (ctx: ReducerEventContext, records: InteriorEnvironmentDesc[]) => void) {
    this.connection.onReducer('stage_interior_environment_desc', callback)
  }

  removeOnStageInteriorEnvironmentDesc(
    callback: (ctx: ReducerEventContext, records: InteriorEnvironmentDesc[]) => void
  ) {
    this.connection.offReducer('stage_interior_environment_desc', callback)
  }

  stageInteriorInstanceDesc(records: InteriorInstanceDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageInteriorInstanceDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_interior_instance_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageInteriorInstanceDescFlags
    )
  }

  onStageInteriorInstanceDesc(callback: (ctx: ReducerEventContext, records: InteriorInstanceDesc[]) => void) {
    this.connection.onReducer('stage_interior_instance_desc', callback)
  }

  removeOnStageInteriorInstanceDesc(callback: (ctx: ReducerEventContext, records: InteriorInstanceDesc[]) => void) {
    this.connection.offReducer('stage_interior_instance_desc', callback)
  }

  stageInteriorNetworkDesc(records: InteriorNetworkDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageInteriorNetworkDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_interior_network_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageInteriorNetworkDescFlags
    )
  }

  onStageInteriorNetworkDesc(callback: (ctx: ReducerEventContext, records: InteriorNetworkDesc[]) => void) {
    this.connection.onReducer('stage_interior_network_desc', callback)
  }

  removeOnStageInteriorNetworkDesc(callback: (ctx: ReducerEventContext, records: InteriorNetworkDesc[]) => void) {
    this.connection.offReducer('stage_interior_network_desc', callback)
  }

  stageInteriorPortalConnectionsDesc(records: InteriorPortalConnectionsDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageInteriorPortalConnectionsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_interior_portal_connections_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageInteriorPortalConnectionsDescFlags
    )
  }

  onStageInteriorPortalConnectionsDesc(
    callback: (ctx: ReducerEventContext, records: InteriorPortalConnectionsDesc[]) => void
  ) {
    this.connection.onReducer('stage_interior_portal_connections_desc', callback)
  }

  removeOnStageInteriorPortalConnectionsDesc(
    callback: (ctx: ReducerEventContext, records: InteriorPortalConnectionsDesc[]) => void
  ) {
    this.connection.offReducer('stage_interior_portal_connections_desc', callback)
  }

  stageInteriorShapeDesc(records: InteriorShapeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageInteriorShapeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_interior_shape_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageInteriorShapeDescFlags
    )
  }

  onStageInteriorShapeDesc(callback: (ctx: ReducerEventContext, records: InteriorShapeDesc[]) => void) {
    this.connection.onReducer('stage_interior_shape_desc', callback)
  }

  removeOnStageInteriorShapeDesc(callback: (ctx: ReducerEventContext, records: InteriorShapeDesc[]) => void) {
    this.connection.offReducer('stage_interior_shape_desc', callback)
  }

  stageInteriorSpawnDesc(records: InteriorSpawnDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageInteriorSpawnDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_interior_spawn_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageInteriorSpawnDescFlags
    )
  }

  onStageInteriorSpawnDesc(callback: (ctx: ReducerEventContext, records: InteriorSpawnDesc[]) => void) {
    this.connection.onReducer('stage_interior_spawn_desc', callback)
  }

  removeOnStageInteriorSpawnDesc(callback: (ctx: ReducerEventContext, records: InteriorSpawnDesc[]) => void) {
    this.connection.offReducer('stage_interior_spawn_desc', callback)
  }

  stageItemConversionRecipeDesc(records: ItemConversionRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageItemConversionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_item_conversion_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageItemConversionRecipeDescFlags
    )
  }

  onStageItemConversionRecipeDesc(callback: (ctx: ReducerEventContext, records: ItemConversionRecipeDesc[]) => void) {
    this.connection.onReducer('stage_item_conversion_recipe_desc', callback)
  }

  removeOnStageItemConversionRecipeDesc(
    callback: (ctx: ReducerEventContext, records: ItemConversionRecipeDesc[]) => void
  ) {
    this.connection.offReducer('stage_item_conversion_recipe_desc', callback)
  }

  stageItemDesc(records: ItemDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageItemDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_item_desc', __argsBuffer, this.setCallReducerFlags.stageItemDescFlags)
  }

  onStageItemDesc(callback: (ctx: ReducerEventContext, records: ItemDesc[]) => void) {
    this.connection.onReducer('stage_item_desc', callback)
  }

  removeOnStageItemDesc(callback: (ctx: ReducerEventContext, records: ItemDesc[]) => void) {
    this.connection.offReducer('stage_item_desc', callback)
  }

  stageItemListDesc(records: ItemListDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageItemListDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_item_list_desc', __argsBuffer, this.setCallReducerFlags.stageItemListDescFlags)
  }

  onStageItemListDesc(callback: (ctx: ReducerEventContext, records: ItemListDesc[]) => void) {
    this.connection.onReducer('stage_item_list_desc', callback)
  }

  removeOnStageItemListDesc(callback: (ctx: ReducerEventContext, records: ItemListDesc[]) => void) {
    this.connection.offReducer('stage_item_list_desc', callback)
  }

  stageKnowledgeScrollDesc(records: KnowledgeScrollDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageKnowledgeScrollDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_knowledge_scroll_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageKnowledgeScrollDescFlags
    )
  }

  onStageKnowledgeScrollDesc(callback: (ctx: ReducerEventContext, records: KnowledgeScrollDesc[]) => void) {
    this.connection.onReducer('stage_knowledge_scroll_desc', callback)
  }

  removeOnStageKnowledgeScrollDesc(callback: (ctx: ReducerEventContext, records: KnowledgeScrollDesc[]) => void) {
    this.connection.offReducer('stage_knowledge_scroll_desc', callback)
  }

  stageKnowledgeScrollTypeDesc(records: KnowledgeScrollTypeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageKnowledgeScrollTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_knowledge_scroll_type_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageKnowledgeScrollTypeDescFlags
    )
  }

  onStageKnowledgeScrollTypeDesc(callback: (ctx: ReducerEventContext, records: KnowledgeScrollTypeDesc[]) => void) {
    this.connection.onReducer('stage_knowledge_scroll_type_desc', callback)
  }

  removeOnStageKnowledgeScrollTypeDesc(
    callback: (ctx: ReducerEventContext, records: KnowledgeScrollTypeDesc[]) => void
  ) {
    this.connection.offReducer('stage_knowledge_scroll_type_desc', callback)
  }

  stageKnowledgeStatModifierDesc(records: KnowledgeStatModifierDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageKnowledgeStatModifierDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_knowledge_stat_modifier_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageKnowledgeStatModifierDescFlags
    )
  }

  onStageKnowledgeStatModifierDesc(callback: (ctx: ReducerEventContext, records: KnowledgeStatModifierDesc[]) => void) {
    this.connection.onReducer('stage_knowledge_stat_modifier_desc', callback)
  }

  removeOnStageKnowledgeStatModifierDesc(
    callback: (ctx: ReducerEventContext, records: KnowledgeStatModifierDesc[]) => void
  ) {
    this.connection.offReducer('stage_knowledge_stat_modifier_desc', callback)
  }

  stageLootChestDesc(records: LootChestDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageLootChestDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_loot_chest_desc', __argsBuffer, this.setCallReducerFlags.stageLootChestDescFlags)
  }

  onStageLootChestDesc(callback: (ctx: ReducerEventContext, records: LootChestDesc[]) => void) {
    this.connection.onReducer('stage_loot_chest_desc', callback)
  }

  removeOnStageLootChestDesc(callback: (ctx: ReducerEventContext, records: LootChestDesc[]) => void) {
    this.connection.offReducer('stage_loot_chest_desc', callback)
  }

  stageLootRarityDesc(records: LootRarityDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageLootRarityDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_loot_rarity_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageLootRarityDescFlags
    )
  }

  onStageLootRarityDesc(callback: (ctx: ReducerEventContext, records: LootRarityDesc[]) => void) {
    this.connection.onReducer('stage_loot_rarity_desc', callback)
  }

  removeOnStageLootRarityDesc(callback: (ctx: ReducerEventContext, records: LootRarityDesc[]) => void) {
    this.connection.offReducer('stage_loot_rarity_desc', callback)
  }

  stageLootTableDesc(records: LootTableDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageLootTableDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_loot_table_desc', __argsBuffer, this.setCallReducerFlags.stageLootTableDescFlags)
  }

  onStageLootTableDesc(callback: (ctx: ReducerEventContext, records: LootTableDesc[]) => void) {
    this.connection.onReducer('stage_loot_table_desc', callback)
  }

  removeOnStageLootTableDesc(callback: (ctx: ReducerEventContext, records: LootTableDesc[]) => void) {
    this.connection.offReducer('stage_loot_table_desc', callback)
  }

  stageNpcDesc(records: NpcDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageNpcDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_npc_desc', __argsBuffer, this.setCallReducerFlags.stageNpcDescFlags)
  }

  onStageNpcDesc(callback: (ctx: ReducerEventContext, records: NpcDesc[]) => void) {
    this.connection.onReducer('stage_npc_desc', callback)
  }

  removeOnStageNpcDesc(callback: (ctx: ReducerEventContext, records: NpcDesc[]) => void) {
    this.connection.offReducer('stage_npc_desc', callback)
  }

  stageOnboardingRewardDesc(records: OnboardingRewardDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageOnboardingRewardDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_onboarding_reward_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageOnboardingRewardDescFlags
    )
  }

  onStageOnboardingRewardDesc(callback: (ctx: ReducerEventContext, records: OnboardingRewardDesc[]) => void) {
    this.connection.onReducer('stage_onboarding_reward_desc', callback)
  }

  removeOnStageOnboardingRewardDesc(callback: (ctx: ReducerEventContext, records: OnboardingRewardDesc[]) => void) {
    this.connection.offReducer('stage_onboarding_reward_desc', callback)
  }

  stageParametersDesc(records: ParametersDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageParametersDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_parameters_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageParametersDescFlags
    )
  }

  onStageParametersDesc(callback: (ctx: ReducerEventContext, records: ParametersDesc[]) => void) {
    this.connection.onReducer('stage_parameters_desc', callback)
  }

  removeOnStageParametersDesc(callback: (ctx: ReducerEventContext, records: ParametersDesc[]) => void) {
    this.connection.offReducer('stage_parameters_desc', callback)
  }

  stagePathfindingDesc(records: PathfindingDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StagePathfindingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_pathfinding_desc',
      __argsBuffer,
      this.setCallReducerFlags.stagePathfindingDescFlags
    )
  }

  onStagePathfindingDesc(callback: (ctx: ReducerEventContext, records: PathfindingDesc[]) => void) {
    this.connection.onReducer('stage_pathfinding_desc', callback)
  }

  removeOnStagePathfindingDesc(callback: (ctx: ReducerEventContext, records: PathfindingDesc[]) => void) {
    this.connection.offReducer('stage_pathfinding_desc', callback)
  }

  stagePavingTileDesc(records: PavingTileDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StagePavingTileDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_paving_tile_desc',
      __argsBuffer,
      this.setCallReducerFlags.stagePavingTileDescFlags
    )
  }

  onStagePavingTileDesc(callback: (ctx: ReducerEventContext, records: PavingTileDesc[]) => void) {
    this.connection.onReducer('stage_paving_tile_desc', callback)
  }

  removeOnStagePavingTileDesc(callback: (ctx: ReducerEventContext, records: PavingTileDesc[]) => void) {
    this.connection.offReducer('stage_paving_tile_desc', callback)
  }

  stagePillarShapingDesc(records: PillarShapingDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StagePillarShapingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_pillar_shaping_desc',
      __argsBuffer,
      this.setCallReducerFlags.stagePillarShapingDescFlags
    )
  }

  onStagePillarShapingDesc(callback: (ctx: ReducerEventContext, records: PillarShapingDesc[]) => void) {
    this.connection.onReducer('stage_pillar_shaping_desc', callback)
  }

  removeOnStagePillarShapingDesc(callback: (ctx: ReducerEventContext, records: PillarShapingDesc[]) => void) {
    this.connection.offReducer('stage_pillar_shaping_desc', callback)
  }

  stagePlayerActionDesc(records: PlayerActionDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StagePlayerActionDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_player_action_desc',
      __argsBuffer,
      this.setCallReducerFlags.stagePlayerActionDescFlags
    )
  }

  onStagePlayerActionDesc(callback: (ctx: ReducerEventContext, records: PlayerActionDesc[]) => void) {
    this.connection.onReducer('stage_player_action_desc', callback)
  }

  removeOnStagePlayerActionDesc(callback: (ctx: ReducerEventContext, records: PlayerActionDesc[]) => void) {
    this.connection.offReducer('stage_player_action_desc', callback)
  }

  stagePlayerHousingDesc(records: PlayerHousingDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StagePlayerHousingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_player_housing_desc',
      __argsBuffer,
      this.setCallReducerFlags.stagePlayerHousingDescFlags
    )
  }

  onStagePlayerHousingDesc(callback: (ctx: ReducerEventContext, records: PlayerHousingDesc[]) => void) {
    this.connection.onReducer('stage_player_housing_desc', callback)
  }

  removeOnStagePlayerHousingDesc(callback: (ctx: ReducerEventContext, records: PlayerHousingDesc[]) => void) {
    this.connection.offReducer('stage_player_housing_desc', callback)
  }

  stagePrivateParametersDesc(records: PrivateParametersDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StagePrivateParametersDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_private_parameters_desc',
      __argsBuffer,
      this.setCallReducerFlags.stagePrivateParametersDescFlags
    )
  }

  onStagePrivateParametersDesc(callback: (ctx: ReducerEventContext, records: PrivateParametersDesc[]) => void) {
    this.connection.onReducer('stage_private_parameters_desc', callback)
  }

  removeOnStagePrivateParametersDesc(callback: (ctx: ReducerEventContext, records: PrivateParametersDesc[]) => void) {
    this.connection.offReducer('stage_private_parameters_desc', callback)
  }

  stageReservedNameDesc(records: ReservedNameDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageReservedNameDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_reserved_name_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageReservedNameDescFlags
    )
  }

  onStageReservedNameDesc(callback: (ctx: ReducerEventContext, records: ReservedNameDesc[]) => void) {
    this.connection.onReducer('stage_reserved_name_desc', callback)
  }

  removeOnStageReservedNameDesc(callback: (ctx: ReducerEventContext, records: ReservedNameDesc[]) => void) {
    this.connection.offReducer('stage_reserved_name_desc', callback)
  }

  stageResourceClumpDesc(records: ResourceClumpDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageResourceClumpDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_resource_clump_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageResourceClumpDescFlags
    )
  }

  onStageResourceClumpDesc(callback: (ctx: ReducerEventContext, records: ResourceClumpDesc[]) => void) {
    this.connection.onReducer('stage_resource_clump_desc', callback)
  }

  removeOnStageResourceClumpDesc(callback: (ctx: ReducerEventContext, records: ResourceClumpDesc[]) => void) {
    this.connection.offReducer('stage_resource_clump_desc', callback)
  }

  stageResourceDesc(records: ResourceDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageResourceDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_resource_desc', __argsBuffer, this.setCallReducerFlags.stageResourceDescFlags)
  }

  onStageResourceDesc(callback: (ctx: ReducerEventContext, records: ResourceDesc[]) => void) {
    this.connection.onReducer('stage_resource_desc', callback)
  }

  removeOnStageResourceDesc(callback: (ctx: ReducerEventContext, records: ResourceDesc[]) => void) {
    this.connection.offReducer('stage_resource_desc', callback)
  }

  stageResourceGrowthRecipeDesc(records: ResourceGrowthRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageResourceGrowthRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_resource_growth_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageResourceGrowthRecipeDescFlags
    )
  }

  onStageResourceGrowthRecipeDesc(callback: (ctx: ReducerEventContext, records: ResourceGrowthRecipeDesc[]) => void) {
    this.connection.onReducer('stage_resource_growth_recipe_desc', callback)
  }

  removeOnStageResourceGrowthRecipeDesc(
    callback: (ctx: ReducerEventContext, records: ResourceGrowthRecipeDesc[]) => void
  ) {
    this.connection.offReducer('stage_resource_growth_recipe_desc', callback)
  }

  stageResourcePlacementRecipeDesc(records: ResourcePlacementRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageResourcePlacementRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_resource_placement_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageResourcePlacementRecipeDescFlags
    )
  }

  onStageResourcePlacementRecipeDesc(
    callback: (ctx: ReducerEventContext, records: ResourcePlacementRecipeDesc[]) => void
  ) {
    this.connection.onReducer('stage_resource_placement_recipe_desc', callback)
  }

  removeOnStageResourcePlacementRecipeDesc(
    callback: (ctx: ReducerEventContext, records: ResourcePlacementRecipeDesc[]) => void
  ) {
    this.connection.offReducer('stage_resource_placement_recipe_desc', callback)
  }

  stageSecondaryKnowledgeDesc(records: SecondaryKnowledgeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageSecondaryKnowledgeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_secondary_knowledge_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageSecondaryKnowledgeDescFlags
    )
  }

  onStageSecondaryKnowledgeDesc(callback: (ctx: ReducerEventContext, records: SecondaryKnowledgeDesc[]) => void) {
    this.connection.onReducer('stage_secondary_knowledge_desc', callback)
  }

  removeOnStageSecondaryKnowledgeDesc(callback: (ctx: ReducerEventContext, records: SecondaryKnowledgeDesc[]) => void) {
    this.connection.offReducer('stage_secondary_knowledge_desc', callback)
  }

  stageSkillDesc(records: SkillDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageSkillDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_skill_desc', __argsBuffer, this.setCallReducerFlags.stageSkillDescFlags)
  }

  onStageSkillDesc(callback: (ctx: ReducerEventContext, records: SkillDesc[]) => void) {
    this.connection.onReducer('stage_skill_desc', callback)
  }

  removeOnStageSkillDesc(callback: (ctx: ReducerEventContext, records: SkillDesc[]) => void) {
    this.connection.offReducer('stage_skill_desc', callback)
  }

  stageTargetingMatrixDesc(records: TargetingMatrixDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageTargetingMatrixDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_targeting_matrix_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageTargetingMatrixDescFlags
    )
  }

  onStageTargetingMatrixDesc(callback: (ctx: ReducerEventContext, records: TargetingMatrixDesc[]) => void) {
    this.connection.onReducer('stage_targeting_matrix_desc', callback)
  }

  removeOnStageTargetingMatrixDesc(callback: (ctx: ReducerEventContext, records: TargetingMatrixDesc[]) => void) {
    this.connection.offReducer('stage_targeting_matrix_desc', callback)
  }

  stageTeleportItemDesc(records: TeleportItemDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageTeleportItemDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_teleport_item_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageTeleportItemDescFlags
    )
  }

  onStageTeleportItemDesc(callback: (ctx: ReducerEventContext, records: TeleportItemDesc[]) => void) {
    this.connection.onReducer('stage_teleport_item_desc', callback)
  }

  removeOnStageTeleportItemDesc(callback: (ctx: ReducerEventContext, records: TeleportItemDesc[]) => void) {
    this.connection.offReducer('stage_teleport_item_desc', callback)
  }

  stageTerraformRecipeDesc(records: TerraformRecipeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageTerraformRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_terraform_recipe_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageTerraformRecipeDescFlags
    )
  }

  onStageTerraformRecipeDesc(callback: (ctx: ReducerEventContext, records: TerraformRecipeDesc[]) => void) {
    this.connection.onReducer('stage_terraform_recipe_desc', callback)
  }

  removeOnStageTerraformRecipeDesc(callback: (ctx: ReducerEventContext, records: TerraformRecipeDesc[]) => void) {
    this.connection.offReducer('stage_terraform_recipe_desc', callback)
  }

  stageToolDesc(records: ToolDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageToolDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_tool_desc', __argsBuffer, this.setCallReducerFlags.stageToolDescFlags)
  }

  onStageToolDesc(callback: (ctx: ReducerEventContext, records: ToolDesc[]) => void) {
    this.connection.onReducer('stage_tool_desc', callback)
  }

  removeOnStageToolDesc(callback: (ctx: ReducerEventContext, records: ToolDesc[]) => void) {
    this.connection.offReducer('stage_tool_desc', callback)
  }

  stageToolTypeDesc(records: ToolTypeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageToolTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_tool_type_desc', __argsBuffer, this.setCallReducerFlags.stageToolTypeDescFlags)
  }

  onStageToolTypeDesc(callback: (ctx: ReducerEventContext, records: ToolTypeDesc[]) => void) {
    this.connection.onReducer('stage_tool_type_desc', callback)
  }

  removeOnStageToolTypeDesc(callback: (ctx: ReducerEventContext, records: ToolTypeDesc[]) => void) {
    this.connection.offReducer('stage_tool_type_desc', callback)
  }

  stageTravelerTaskDesc(records: TravelerTaskDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageTravelerTaskDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_traveler_task_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageTravelerTaskDescFlags
    )
  }

  onStageTravelerTaskDesc(callback: (ctx: ReducerEventContext, records: TravelerTaskDesc[]) => void) {
    this.connection.onReducer('stage_traveler_task_desc', callback)
  }

  removeOnStageTravelerTaskDesc(callback: (ctx: ReducerEventContext, records: TravelerTaskDesc[]) => void) {
    this.connection.offReducer('stage_traveler_task_desc', callback)
  }

  stageTravelerTradeOrderDesc(records: TravelerTradeOrderDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageTravelerTradeOrderDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_traveler_trade_order_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageTravelerTradeOrderDescFlags
    )
  }

  onStageTravelerTradeOrderDesc(callback: (ctx: ReducerEventContext, records: TravelerTradeOrderDesc[]) => void) {
    this.connection.onReducer('stage_traveler_trade_order_desc', callback)
  }

  removeOnStageTravelerTradeOrderDesc(callback: (ctx: ReducerEventContext, records: TravelerTradeOrderDesc[]) => void) {
    this.connection.offReducer('stage_traveler_trade_order_desc', callback)
  }

  stageWallDesc(records: WallDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageWallDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_wall_desc', __argsBuffer, this.setCallReducerFlags.stageWallDescFlags)
  }

  onStageWallDesc(callback: (ctx: ReducerEventContext, records: WallDesc[]) => void) {
    this.connection.onReducer('stage_wall_desc', callback)
  }

  removeOnStageWallDesc(callback: (ctx: ReducerEventContext, records: WallDesc[]) => void) {
    this.connection.offReducer('stage_wall_desc', callback)
  }

  stageWeaponDesc(records: WeaponDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageWeaponDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer('stage_weapon_desc', __argsBuffer, this.setCallReducerFlags.stageWeaponDescFlags)
  }

  onStageWeaponDesc(callback: (ctx: ReducerEventContext, records: WeaponDesc[]) => void) {
    this.connection.onReducer('stage_weapon_desc', callback)
  }

  removeOnStageWeaponDesc(callback: (ctx: ReducerEventContext, records: WeaponDesc[]) => void) {
    this.connection.offReducer('stage_weapon_desc', callback)
  }

  stageWeaponTypeDesc(records: WeaponTypeDesc[]) {
    const __args = { records }
    let __writer = new BinaryWriter(1024)
    StageWeaponTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'stage_weapon_type_desc',
      __argsBuffer,
      this.setCallReducerFlags.stageWeaponTypeDescFlags
    )
  }

  onStageWeaponTypeDesc(callback: (ctx: ReducerEventContext, records: WeaponTypeDesc[]) => void) {
    this.connection.onReducer('stage_weapon_type_desc', callback)
  }

  removeOnStageWeaponTypeDesc(callback: (ctx: ReducerEventContext, records: WeaponTypeDesc[]) => void) {
    this.connection.offReducer('stage_weapon_type_desc', callback)
  }

  updateRoleForPlayer(playerEntityId: bigint, role: Role) {
    const __args = { playerEntityId, role }
    let __writer = new BinaryWriter(1024)
    UpdateRoleForPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'update_role_for_player',
      __argsBuffer,
      this.setCallReducerFlags.updateRoleForPlayerFlags
    )
  }

  onUpdateRoleForPlayer(callback: (ctx: ReducerEventContext, playerEntityId: bigint, role: Role) => void) {
    this.connection.onReducer('update_role_for_player', callback)
  }

  removeOnUpdateRoleForPlayer(callback: (ctx: ReducerEventContext, playerEntityId: bigint, role: Role) => void) {
    this.connection.offReducer('update_role_for_player', callback)
  }

  updateScheduledTimersFromStaticData() {
    this.connection.callReducer(
      'update_scheduled_timers_from_static_data',
      new Uint8Array(0),
      this.setCallReducerFlags.updateScheduledTimersFromStaticDataFlags
    )
  }

  onUpdateScheduledTimersFromStaticData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('update_scheduled_timers_from_static_data', callback)
  }

  removeOnUpdateScheduledTimersFromStaticData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('update_scheduled_timers_from_static_data', callback)
  }

  userModerationClearAll(request: UserModerationCreateUserPolicyRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    UserModerationClearAll.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'user_moderation_clear_all',
      __argsBuffer,
      this.setCallReducerFlags.userModerationClearAllFlags
    )
  }

  onUserModerationClearAll(
    callback: (ctx: ReducerEventContext, request: UserModerationCreateUserPolicyRequest) => void
  ) {
    this.connection.onReducer('user_moderation_clear_all', callback)
  }

  removeOnUserModerationClearAll(
    callback: (ctx: ReducerEventContext, request: UserModerationCreateUserPolicyRequest) => void
  ) {
    this.connection.offReducer('user_moderation_clear_all', callback)
  }

  userModerationCreate(request: UserModerationCreateUserPolicyRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    UserModerationCreate.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'user_moderation_create',
      __argsBuffer,
      this.setCallReducerFlags.userModerationCreateFlags
    )
  }

  onUserModerationCreate(callback: (ctx: ReducerEventContext, request: UserModerationCreateUserPolicyRequest) => void) {
    this.connection.onReducer('user_moderation_create', callback)
  }

  removeOnUserModerationCreate(
    callback: (ctx: ReducerEventContext, request: UserModerationCreateUserPolicyRequest) => void
  ) {
    this.connection.offReducer('user_moderation_create', callback)
  }

  userModerationDelete(policyEntityId: bigint) {
    const __args = { policyEntityId }
    let __writer = new BinaryWriter(1024)
    UserModerationDelete.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'user_moderation_delete',
      __argsBuffer,
      this.setCallReducerFlags.userModerationDeleteFlags
    )
  }

  onUserModerationDelete(callback: (ctx: ReducerEventContext, policyEntityId: bigint) => void) {
    this.connection.onReducer('user_moderation_delete', callback)
  }

  removeOnUserModerationDelete(callback: (ctx: ReducerEventContext, policyEntityId: bigint) => void) {
    this.connection.offReducer('user_moderation_delete', callback)
  }

  userModerationListAll(request: UserModerationCreateUserPolicyRequest) {
    const __args = { request }
    let __writer = new BinaryWriter(1024)
    UserModerationListAll.getTypeScriptAlgebraicType().serialize(__writer, __args)
    let __argsBuffer = __writer.getBuffer()
    this.connection.callReducer(
      'user_moderation_list_all',
      __argsBuffer,
      this.setCallReducerFlags.userModerationListAllFlags
    )
  }

  onUserModerationListAll(
    callback: (ctx: ReducerEventContext, request: UserModerationCreateUserPolicyRequest) => void
  ) {
    this.connection.onReducer('user_moderation_list_all', callback)
  }

  removeOnUserModerationListAll(
    callback: (ctx: ReducerEventContext, request: UserModerationCreateUserPolicyRequest) => void
  ) {
    this.connection.offReducer('user_moderation_list_all', callback)
  }
}

export class SetReducerFlags {
  adminBroadcastMsgFlags: CallReducerFlags = 'FullUpdate'
  adminBroadcastMsg(flags: CallReducerFlags) {
    this.adminBroadcastMsgFlags = flags
  }

  adminGrantShardsFlags: CallReducerFlags = 'FullUpdate'
  adminGrantShards(flags: CallReducerFlags) {
    this.adminGrantShardsFlags = flags
  }

  adminMarkUserReportAsActionedFlags: CallReducerFlags = 'FullUpdate'
  adminMarkUserReportAsActioned(flags: CallReducerFlags) {
    this.adminMarkUserReportAsActionedFlags = flags
  }

  adminNotifyPlayerFlags: CallReducerFlags = 'FullUpdate'
  adminNotifyPlayer(flags: CallReducerFlags) {
    this.adminNotifyPlayerFlags = flags
  }

  adminNotifyPlayerByIdentityFlags: CallReducerFlags = 'FullUpdate'
  adminNotifyPlayerByIdentity(flags: CallReducerFlags) {
    this.adminNotifyPlayerByIdentityFlags = flags
  }

  adminRenameEmpireFlags: CallReducerFlags = 'FullUpdate'
  adminRenameEmpire(flags: CallReducerFlags) {
    this.adminRenameEmpireFlags = flags
  }

  adminRenameEmpireEntityFlags: CallReducerFlags = 'FullUpdate'
  adminRenameEmpireEntity(flags: CallReducerFlags) {
    this.adminRenameEmpireEntityFlags = flags
  }

  adminRenameEmpireRankFlags: CallReducerFlags = 'FullUpdate'
  adminRenameEmpireRank(flags: CallReducerFlags) {
    this.adminRenameEmpireRankFlags = flags
  }

  adminRenameEmpireRankEntityFlags: CallReducerFlags = 'FullUpdate'
  adminRenameEmpireRankEntity(flags: CallReducerFlags) {
    this.adminRenameEmpireRankEntityFlags = flags
  }

  adminRenamePlayerFlags: CallReducerFlags = 'FullUpdate'
  adminRenamePlayer(flags: CallReducerFlags) {
    this.adminRenamePlayerFlags = flags
  }

  adminRenamePlayerEntityFlags: CallReducerFlags = 'FullUpdate'
  adminRenamePlayerEntity(flags: CallReducerFlags) {
    this.adminRenamePlayerEntityFlags = flags
  }

  adminSignOutAllFlags: CallReducerFlags = 'FullUpdate'
  adminSignOutAll(flags: CallReducerFlags) {
    this.adminSignOutAllFlags = flags
  }

  adminSkipQueueEntityFlags: CallReducerFlags = 'FullUpdate'
  adminSkipQueueEntity(flags: CallReducerFlags) {
    this.adminSkipQueueEntityFlags = flags
  }

  adminSkipQueueIdentityFlags: CallReducerFlags = 'FullUpdate'
  adminSkipQueueIdentity(flags: CallReducerFlags) {
    this.adminSkipQueueIdentityFlags = flags
  }

  adminSkipQueueNameFlags: CallReducerFlags = 'FullUpdate'
  adminSkipQueueName(flags: CallReducerFlags) {
    this.adminSkipQueueNameFlags = flags
  }

  adminUpdateGrantedHubItemStateFlags: CallReducerFlags = 'FullUpdate'
  adminUpdateGrantedHubItemState(flags: CallReducerFlags) {
    this.adminUpdateGrantedHubItemStateFlags = flags
  }

  adminUpdateSignInParametersFlags: CallReducerFlags = 'FullUpdate'
  adminUpdateSignInParameters(flags: CallReducerFlags) {
    this.adminUpdateSignInParametersFlags = flags
  }

  authenticateFlags: CallReducerFlags = 'FullUpdate'
  authenticate(flags: CallReducerFlags) {
    this.authenticateFlags = flags
  }

  blockIdentityFlags: CallReducerFlags = 'FullUpdate'
  blockIdentity(flags: CallReducerFlags) {
    this.blockIdentityFlags = flags
  }

  cheatEmpireSiegeAddSuppliesFlags: CallReducerFlags = 'FullUpdate'
  cheatEmpireSiegeAddSupplies(flags: CallReducerFlags) {
    this.cheatEmpireSiegeAddSuppliesFlags = flags
  }

  cheatEmpireSiegeCancelFlags: CallReducerFlags = 'FullUpdate'
  cheatEmpireSiegeCancel(flags: CallReducerFlags) {
    this.cheatEmpireSiegeCancelFlags = flags
  }

  cheatPlayerSetNameFlags: CallReducerFlags = 'FullUpdate'
  cheatPlayerSetName(flags: CallReducerFlags) {
    this.cheatPlayerSetNameFlags = flags
  }

  cheatShardsGrantFlags: CallReducerFlags = 'FullUpdate'
  cheatShardsGrant(flags: CallReducerFlags) {
    this.cheatShardsGrantFlags = flags
  }

  clearStagedStaticDataFlags: CallReducerFlags = 'FullUpdate'
  clearStagedStaticData(flags: CallReducerFlags) {
    this.clearStagedStaticDataFlags = flags
  }

  commitStagedStaticDataFlags: CallReducerFlags = 'FullUpdate'
  commitStagedStaticData(flags: CallReducerFlags) {
    this.commitStagedStaticDataFlags = flags
  }

  currentVersionFlags: CallReducerFlags = 'FullUpdate'
  currentVersion(flags: CallReducerFlags) {
    this.currentVersionFlags = flags
  }

  empireChangeEmblemFlags: CallReducerFlags = 'FullUpdate'
  empireChangeEmblem(flags: CallReducerFlags) {
    this.empireChangeEmblemFlags = flags
  }

  empireCraftSuppliesFlags: CallReducerFlags = 'FullUpdate'
  empireCraftSupplies(flags: CallReducerFlags) {
    this.empireCraftSuppliesFlags = flags
  }

  empireCraftSuppliesScheduledFlags: CallReducerFlags = 'FullUpdate'
  empireCraftSuppliesScheduled(flags: CallReducerFlags) {
    this.empireCraftSuppliesScheduledFlags = flags
  }

  empireDecayAgentLoopFlags: CallReducerFlags = 'FullUpdate'
  empireDecayAgentLoop(flags: CallReducerFlags) {
    this.empireDecayAgentLoopFlags = flags
  }

  empireDismantleFlags: CallReducerFlags = 'FullUpdate'
  empireDismantle(flags: CallReducerFlags) {
    this.empireDismantleFlags = flags
  }

  empireDonateShardsFlags: CallReducerFlags = 'FullUpdate'
  empireDonateShards(flags: CallReducerFlags) {
    this.empireDonateShardsFlags = flags
  }

  empireFormFlags: CallReducerFlags = 'FullUpdate'
  empireForm(flags: CallReducerFlags) {
    this.empireFormFlags = flags
  }

  empireLeaveFlags: CallReducerFlags = 'FullUpdate'
  empireLeave(flags: CallReducerFlags) {
    this.empireLeaveFlags = flags
  }

  empireMarkForExpansionFlags: CallReducerFlags = 'FullUpdate'
  empireMarkForExpansion(flags: CallReducerFlags) {
    this.empireMarkForExpansionFlags = flags
  }

  empireMarkForSiegeFlags: CallReducerFlags = 'FullUpdate'
  empireMarkForSiege(flags: CallReducerFlags) {
    this.empireMarkForSiegeFlags = flags
  }

  empirePlayerJoinFlags: CallReducerFlags = 'FullUpdate'
  empirePlayerJoin(flags: CallReducerFlags) {
    this.empirePlayerJoinFlags = flags
  }

  empirePlayerLeaveFlags: CallReducerFlags = 'FullUpdate'
  empirePlayerLeave(flags: CallReducerFlags) {
    this.empirePlayerLeaveFlags = flags
  }

  empireSetDirectiveMessageFlags: CallReducerFlags = 'FullUpdate'
  empireSetDirectiveMessage(flags: CallReducerFlags) {
    this.empireSetDirectiveMessageFlags = flags
  }

  empireSetNobilityThresholdFlags: CallReducerFlags = 'FullUpdate'
  empireSetNobilityThreshold(flags: CallReducerFlags) {
    this.empireSetNobilityThresholdFlags = flags
  }

  empireSetPlayerRankFlags: CallReducerFlags = 'FullUpdate'
  empireSetPlayerRank(flags: CallReducerFlags) {
    this.empireSetPlayerRankFlags = flags
  }

  empireSetRankTitleFlags: CallReducerFlags = 'FullUpdate'
  empireSetRankTitle(flags: CallReducerFlags) {
    this.empireSetRankTitleFlags = flags
  }

  empireSiegeAgentLoopFlags: CallReducerFlags = 'FullUpdate'
  empireSiegeAgentLoop(flags: CallReducerFlags) {
    this.empireSiegeAgentLoopFlags = flags
  }

  empireSubmitFlags: CallReducerFlags = 'FullUpdate'
  empireSubmit(flags: CallReducerFlags) {
    this.empireSubmitFlags = flags
  }

  empireTransferEmperorshipFlags: CallReducerFlags = 'FullUpdate'
  empireTransferEmperorship(flags: CallReducerFlags) {
    this.empireTransferEmperorshipFlags = flags
  }

  empireUpdatePermissionsFlags: CallReducerFlags = 'FullUpdate'
  empireUpdatePermissions(flags: CallReducerFlags) {
    this.empireUpdatePermissionsFlags = flags
  }

  importAchievementDescFlags: CallReducerFlags = 'FullUpdate'
  importAchievementDesc(flags: CallReducerFlags) {
    this.importAchievementDescFlags = flags
  }

  importActiveBuffStateFlags: CallReducerFlags = 'FullUpdate'
  importActiveBuffState(flags: CallReducerFlags) {
    this.importActiveBuffStateFlags = flags
  }

  importAdminBroadcastFlags: CallReducerFlags = 'FullUpdate'
  importAdminBroadcast(flags: CallReducerFlags) {
    this.importAdminBroadcastFlags = flags
  }

  importAlertDescFlags: CallReducerFlags = 'FullUpdate'
  importAlertDesc(flags: CallReducerFlags) {
    this.importAlertDescFlags = flags
  }

  importAlertStateFlags: CallReducerFlags = 'FullUpdate'
  importAlertState(flags: CallReducerFlags) {
    this.importAlertStateFlags = flags
  }

  importAttackOutcomeStateFlags: CallReducerFlags = 'FullUpdate'
  importAttackOutcomeState(flags: CallReducerFlags) {
    this.importAttackOutcomeStateFlags = flags
  }

  importBiomeDescFlags: CallReducerFlags = 'FullUpdate'
  importBiomeDesc(flags: CallReducerFlags) {
    this.importBiomeDescFlags = flags
  }

  importBuffDescFlags: CallReducerFlags = 'FullUpdate'
  importBuffDesc(flags: CallReducerFlags) {
    this.importBuffDescFlags = flags
  }

  importBuffTypeDescFlags: CallReducerFlags = 'FullUpdate'
  importBuffTypeDesc(flags: CallReducerFlags) {
    this.importBuffTypeDescFlags = flags
  }

  importBuildingClaimDescFlags: CallReducerFlags = 'FullUpdate'
  importBuildingClaimDesc(flags: CallReducerFlags) {
    this.importBuildingClaimDescFlags = flags
  }

  importBuildingDescFlags: CallReducerFlags = 'FullUpdate'
  importBuildingDesc(flags: CallReducerFlags) {
    this.importBuildingDescFlags = flags
  }

  importBuildingPortalDescFlags: CallReducerFlags = 'FullUpdate'
  importBuildingPortalDesc(flags: CallReducerFlags) {
    this.importBuildingPortalDescFlags = flags
  }

  importBuildingRepairsDescFlags: CallReducerFlags = 'FullUpdate'
  importBuildingRepairsDesc(flags: CallReducerFlags) {
    this.importBuildingRepairsDescFlags = flags
  }

  importBuildingSpawnDescFlags: CallReducerFlags = 'FullUpdate'
  importBuildingSpawnDesc(flags: CallReducerFlags) {
    this.importBuildingSpawnDescFlags = flags
  }

  importBuildingStateFlags: CallReducerFlags = 'FullUpdate'
  importBuildingState(flags: CallReducerFlags) {
    this.importBuildingStateFlags = flags
  }

  importBuildingTypeDescFlags: CallReducerFlags = 'FullUpdate'
  importBuildingTypeDesc(flags: CallReducerFlags) {
    this.importBuildingTypeDescFlags = flags
  }

  importCargoDescFlags: CallReducerFlags = 'FullUpdate'
  importCargoDesc(flags: CallReducerFlags) {
    this.importCargoDescFlags = flags
  }

  importCharacterStatDescFlags: CallReducerFlags = 'FullUpdate'
  importCharacterStatDesc(flags: CallReducerFlags) {
    this.importCharacterStatDescFlags = flags
  }

  importCharacterStatsStateFlags: CallReducerFlags = 'FullUpdate'
  importCharacterStatsState(flags: CallReducerFlags) {
    this.importCharacterStatsStateFlags = flags
  }

  importChatMessageStateFlags: CallReducerFlags = 'FullUpdate'
  importChatMessageState(flags: CallReducerFlags) {
    this.importChatMessageStateFlags = flags
  }

  importChestRarityDescFlags: CallReducerFlags = 'FullUpdate'
  importChestRarityDesc(flags: CallReducerFlags) {
    this.importChestRarityDescFlags = flags
  }

  importClaimLocalStateFlags: CallReducerFlags = 'FullUpdate'
  importClaimLocalState(flags: CallReducerFlags) {
    this.importClaimLocalStateFlags = flags
  }

  importClaimRecruitmentStateFlags: CallReducerFlags = 'FullUpdate'
  importClaimRecruitmentState(flags: CallReducerFlags) {
    this.importClaimRecruitmentStateFlags = flags
  }

  importClaimStateFlags: CallReducerFlags = 'FullUpdate'
  importClaimState(flags: CallReducerFlags) {
    this.importClaimStateFlags = flags
  }

  importClaimTechDescFlags: CallReducerFlags = 'FullUpdate'
  importClaimTechDesc(flags: CallReducerFlags) {
    this.importClaimTechDescFlags = flags
  }

  importClaimTechStateFlags: CallReducerFlags = 'FullUpdate'
  importClaimTechState(flags: CallReducerFlags) {
    this.importClaimTechStateFlags = flags
  }

  importClaimTileCostFlags: CallReducerFlags = 'FullUpdate'
  importClaimTileCost(flags: CallReducerFlags) {
    this.importClaimTileCostFlags = flags
  }

  importClaimTileStateFlags: CallReducerFlags = 'FullUpdate'
  importClaimTileState(flags: CallReducerFlags) {
    this.importClaimTileStateFlags = flags
  }

  importClimbRequirementDescFlags: CallReducerFlags = 'FullUpdate'
  importClimbRequirementDesc(flags: CallReducerFlags) {
    this.importClimbRequirementDescFlags = flags
  }

  importClothingDescFlags: CallReducerFlags = 'FullUpdate'
  importClothingDesc(flags: CallReducerFlags) {
    this.importClothingDescFlags = flags
  }

  importCollectibleDescFlags: CallReducerFlags = 'FullUpdate'
  importCollectibleDesc(flags: CallReducerFlags) {
    this.importCollectibleDescFlags = flags
  }

  importCombatActionDescFlags: CallReducerFlags = 'FullUpdate'
  importCombatActionDesc(flags: CallReducerFlags) {
    this.importCombatActionDescFlags = flags
  }

  importCombatStateFlags: CallReducerFlags = 'FullUpdate'
  importCombatState(flags: CallReducerFlags) {
    this.importCombatStateFlags = flags
  }

  importConfigFlags: CallReducerFlags = 'FullUpdate'
  importConfig(flags: CallReducerFlags) {
    this.importConfigFlags = flags
  }

  importConstructionRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  importConstructionRecipeDesc(flags: CallReducerFlags) {
    this.importConstructionRecipeDescFlags = flags
  }

  importCraftingRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  importCraftingRecipeDesc(flags: CallReducerFlags) {
    this.importCraftingRecipeDescFlags = flags
  }

  importDeconstructionRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  importDeconstructionRecipeDesc(flags: CallReducerFlags) {
    this.importDeconstructionRecipeDescFlags = flags
  }

  importDeployableDescFlags: CallReducerFlags = 'FullUpdate'
  importDeployableDesc(flags: CallReducerFlags) {
    this.importDeployableDescFlags = flags
  }

  importDeployableStateFlags: CallReducerFlags = 'FullUpdate'
  importDeployableState(flags: CallReducerFlags) {
    this.importDeployableStateFlags = flags
  }

  importDimensionDescriptionStateFlags: CallReducerFlags = 'FullUpdate'
  importDimensionDescriptionState(flags: CallReducerFlags) {
    this.importDimensionDescriptionStateFlags = flags
  }

  importDimensionNetworkDescriptionStateFlags: CallReducerFlags = 'FullUpdate'
  importDimensionNetworkDescriptionState(flags: CallReducerFlags) {
    this.importDimensionNetworkDescriptionStateFlags = flags
  }

  importDistantVisibleEntityDescFlags: CallReducerFlags = 'FullUpdate'
  importDistantVisibleEntityDesc(flags: CallReducerFlags) {
    this.importDistantVisibleEntityDescFlags = flags
  }

  importDroppedInventoryStateFlags: CallReducerFlags = 'FullUpdate'
  importDroppedInventoryState(flags: CallReducerFlags) {
    this.importDroppedInventoryStateFlags = flags
  }

  importElevatorDescFlags: CallReducerFlags = 'FullUpdate'
  importElevatorDesc(flags: CallReducerFlags) {
    this.importElevatorDescFlags = flags
  }

  importEmoteDescFlags: CallReducerFlags = 'FullUpdate'
  importEmoteDesc(flags: CallReducerFlags) {
    this.importEmoteDescFlags = flags
  }

  importEmpireColorsDescFlags: CallReducerFlags = 'FullUpdate'
  importEmpireColorsDesc(flags: CallReducerFlags) {
    this.importEmpireColorsDescFlags = flags
  }

  importEmpireNotificationDescFlags: CallReducerFlags = 'FullUpdate'
  importEmpireNotificationDesc(flags: CallReducerFlags) {
    this.importEmpireNotificationDescFlags = flags
  }

  importEmpireRankDescFlags: CallReducerFlags = 'FullUpdate'
  importEmpireRankDesc(flags: CallReducerFlags) {
    this.importEmpireRankDescFlags = flags
  }

  importEmpireSuppliesDescFlags: CallReducerFlags = 'FullUpdate'
  importEmpireSuppliesDesc(flags: CallReducerFlags) {
    this.importEmpireSuppliesDescFlags = flags
  }

  importEmpireTerritoryDescFlags: CallReducerFlags = 'FullUpdate'
  importEmpireTerritoryDesc(flags: CallReducerFlags) {
    this.importEmpireTerritoryDescFlags = flags
  }

  importEnemyAiParamsDescFlags: CallReducerFlags = 'FullUpdate'
  importEnemyAiParamsDesc(flags: CallReducerFlags) {
    this.importEnemyAiParamsDescFlags = flags
  }

  importEnemyDescFlags: CallReducerFlags = 'FullUpdate'
  importEnemyDesc(flags: CallReducerFlags) {
    this.importEnemyDescFlags = flags
  }

  importEnemyStateFlags: CallReducerFlags = 'FullUpdate'
  importEnemyState(flags: CallReducerFlags) {
    this.importEnemyStateFlags = flags
  }

  importEnvironmentDebuffDescFlags: CallReducerFlags = 'FullUpdate'
  importEnvironmentDebuffDesc(flags: CallReducerFlags) {
    this.importEnvironmentDebuffDescFlags = flags
  }

  importEquipmentDescFlags: CallReducerFlags = 'FullUpdate'
  importEquipmentDesc(flags: CallReducerFlags) {
    this.importEquipmentDescFlags = flags
  }

  importEquipmentStateFlags: CallReducerFlags = 'FullUpdate'
  importEquipmentState(flags: CallReducerFlags) {
    this.importEquipmentStateFlags = flags
  }

  importExperienceStateFlags: CallReducerFlags = 'FullUpdate'
  importExperienceState(flags: CallReducerFlags) {
    this.importExperienceStateFlags = flags
  }

  importExplorationChunksStateFlags: CallReducerFlags = 'FullUpdate'
  importExplorationChunksState(flags: CallReducerFlags) {
    this.importExplorationChunksStateFlags = flags
  }

  importExtractionRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  importExtractionRecipeDesc(flags: CallReducerFlags) {
    this.importExtractionRecipeDescFlags = flags
  }

  importFoodDescFlags: CallReducerFlags = 'FullUpdate'
  importFoodDesc(flags: CallReducerFlags) {
    this.importFoodDescFlags = flags
  }

  importFootprintTileStateFlags: CallReducerFlags = 'FullUpdate'
  importFootprintTileState(flags: CallReducerFlags) {
    this.importFootprintTileStateFlags = flags
  }

  importGateDescFlags: CallReducerFlags = 'FullUpdate'
  importGateDesc(flags: CallReducerFlags) {
    this.importGateDescFlags = flags
  }

  importGlobalsFlags: CallReducerFlags = 'FullUpdate'
  importGlobals(flags: CallReducerFlags) {
    this.importGlobalsFlags = flags
  }

  importGrowthStateFlags: CallReducerFlags = 'FullUpdate'
  importGrowthState(flags: CallReducerFlags) {
    this.importGrowthStateFlags = flags
  }

  importHealthStateFlags: CallReducerFlags = 'FullUpdate'
  importHealthState(flags: CallReducerFlags) {
    this.importHealthStateFlags = flags
  }

  importHerdCacheFlags: CallReducerFlags = 'FullUpdate'
  importHerdCache(flags: CallReducerFlags) {
    this.importHerdCacheFlags = flags
  }

  importHexiteExchangeEntryDescFlags: CallReducerFlags = 'FullUpdate'
  importHexiteExchangeEntryDesc(flags: CallReducerFlags) {
    this.importHexiteExchangeEntryDescFlags = flags
  }

  importIdentityRoleFlags: CallReducerFlags = 'FullUpdate'
  importIdentityRole(flags: CallReducerFlags) {
    this.importIdentityRoleFlags = flags
  }

  importInteriorCollapseTriggerStateFlags: CallReducerFlags = 'FullUpdate'
  importInteriorCollapseTriggerState(flags: CallReducerFlags) {
    this.importInteriorCollapseTriggerStateFlags = flags
  }

  importInteriorInstanceDescFlags: CallReducerFlags = 'FullUpdate'
  importInteriorInstanceDesc(flags: CallReducerFlags) {
    this.importInteriorInstanceDescFlags = flags
  }

  importInteriorNetworkDescFlags: CallReducerFlags = 'FullUpdate'
  importInteriorNetworkDesc(flags: CallReducerFlags) {
    this.importInteriorNetworkDescFlags = flags
  }

  importInteriorPortalConnectionsDescFlags: CallReducerFlags = 'FullUpdate'
  importInteriorPortalConnectionsDesc(flags: CallReducerFlags) {
    this.importInteriorPortalConnectionsDescFlags = flags
  }

  importInteriorShapeDescFlags: CallReducerFlags = 'FullUpdate'
  importInteriorShapeDesc(flags: CallReducerFlags) {
    this.importInteriorShapeDescFlags = flags
  }

  importInteriorSpawnDescFlags: CallReducerFlags = 'FullUpdate'
  importInteriorSpawnDesc(flags: CallReducerFlags) {
    this.importInteriorSpawnDescFlags = flags
  }

  importInventoryStateFlags: CallReducerFlags = 'FullUpdate'
  importInventoryState(flags: CallReducerFlags) {
    this.importInventoryStateFlags = flags
  }

  importItemConversionRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  importItemConversionRecipeDesc(flags: CallReducerFlags) {
    this.importItemConversionRecipeDescFlags = flags
  }

  importItemDescFlags: CallReducerFlags = 'FullUpdate'
  importItemDesc(flags: CallReducerFlags) {
    this.importItemDescFlags = flags
  }

  importItemListDescFlags: CallReducerFlags = 'FullUpdate'
  importItemListDesc(flags: CallReducerFlags) {
    this.importItemListDescFlags = flags
  }

  importKnowledgeAchievementStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeAchievementState(flags: CallReducerFlags) {
    this.importKnowledgeAchievementStateFlags = flags
  }

  importKnowledgeBattleActionStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeBattleActionState(flags: CallReducerFlags) {
    this.importKnowledgeBattleActionStateFlags = flags
  }

  importKnowledgeBuildingStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeBuildingState(flags: CallReducerFlags) {
    this.importKnowledgeBuildingStateFlags = flags
  }

  importKnowledgeCargoStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeCargoState(flags: CallReducerFlags) {
    this.importKnowledgeCargoStateFlags = flags
  }

  importKnowledgeConstructionStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeConstructionState(flags: CallReducerFlags) {
    this.importKnowledgeConstructionStateFlags = flags
  }

  importKnowledgeCraftStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeCraftState(flags: CallReducerFlags) {
    this.importKnowledgeCraftStateFlags = flags
  }

  importKnowledgeDeployableStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeDeployableState(flags: CallReducerFlags) {
    this.importKnowledgeDeployableStateFlags = flags
  }

  importKnowledgeEnemyStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeEnemyState(flags: CallReducerFlags) {
    this.importKnowledgeEnemyStateFlags = flags
  }

  importKnowledgeExtractStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeExtractState(flags: CallReducerFlags) {
    this.importKnowledgeExtractStateFlags = flags
  }

  importKnowledgeItemStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeItemState(flags: CallReducerFlags) {
    this.importKnowledgeItemStateFlags = flags
  }

  importKnowledgeLoreStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeLoreState(flags: CallReducerFlags) {
    this.importKnowledgeLoreStateFlags = flags
  }

  importKnowledgeNpcStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeNpcState(flags: CallReducerFlags) {
    this.importKnowledgeNpcStateFlags = flags
  }

  importKnowledgePavingStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgePavingState(flags: CallReducerFlags) {
    this.importKnowledgePavingStateFlags = flags
  }

  importKnowledgeResourcePlacementStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeResourcePlacementState(flags: CallReducerFlags) {
    this.importKnowledgeResourcePlacementStateFlags = flags
  }

  importKnowledgeResourceStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeResourceState(flags: CallReducerFlags) {
    this.importKnowledgeResourceStateFlags = flags
  }

  importKnowledgeRuinsStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeRuinsState(flags: CallReducerFlags) {
    this.importKnowledgeRuinsStateFlags = flags
  }

  importKnowledgeScrollDescFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeScrollDesc(flags: CallReducerFlags) {
    this.importKnowledgeScrollDescFlags = flags
  }

  importKnowledgeScrollTypeDescFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeScrollTypeDesc(flags: CallReducerFlags) {
    this.importKnowledgeScrollTypeDescFlags = flags
  }

  importKnowledgeSecondaryStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeSecondaryState(flags: CallReducerFlags) {
    this.importKnowledgeSecondaryStateFlags = flags
  }

  importKnowledgeStatModifierDescFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeStatModifierDesc(flags: CallReducerFlags) {
    this.importKnowledgeStatModifierDescFlags = flags
  }

  importKnowledgeVaultStateFlags: CallReducerFlags = 'FullUpdate'
  importKnowledgeVaultState(flags: CallReducerFlags) {
    this.importKnowledgeVaultStateFlags = flags
  }

  importLocationStateFlags: CallReducerFlags = 'FullUpdate'
  importLocationState(flags: CallReducerFlags) {
    this.importLocationStateFlags = flags
  }

  importLootChestDescFlags: CallReducerFlags = 'FullUpdate'
  importLootChestDesc(flags: CallReducerFlags) {
    this.importLootChestDescFlags = flags
  }

  importLootChestStateFlags: CallReducerFlags = 'FullUpdate'
  importLootChestState(flags: CallReducerFlags) {
    this.importLootChestStateFlags = flags
  }

  importLootRarityDescFlags: CallReducerFlags = 'FullUpdate'
  importLootRarityDesc(flags: CallReducerFlags) {
    this.importLootRarityDescFlags = flags
  }

  importLootTableDescFlags: CallReducerFlags = 'FullUpdate'
  importLootTableDesc(flags: CallReducerFlags) {
    this.importLootTableDescFlags = flags
  }

  importMobileEntityStateFlags: CallReducerFlags = 'FullUpdate'
  importMobileEntityState(flags: CallReducerFlags) {
    this.importMobileEntityStateFlags = flags
  }

  importMountingStateFlags: CallReducerFlags = 'FullUpdate'
  importMountingState(flags: CallReducerFlags) {
    this.importMountingStateFlags = flags
  }

  importNpcDescFlags: CallReducerFlags = 'FullUpdate'
  importNpcDesc(flags: CallReducerFlags) {
    this.importNpcDescFlags = flags
  }

  importNpcStateFlags: CallReducerFlags = 'FullUpdate'
  importNpcState(flags: CallReducerFlags) {
    this.importNpcStateFlags = flags
  }

  importOnboardingRewardDescFlags: CallReducerFlags = 'FullUpdate'
  importOnboardingRewardDesc(flags: CallReducerFlags) {
    this.importOnboardingRewardDescFlags = flags
  }

  importOnboardingStateFlags: CallReducerFlags = 'FullUpdate'
  importOnboardingState(flags: CallReducerFlags) {
    this.importOnboardingStateFlags = flags
  }

  importParametersDescFlags: CallReducerFlags = 'FullUpdate'
  importParametersDesc(flags: CallReducerFlags) {
    this.importParametersDescFlags = flags
  }

  importPathfindingDescFlags: CallReducerFlags = 'FullUpdate'
  importPathfindingDesc(flags: CallReducerFlags) {
    this.importPathfindingDescFlags = flags
  }

  importPavedTileStateFlags: CallReducerFlags = 'FullUpdate'
  importPavedTileState(flags: CallReducerFlags) {
    this.importPavedTileStateFlags = flags
  }

  importPavingTileDescFlags: CallReducerFlags = 'FullUpdate'
  importPavingTileDesc(flags: CallReducerFlags) {
    this.importPavingTileDescFlags = flags
  }

  importPlayerActionDescFlags: CallReducerFlags = 'FullUpdate'
  importPlayerActionDesc(flags: CallReducerFlags) {
    this.importPlayerActionDescFlags = flags
  }

  importPlayerActionStateFlags: CallReducerFlags = 'FullUpdate'
  importPlayerActionState(flags: CallReducerFlags) {
    this.importPlayerActionStateFlags = flags
  }

  importPlayerPrefsStateFlags: CallReducerFlags = 'FullUpdate'
  importPlayerPrefsState(flags: CallReducerFlags) {
    this.importPlayerPrefsStateFlags = flags
  }

  importPlayerStateFlags: CallReducerFlags = 'FullUpdate'
  importPlayerState(flags: CallReducerFlags) {
    this.importPlayerStateFlags = flags
  }

  importPlayerVoteStateFlags: CallReducerFlags = 'FullUpdate'
  importPlayerVoteState(flags: CallReducerFlags) {
    this.importPlayerVoteStateFlags = flags
  }

  importPortalStateFlags: CallReducerFlags = 'FullUpdate'
  importPortalState(flags: CallReducerFlags) {
    this.importPortalStateFlags = flags
  }

  importPrivateParametersDescFlags: CallReducerFlags = 'FullUpdate'
  importPrivateParametersDesc(flags: CallReducerFlags) {
    this.importPrivateParametersDescFlags = flags
  }

  importProgressiveActionStateFlags: CallReducerFlags = 'FullUpdate'
  importProgressiveActionState(flags: CallReducerFlags) {
    this.importProgressiveActionStateFlags = flags
  }

  importProjectSiteStateFlags: CallReducerFlags = 'FullUpdate'
  importProjectSiteState(flags: CallReducerFlags) {
    this.importProjectSiteStateFlags = flags
  }

  importRegionConnectionInfoFlags: CallReducerFlags = 'FullUpdate'
  importRegionConnectionInfo(flags: CallReducerFlags) {
    this.importRegionConnectionInfoFlags = flags
  }

  importRegionSignInParametersFlags: CallReducerFlags = 'FullUpdate'
  importRegionSignInParameters(flags: CallReducerFlags) {
    this.importRegionSignInParametersFlags = flags
  }

  importRentStateFlags: CallReducerFlags = 'FullUpdate'
  importRentState(flags: CallReducerFlags) {
    this.importRentStateFlags = flags
  }

  importResourceClumpDescFlags: CallReducerFlags = 'FullUpdate'
  importResourceClumpDesc(flags: CallReducerFlags) {
    this.importResourceClumpDescFlags = flags
  }

  importResourceCountFlags: CallReducerFlags = 'FullUpdate'
  importResourceCount(flags: CallReducerFlags) {
    this.importResourceCountFlags = flags
  }

  importResourceDescFlags: CallReducerFlags = 'FullUpdate'
  importResourceDesc(flags: CallReducerFlags) {
    this.importResourceDescFlags = flags
  }

  importResourceGrowthRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  importResourceGrowthRecipeDesc(flags: CallReducerFlags) {
    this.importResourceGrowthRecipeDescFlags = flags
  }

  importResourcePlacementRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  importResourcePlacementRecipeDesc(flags: CallReducerFlags) {
    this.importResourcePlacementRecipeDescFlags = flags
  }

  importResourceStateFlags: CallReducerFlags = 'FullUpdate'
  importResourceState(flags: CallReducerFlags) {
    this.importResourceStateFlags = flags
  }

  importSatiationStateFlags: CallReducerFlags = 'FullUpdate'
  importSatiationState(flags: CallReducerFlags) {
    this.importSatiationStateFlags = flags
  }

  importSecondaryKnowledgeDescFlags: CallReducerFlags = 'FullUpdate'
  importSecondaryKnowledgeDesc(flags: CallReducerFlags) {
    this.importSecondaryKnowledgeDescFlags = flags
  }

  importServerIdentityFlags: CallReducerFlags = 'FullUpdate'
  importServerIdentity(flags: CallReducerFlags) {
    this.importServerIdentityFlags = flags
  }

  importSignedInPlayerStateFlags: CallReducerFlags = 'FullUpdate'
  importSignedInPlayerState(flags: CallReducerFlags) {
    this.importSignedInPlayerStateFlags = flags
  }

  importSkillDescFlags: CallReducerFlags = 'FullUpdate'
  importSkillDesc(flags: CallReducerFlags) {
    this.importSkillDescFlags = flags
  }

  importStaminaStateFlags: CallReducerFlags = 'FullUpdate'
  importStaminaState(flags: CallReducerFlags) {
    this.importStaminaStateFlags = flags
  }

  importTargetStateFlags: CallReducerFlags = 'FullUpdate'
  importTargetState(flags: CallReducerFlags) {
    this.importTargetStateFlags = flags
  }

  importTargetableStateFlags: CallReducerFlags = 'FullUpdate'
  importTargetableState(flags: CallReducerFlags) {
    this.importTargetableStateFlags = flags
  }

  importTargetingMatrixDescFlags: CallReducerFlags = 'FullUpdate'
  importTargetingMatrixDesc(flags: CallReducerFlags) {
    this.importTargetingMatrixDescFlags = flags
  }

  importTeleportItemDescFlags: CallReducerFlags = 'FullUpdate'
  importTeleportItemDesc(flags: CallReducerFlags) {
    this.importTeleportItemDescFlags = flags
  }

  importTerraformRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  importTerraformRecipeDesc(flags: CallReducerFlags) {
    this.importTerraformRecipeDescFlags = flags
  }

  importTerrainChunkStateFlags: CallReducerFlags = 'FullUpdate'
  importTerrainChunkState(flags: CallReducerFlags) {
    this.importTerrainChunkStateFlags = flags
  }

  importToolDescFlags: CallReducerFlags = 'FullUpdate'
  importToolDesc(flags: CallReducerFlags) {
    this.importToolDescFlags = flags
  }

  importToolTypeDescFlags: CallReducerFlags = 'FullUpdate'
  importToolTypeDesc(flags: CallReducerFlags) {
    this.importToolTypeDescFlags = flags
  }

  importTradeOrderStateFlags: CallReducerFlags = 'FullUpdate'
  importTradeOrderState(flags: CallReducerFlags) {
    this.importTradeOrderStateFlags = flags
  }

  importTradeSessionStateFlags: CallReducerFlags = 'FullUpdate'
  importTradeSessionState(flags: CallReducerFlags) {
    this.importTradeSessionStateFlags = flags
  }

  importTravelerTaskDescFlags: CallReducerFlags = 'FullUpdate'
  importTravelerTaskDesc(flags: CallReducerFlags) {
    this.importTravelerTaskDescFlags = flags
  }

  importTravelerTradeOrderDescFlags: CallReducerFlags = 'FullUpdate'
  importTravelerTradeOrderDesc(flags: CallReducerFlags) {
    this.importTravelerTradeOrderDescFlags = flags
  }

  importUserModerationStateFlags: CallReducerFlags = 'FullUpdate'
  importUserModerationState(flags: CallReducerFlags) {
    this.importUserModerationStateFlags = flags
  }

  importUserStateFlags: CallReducerFlags = 'FullUpdate'
  importUserState(flags: CallReducerFlags) {
    this.importUserStateFlags = flags
  }

  importVaultStateFlags: CallReducerFlags = 'FullUpdate'
  importVaultState(flags: CallReducerFlags) {
    this.importVaultStateFlags = flags
  }

  importWallDescFlags: CallReducerFlags = 'FullUpdate'
  importWallDesc(flags: CallReducerFlags) {
    this.importWallDescFlags = flags
  }

  importWeaponDescFlags: CallReducerFlags = 'FullUpdate'
  importWeaponDesc(flags: CallReducerFlags) {
    this.importWeaponDescFlags = flags
  }

  importWeaponTypeDescFlags: CallReducerFlags = 'FullUpdate'
  importWeaponTypeDesc(flags: CallReducerFlags) {
    this.importWeaponTypeDescFlags = flags
  }

  importWorldRegionNameStateFlags: CallReducerFlags = 'FullUpdate'
  importWorldRegionNameState(flags: CallReducerFlags) {
    this.importWorldRegionNameStateFlags = flags
  }

  importWorldRegionStateFlags: CallReducerFlags = 'FullUpdate'
  importWorldRegionState(flags: CallReducerFlags) {
    this.importWorldRegionStateFlags = flags
  }

  loadConfigFlags: CallReducerFlags = 'FullUpdate'
  loadConfig(flags: CallReducerFlags) {
    this.loadConfigFlags = flags
  }

  logEmpireLeaderboardFlags: CallReducerFlags = 'FullUpdate'
  logEmpireLeaderboard(flags: CallReducerFlags) {
    this.logEmpireLeaderboardFlags = flags
  }

  logPlayerWithFlags: CallReducerFlags = 'FullUpdate'
  logPlayerWith(flags: CallReducerFlags) {
    this.logPlayerWithFlags = flags
  }

  onInterModuleMessageProcessedFlags: CallReducerFlags = 'FullUpdate'
  onInterModuleMessageProcessed(flags: CallReducerFlags) {
    this.onInterModuleMessageProcessedFlags = flags
  }

  playerClaimDailyShardsFlags: CallReducerFlags = 'FullUpdate'
  playerClaimDailyShards(flags: CallReducerFlags) {
    this.playerClaimDailyShardsFlags = flags
  }

  playerCreateFlags: CallReducerFlags = 'FullUpdate'
  playerCreate(flags: CallReducerFlags) {
    this.playerCreateFlags = flags
  }

  playerDismissNotificationFlags: CallReducerFlags = 'FullUpdate'
  playerDismissNotification(flags: CallReducerFlags) {
    this.playerDismissNotificationFlags = flags
  }

  playerNotificationEventReducerFlags: CallReducerFlags = 'FullUpdate'
  playerNotificationEventReducer(flags: CallReducerFlags) {
    this.playerNotificationEventReducerFlags = flags
  }

  playerSetNameFlags: CallReducerFlags = 'FullUpdate'
  playerSetName(flags: CallReducerFlags) {
    this.playerSetNameFlags = flags
  }

  playerVoteAnswerFlags: CallReducerFlags = 'FullUpdate'
  playerVoteAnswer(flags: CallReducerFlags) {
    this.playerVoteAnswerFlags = flags
  }

  playerVoteConcludeFlags: CallReducerFlags = 'FullUpdate'
  playerVoteConclude(flags: CallReducerFlags) {
    this.playerVoteConcludeFlags = flags
  }

  processInterModuleMessageFlags: CallReducerFlags = 'FullUpdate'
  processInterModuleMessage(flags: CallReducerFlags) {
    this.processInterModuleMessageFlags = flags
  }

  setRoleForIdentityFlags: CallReducerFlags = 'FullUpdate'
  setRoleForIdentity(flags: CallReducerFlags) {
    this.setRoleForIdentityFlags = flags
  }

  signInFlags: CallReducerFlags = 'FullUpdate'
  signIn(flags: CallReducerFlags) {
    this.signInFlags = flags
  }

  stageAchievementDescFlags: CallReducerFlags = 'FullUpdate'
  stageAchievementDesc(flags: CallReducerFlags) {
    this.stageAchievementDescFlags = flags
  }

  stageAlertDescFlags: CallReducerFlags = 'FullUpdate'
  stageAlertDesc(flags: CallReducerFlags) {
    this.stageAlertDescFlags = flags
  }

  stageBiomeDescFlags: CallReducerFlags = 'FullUpdate'
  stageBiomeDesc(flags: CallReducerFlags) {
    this.stageBiomeDescFlags = flags
  }

  stageBuffDescFlags: CallReducerFlags = 'FullUpdate'
  stageBuffDesc(flags: CallReducerFlags) {
    this.stageBuffDescFlags = flags
  }

  stageBuffTypeDescFlags: CallReducerFlags = 'FullUpdate'
  stageBuffTypeDesc(flags: CallReducerFlags) {
    this.stageBuffTypeDescFlags = flags
  }

  stageBuildingClaimDescFlags: CallReducerFlags = 'FullUpdate'
  stageBuildingClaimDesc(flags: CallReducerFlags) {
    this.stageBuildingClaimDescFlags = flags
  }

  stageBuildingDescFlags: CallReducerFlags = 'FullUpdate'
  stageBuildingDesc(flags: CallReducerFlags) {
    this.stageBuildingDescFlags = flags
  }

  stageBuildingPortalDescFlags: CallReducerFlags = 'FullUpdate'
  stageBuildingPortalDesc(flags: CallReducerFlags) {
    this.stageBuildingPortalDescFlags = flags
  }

  stageBuildingRepairsDescFlags: CallReducerFlags = 'FullUpdate'
  stageBuildingRepairsDesc(flags: CallReducerFlags) {
    this.stageBuildingRepairsDescFlags = flags
  }

  stageBuildingSpawnDescFlags: CallReducerFlags = 'FullUpdate'
  stageBuildingSpawnDesc(flags: CallReducerFlags) {
    this.stageBuildingSpawnDescFlags = flags
  }

  stageBuildingTypeDescFlags: CallReducerFlags = 'FullUpdate'
  stageBuildingTypeDesc(flags: CallReducerFlags) {
    this.stageBuildingTypeDescFlags = flags
  }

  stageCargoDescFlags: CallReducerFlags = 'FullUpdate'
  stageCargoDesc(flags: CallReducerFlags) {
    this.stageCargoDescFlags = flags
  }

  stageCharacterStatDescFlags: CallReducerFlags = 'FullUpdate'
  stageCharacterStatDesc(flags: CallReducerFlags) {
    this.stageCharacterStatDescFlags = flags
  }

  stageChestRarityDescFlags: CallReducerFlags = 'FullUpdate'
  stageChestRarityDesc(flags: CallReducerFlags) {
    this.stageChestRarityDescFlags = flags
  }

  stageClaimTechDescFlags: CallReducerFlags = 'FullUpdate'
  stageClaimTechDesc(flags: CallReducerFlags) {
    this.stageClaimTechDescFlags = flags
  }

  stageClaimTileCostFlags: CallReducerFlags = 'FullUpdate'
  stageClaimTileCost(flags: CallReducerFlags) {
    this.stageClaimTileCostFlags = flags
  }

  stageClimbRequirementDescFlags: CallReducerFlags = 'FullUpdate'
  stageClimbRequirementDesc(flags: CallReducerFlags) {
    this.stageClimbRequirementDescFlags = flags
  }

  stageClothingDescFlags: CallReducerFlags = 'FullUpdate'
  stageClothingDesc(flags: CallReducerFlags) {
    this.stageClothingDescFlags = flags
  }

  stageCollectibleDescFlags: CallReducerFlags = 'FullUpdate'
  stageCollectibleDesc(flags: CallReducerFlags) {
    this.stageCollectibleDescFlags = flags
  }

  stageCombatActionDescFlags: CallReducerFlags = 'FullUpdate'
  stageCombatActionDesc(flags: CallReducerFlags) {
    this.stageCombatActionDescFlags = flags
  }

  stageConstructionRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  stageConstructionRecipeDesc(flags: CallReducerFlags) {
    this.stageConstructionRecipeDescFlags = flags
  }

  stageCraftingRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  stageCraftingRecipeDesc(flags: CallReducerFlags) {
    this.stageCraftingRecipeDescFlags = flags
  }

  stageDeconstructionRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  stageDeconstructionRecipeDesc(flags: CallReducerFlags) {
    this.stageDeconstructionRecipeDescFlags = flags
  }

  stageDeployableDescFlags: CallReducerFlags = 'FullUpdate'
  stageDeployableDesc(flags: CallReducerFlags) {
    this.stageDeployableDescFlags = flags
  }

  stageDistantVisibleEntityDescFlags: CallReducerFlags = 'FullUpdate'
  stageDistantVisibleEntityDesc(flags: CallReducerFlags) {
    this.stageDistantVisibleEntityDescFlags = flags
  }

  stageElevatorDescFlags: CallReducerFlags = 'FullUpdate'
  stageElevatorDesc(flags: CallReducerFlags) {
    this.stageElevatorDescFlags = flags
  }

  stageEmoteDescFlags: CallReducerFlags = 'FullUpdate'
  stageEmoteDesc(flags: CallReducerFlags) {
    this.stageEmoteDescFlags = flags
  }

  stageEmpireColorsDescFlags: CallReducerFlags = 'FullUpdate'
  stageEmpireColorsDesc(flags: CallReducerFlags) {
    this.stageEmpireColorsDescFlags = flags
  }

  stageEmpireIconDescFlags: CallReducerFlags = 'FullUpdate'
  stageEmpireIconDesc(flags: CallReducerFlags) {
    this.stageEmpireIconDescFlags = flags
  }

  stageEmpireNotificationDescFlags: CallReducerFlags = 'FullUpdate'
  stageEmpireNotificationDesc(flags: CallReducerFlags) {
    this.stageEmpireNotificationDescFlags = flags
  }

  stageEmpireRankDescFlags: CallReducerFlags = 'FullUpdate'
  stageEmpireRankDesc(flags: CallReducerFlags) {
    this.stageEmpireRankDescFlags = flags
  }

  stageEmpireSuppliesDescFlags: CallReducerFlags = 'FullUpdate'
  stageEmpireSuppliesDesc(flags: CallReducerFlags) {
    this.stageEmpireSuppliesDescFlags = flags
  }

  stageEmpireTerritoryDescFlags: CallReducerFlags = 'FullUpdate'
  stageEmpireTerritoryDesc(flags: CallReducerFlags) {
    this.stageEmpireTerritoryDescFlags = flags
  }

  stageEnemyAiParamsDescFlags: CallReducerFlags = 'FullUpdate'
  stageEnemyAiParamsDesc(flags: CallReducerFlags) {
    this.stageEnemyAiParamsDescFlags = flags
  }

  stageEnemyDescFlags: CallReducerFlags = 'FullUpdate'
  stageEnemyDesc(flags: CallReducerFlags) {
    this.stageEnemyDescFlags = flags
  }

  stageEnvironmentDebuffDescFlags: CallReducerFlags = 'FullUpdate'
  stageEnvironmentDebuffDesc(flags: CallReducerFlags) {
    this.stageEnvironmentDebuffDescFlags = flags
  }

  stageEquipmentDescFlags: CallReducerFlags = 'FullUpdate'
  stageEquipmentDesc(flags: CallReducerFlags) {
    this.stageEquipmentDescFlags = flags
  }

  stageExtractionRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  stageExtractionRecipeDesc(flags: CallReducerFlags) {
    this.stageExtractionRecipeDescFlags = flags
  }

  stageFoodDescFlags: CallReducerFlags = 'FullUpdate'
  stageFoodDesc(flags: CallReducerFlags) {
    this.stageFoodDescFlags = flags
  }

  stageGateDescFlags: CallReducerFlags = 'FullUpdate'
  stageGateDesc(flags: CallReducerFlags) {
    this.stageGateDescFlags = flags
  }

  stageHexiteExchangeEntryDescFlags: CallReducerFlags = 'FullUpdate'
  stageHexiteExchangeEntryDesc(flags: CallReducerFlags) {
    this.stageHexiteExchangeEntryDescFlags = flags
  }

  stageInteriorEnvironmentDescFlags: CallReducerFlags = 'FullUpdate'
  stageInteriorEnvironmentDesc(flags: CallReducerFlags) {
    this.stageInteriorEnvironmentDescFlags = flags
  }

  stageInteriorInstanceDescFlags: CallReducerFlags = 'FullUpdate'
  stageInteriorInstanceDesc(flags: CallReducerFlags) {
    this.stageInteriorInstanceDescFlags = flags
  }

  stageInteriorNetworkDescFlags: CallReducerFlags = 'FullUpdate'
  stageInteriorNetworkDesc(flags: CallReducerFlags) {
    this.stageInteriorNetworkDescFlags = flags
  }

  stageInteriorPortalConnectionsDescFlags: CallReducerFlags = 'FullUpdate'
  stageInteriorPortalConnectionsDesc(flags: CallReducerFlags) {
    this.stageInteriorPortalConnectionsDescFlags = flags
  }

  stageInteriorShapeDescFlags: CallReducerFlags = 'FullUpdate'
  stageInteriorShapeDesc(flags: CallReducerFlags) {
    this.stageInteriorShapeDescFlags = flags
  }

  stageInteriorSpawnDescFlags: CallReducerFlags = 'FullUpdate'
  stageInteriorSpawnDesc(flags: CallReducerFlags) {
    this.stageInteriorSpawnDescFlags = flags
  }

  stageItemConversionRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  stageItemConversionRecipeDesc(flags: CallReducerFlags) {
    this.stageItemConversionRecipeDescFlags = flags
  }

  stageItemDescFlags: CallReducerFlags = 'FullUpdate'
  stageItemDesc(flags: CallReducerFlags) {
    this.stageItemDescFlags = flags
  }

  stageItemListDescFlags: CallReducerFlags = 'FullUpdate'
  stageItemListDesc(flags: CallReducerFlags) {
    this.stageItemListDescFlags = flags
  }

  stageKnowledgeScrollDescFlags: CallReducerFlags = 'FullUpdate'
  stageKnowledgeScrollDesc(flags: CallReducerFlags) {
    this.stageKnowledgeScrollDescFlags = flags
  }

  stageKnowledgeScrollTypeDescFlags: CallReducerFlags = 'FullUpdate'
  stageKnowledgeScrollTypeDesc(flags: CallReducerFlags) {
    this.stageKnowledgeScrollTypeDescFlags = flags
  }

  stageKnowledgeStatModifierDescFlags: CallReducerFlags = 'FullUpdate'
  stageKnowledgeStatModifierDesc(flags: CallReducerFlags) {
    this.stageKnowledgeStatModifierDescFlags = flags
  }

  stageLootChestDescFlags: CallReducerFlags = 'FullUpdate'
  stageLootChestDesc(flags: CallReducerFlags) {
    this.stageLootChestDescFlags = flags
  }

  stageLootRarityDescFlags: CallReducerFlags = 'FullUpdate'
  stageLootRarityDesc(flags: CallReducerFlags) {
    this.stageLootRarityDescFlags = flags
  }

  stageLootTableDescFlags: CallReducerFlags = 'FullUpdate'
  stageLootTableDesc(flags: CallReducerFlags) {
    this.stageLootTableDescFlags = flags
  }

  stageNpcDescFlags: CallReducerFlags = 'FullUpdate'
  stageNpcDesc(flags: CallReducerFlags) {
    this.stageNpcDescFlags = flags
  }

  stageOnboardingRewardDescFlags: CallReducerFlags = 'FullUpdate'
  stageOnboardingRewardDesc(flags: CallReducerFlags) {
    this.stageOnboardingRewardDescFlags = flags
  }

  stageParametersDescFlags: CallReducerFlags = 'FullUpdate'
  stageParametersDesc(flags: CallReducerFlags) {
    this.stageParametersDescFlags = flags
  }

  stagePathfindingDescFlags: CallReducerFlags = 'FullUpdate'
  stagePathfindingDesc(flags: CallReducerFlags) {
    this.stagePathfindingDescFlags = flags
  }

  stagePavingTileDescFlags: CallReducerFlags = 'FullUpdate'
  stagePavingTileDesc(flags: CallReducerFlags) {
    this.stagePavingTileDescFlags = flags
  }

  stagePillarShapingDescFlags: CallReducerFlags = 'FullUpdate'
  stagePillarShapingDesc(flags: CallReducerFlags) {
    this.stagePillarShapingDescFlags = flags
  }

  stagePlayerActionDescFlags: CallReducerFlags = 'FullUpdate'
  stagePlayerActionDesc(flags: CallReducerFlags) {
    this.stagePlayerActionDescFlags = flags
  }

  stagePlayerHousingDescFlags: CallReducerFlags = 'FullUpdate'
  stagePlayerHousingDesc(flags: CallReducerFlags) {
    this.stagePlayerHousingDescFlags = flags
  }

  stagePrivateParametersDescFlags: CallReducerFlags = 'FullUpdate'
  stagePrivateParametersDesc(flags: CallReducerFlags) {
    this.stagePrivateParametersDescFlags = flags
  }

  stageReservedNameDescFlags: CallReducerFlags = 'FullUpdate'
  stageReservedNameDesc(flags: CallReducerFlags) {
    this.stageReservedNameDescFlags = flags
  }

  stageResourceClumpDescFlags: CallReducerFlags = 'FullUpdate'
  stageResourceClumpDesc(flags: CallReducerFlags) {
    this.stageResourceClumpDescFlags = flags
  }

  stageResourceDescFlags: CallReducerFlags = 'FullUpdate'
  stageResourceDesc(flags: CallReducerFlags) {
    this.stageResourceDescFlags = flags
  }

  stageResourceGrowthRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  stageResourceGrowthRecipeDesc(flags: CallReducerFlags) {
    this.stageResourceGrowthRecipeDescFlags = flags
  }

  stageResourcePlacementRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  stageResourcePlacementRecipeDesc(flags: CallReducerFlags) {
    this.stageResourcePlacementRecipeDescFlags = flags
  }

  stageSecondaryKnowledgeDescFlags: CallReducerFlags = 'FullUpdate'
  stageSecondaryKnowledgeDesc(flags: CallReducerFlags) {
    this.stageSecondaryKnowledgeDescFlags = flags
  }

  stageSkillDescFlags: CallReducerFlags = 'FullUpdate'
  stageSkillDesc(flags: CallReducerFlags) {
    this.stageSkillDescFlags = flags
  }

  stageTargetingMatrixDescFlags: CallReducerFlags = 'FullUpdate'
  stageTargetingMatrixDesc(flags: CallReducerFlags) {
    this.stageTargetingMatrixDescFlags = flags
  }

  stageTeleportItemDescFlags: CallReducerFlags = 'FullUpdate'
  stageTeleportItemDesc(flags: CallReducerFlags) {
    this.stageTeleportItemDescFlags = flags
  }

  stageTerraformRecipeDescFlags: CallReducerFlags = 'FullUpdate'
  stageTerraformRecipeDesc(flags: CallReducerFlags) {
    this.stageTerraformRecipeDescFlags = flags
  }

  stageToolDescFlags: CallReducerFlags = 'FullUpdate'
  stageToolDesc(flags: CallReducerFlags) {
    this.stageToolDescFlags = flags
  }

  stageToolTypeDescFlags: CallReducerFlags = 'FullUpdate'
  stageToolTypeDesc(flags: CallReducerFlags) {
    this.stageToolTypeDescFlags = flags
  }

  stageTravelerTaskDescFlags: CallReducerFlags = 'FullUpdate'
  stageTravelerTaskDesc(flags: CallReducerFlags) {
    this.stageTravelerTaskDescFlags = flags
  }

  stageTravelerTradeOrderDescFlags: CallReducerFlags = 'FullUpdate'
  stageTravelerTradeOrderDesc(flags: CallReducerFlags) {
    this.stageTravelerTradeOrderDescFlags = flags
  }

  stageWallDescFlags: CallReducerFlags = 'FullUpdate'
  stageWallDesc(flags: CallReducerFlags) {
    this.stageWallDescFlags = flags
  }

  stageWeaponDescFlags: CallReducerFlags = 'FullUpdate'
  stageWeaponDesc(flags: CallReducerFlags) {
    this.stageWeaponDescFlags = flags
  }

  stageWeaponTypeDescFlags: CallReducerFlags = 'FullUpdate'
  stageWeaponTypeDesc(flags: CallReducerFlags) {
    this.stageWeaponTypeDescFlags = flags
  }

  updateRoleForPlayerFlags: CallReducerFlags = 'FullUpdate'
  updateRoleForPlayer(flags: CallReducerFlags) {
    this.updateRoleForPlayerFlags = flags
  }

  updateScheduledTimersFromStaticDataFlags: CallReducerFlags = 'FullUpdate'
  updateScheduledTimersFromStaticData(flags: CallReducerFlags) {
    this.updateScheduledTimersFromStaticDataFlags = flags
  }

  userModerationClearAllFlags: CallReducerFlags = 'FullUpdate'
  userModerationClearAll(flags: CallReducerFlags) {
    this.userModerationClearAllFlags = flags
  }

  userModerationCreateFlags: CallReducerFlags = 'FullUpdate'
  userModerationCreate(flags: CallReducerFlags) {
    this.userModerationCreateFlags = flags
  }

  userModerationDeleteFlags: CallReducerFlags = 'FullUpdate'
  userModerationDelete(flags: CallReducerFlags) {
    this.userModerationDeleteFlags = flags
  }

  userModerationListAllFlags: CallReducerFlags = 'FullUpdate'
  userModerationListAll(flags: CallReducerFlags) {
    this.userModerationListAllFlags = flags
  }
}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get aIDebugState(): AIDebugStateTableHandle {
    return new AIDebugStateTableHandle(
      this.connection.clientCache.getOrCreateTable<AiDebugState>(REMOTE_MODULE.tables.a_i_debug_state)
    )
  }

  get achievementDesc(): AchievementDescTableHandle {
    return new AchievementDescTableHandle(
      this.connection.clientCache.getOrCreateTable<AchievementDesc>(REMOTE_MODULE.tables.achievement_desc)
    )
  }

  get actionState(): ActionStateTableHandle {
    return new ActionStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ActionState>(REMOTE_MODULE.tables.action_state)
    )
  }

  get activeBuffState(): ActiveBuffStateTableHandle {
    return new ActiveBuffStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ActiveBuffState>(REMOTE_MODULE.tables.active_buff_state)
    )
  }

  get adminBroadcast(): AdminBroadcastTableHandle {
    return new AdminBroadcastTableHandle(
      this.connection.clientCache.getOrCreateTable<AdminBroadcast>(REMOTE_MODULE.tables.admin_broadcast)
    )
  }

  get alertDesc(): AlertDescTableHandle {
    return new AlertDescTableHandle(
      this.connection.clientCache.getOrCreateTable<AlertDesc>(REMOTE_MODULE.tables.alert_desc)
    )
  }

  get alertState(): AlertStateTableHandle {
    return new AlertStateTableHandle(
      this.connection.clientCache.getOrCreateTable<AlertState>(REMOTE_MODULE.tables.alert_state)
    )
  }

  get attachedHerdsState(): AttachedHerdsStateTableHandle {
    return new AttachedHerdsStateTableHandle(
      this.connection.clientCache.getOrCreateTable<AttachedHerdsState>(REMOTE_MODULE.tables.attached_herds_state)
    )
  }

  get attackOutcomeState(): AttackOutcomeStateTableHandle {
    return new AttackOutcomeStateTableHandle(
      this.connection.clientCache.getOrCreateTable<AttackOutcomeState>(REMOTE_MODULE.tables.attack_outcome_state)
    )
  }

  get autoClaimState(): AutoClaimStateTableHandle {
    return new AutoClaimStateTableHandle(
      this.connection.clientCache.getOrCreateTable<AutoClaimState>(REMOTE_MODULE.tables.auto_claim_state)
    )
  }

  get barterStallState(): BarterStallStateTableHandle {
    return new BarterStallStateTableHandle(
      this.connection.clientCache.getOrCreateTable<BarterStallState>(REMOTE_MODULE.tables.barter_stall_state)
    )
  }

  get biomeDesc(): BiomeDescTableHandle {
    return new BiomeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<BiomeDesc>(REMOTE_MODULE.tables.biome_desc)
    )
  }

  get blockedIdentity(): BlockedIdentityTableHandle {
    return new BlockedIdentityTableHandle(
      this.connection.clientCache.getOrCreateTable<BlockedIdentity>(REMOTE_MODULE.tables.blocked_identity)
    )
  }

  get buffDesc(): BuffDescTableHandle {
    return new BuffDescTableHandle(
      this.connection.clientCache.getOrCreateTable<BuffDesc>(REMOTE_MODULE.tables.buff_desc)
    )
  }

  get buffTypeDesc(): BuffTypeDescTableHandle {
    return new BuffTypeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<BuffTypeDesc>(REMOTE_MODULE.tables.buff_type_desc)
    )
  }

  get buildingClaimDesc(): BuildingClaimDescTableHandle {
    return new BuildingClaimDescTableHandle(
      this.connection.clientCache.getOrCreateTable<BuildingClaimDesc>(REMOTE_MODULE.tables.building_claim_desc)
    )
  }

  get buildingDesc(): BuildingDescTableHandle {
    return new BuildingDescTableHandle(
      this.connection.clientCache.getOrCreateTable<BuildingDesc>(REMOTE_MODULE.tables.building_desc)
    )
  }

  get buildingFunctionTypeMappingDesc(): BuildingFunctionTypeMappingDescTableHandle {
    return new BuildingFunctionTypeMappingDescTableHandle(
      this.connection.clientCache.getOrCreateTable<BuildingFunctionTypeMappingDesc>(
        REMOTE_MODULE.tables.building_function_type_mapping_desc
      )
    )
  }

  get buildingNicknameState(): BuildingNicknameStateTableHandle {
    return new BuildingNicknameStateTableHandle(
      this.connection.clientCache.getOrCreateTable<BuildingNicknameState>(REMOTE_MODULE.tables.building_nickname_state)
    )
  }

  get buildingPortalDesc(): BuildingPortalDescTableHandle {
    return new BuildingPortalDescTableHandle(
      this.connection.clientCache.getOrCreateTable<BuildingPortalDesc>(REMOTE_MODULE.tables.building_portal_desc)
    )
  }

  get buildingRepairsDesc(): BuildingRepairsDescTableHandle {
    return new BuildingRepairsDescTableHandle(
      this.connection.clientCache.getOrCreateTable<BuildingRepairsDesc>(REMOTE_MODULE.tables.building_repairs_desc)
    )
  }

  get buildingSpawnDesc(): BuildingSpawnDescTableHandle {
    return new BuildingSpawnDescTableHandle(
      this.connection.clientCache.getOrCreateTable<BuildingSpawnDesc>(REMOTE_MODULE.tables.building_spawn_desc)
    )
  }

  get buildingState(): BuildingStateTableHandle {
    return new BuildingStateTableHandle(
      this.connection.clientCache.getOrCreateTable<BuildingState>(REMOTE_MODULE.tables.building_state)
    )
  }

  get buildingTypeDesc(): BuildingTypeDescTableHandle {
    return new BuildingTypeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<BuildingTypeDesc>(REMOTE_MODULE.tables.building_type_desc)
    )
  }

  get buyOrderState(): BuyOrderStateTableHandle {
    return new BuyOrderStateTableHandle(
      this.connection.clientCache.getOrCreateTable<AuctionListingState>(REMOTE_MODULE.tables.buy_order_state)
    )
  }

  get cargoDesc(): CargoDescTableHandle {
    return new CargoDescTableHandle(
      this.connection.clientCache.getOrCreateTable<CargoDesc>(REMOTE_MODULE.tables.cargo_desc)
    )
  }

  get characterStatDesc(): CharacterStatDescTableHandle {
    return new CharacterStatDescTableHandle(
      this.connection.clientCache.getOrCreateTable<CharacterStatDesc>(REMOTE_MODULE.tables.character_stat_desc)
    )
  }

  get characterStatsState(): CharacterStatsStateTableHandle {
    return new CharacterStatsStateTableHandle(
      this.connection.clientCache.getOrCreateTable<CharacterStatsState>(REMOTE_MODULE.tables.character_stats_state)
    )
  }

  get chatMessageState(): ChatMessageStateTableHandle {
    return new ChatMessageStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ChatMessageState>(REMOTE_MODULE.tables.chat_message_state)
    )
  }

  get chestRarityDesc(): ChestRarityDescTableHandle {
    return new ChestRarityDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ChestRarityDesc>(REMOTE_MODULE.tables.chest_rarity_desc)
    )
  }

  get claimLocalState(): ClaimLocalStateTableHandle {
    return new ClaimLocalStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ClaimLocalState>(REMOTE_MODULE.tables.claim_local_state)
    )
  }

  get claimMemberState(): ClaimMemberStateTableHandle {
    return new ClaimMemberStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ClaimMemberState>(REMOTE_MODULE.tables.claim_member_state)
    )
  }

  get claimRecruitmentState(): ClaimRecruitmentStateTableHandle {
    return new ClaimRecruitmentStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ClaimRecruitmentState>(REMOTE_MODULE.tables.claim_recruitment_state)
    )
  }

  get claimState(): ClaimStateTableHandle {
    return new ClaimStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ClaimState>(REMOTE_MODULE.tables.claim_state)
    )
  }

  get claimTechDesc(): ClaimTechDescTableHandle {
    return new ClaimTechDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ClaimTechDesc>(REMOTE_MODULE.tables.claim_tech_desc)
    )
  }

  get claimTechState(): ClaimTechStateTableHandle {
    return new ClaimTechStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ClaimTechState>(REMOTE_MODULE.tables.claim_tech_state)
    )
  }

  get claimTileCost(): ClaimTileCostTableHandle {
    return new ClaimTileCostTableHandle(
      this.connection.clientCache.getOrCreateTable<ClaimTileCost>(REMOTE_MODULE.tables.claim_tile_cost)
    )
  }

  get claimTileState(): ClaimTileStateTableHandle {
    return new ClaimTileStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ClaimTileState>(REMOTE_MODULE.tables.claim_tile_state)
    )
  }

  get climbRequirementDesc(): ClimbRequirementDescTableHandle {
    return new ClimbRequirementDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ClimbRequirementDesc>(REMOTE_MODULE.tables.climb_requirement_desc)
    )
  }

  get closedListingState(): ClosedListingStateTableHandle {
    return new ClosedListingStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ClosedListingState>(REMOTE_MODULE.tables.closed_listing_state)
    )
  }

  get clothingDesc(): ClothingDescTableHandle {
    return new ClothingDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ClothingDesc>(REMOTE_MODULE.tables.clothing_desc)
    )
  }

  get collectibleDesc(): CollectibleDescTableHandle {
    return new CollectibleDescTableHandle(
      this.connection.clientCache.getOrCreateTable<CollectibleDesc>(REMOTE_MODULE.tables.collectible_desc)
    )
  }

  get combatActionDesc(): CombatActionDescTableHandle {
    return new CombatActionDescTableHandle(
      this.connection.clientCache.getOrCreateTable<CombatActionDesc>(REMOTE_MODULE.tables.combat_action_desc)
    )
  }

  get combatState(): CombatStateTableHandle {
    return new CombatStateTableHandle(
      this.connection.clientCache.getOrCreateTable<CombatState>(REMOTE_MODULE.tables.combat_state)
    )
  }

  get config(): ConfigTableHandle {
    return new ConfigTableHandle(this.connection.clientCache.getOrCreateTable<Config>(REMOTE_MODULE.tables.config))
  }

  get constructionRecipeDesc(): ConstructionRecipeDescTableHandle {
    return new ConstructionRecipeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ConstructionRecipeDesc>(
        REMOTE_MODULE.tables.construction_recipe_desc
      )
    )
  }

  get craftingRecipeDesc(): CraftingRecipeDescTableHandle {
    return new CraftingRecipeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<CraftingRecipeDesc>(REMOTE_MODULE.tables.crafting_recipe_desc)
    )
  }

  get deconstructionRecipeDesc(): DeconstructionRecipeDescTableHandle {
    return new DeconstructionRecipeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<DeconstructionRecipeDesc>(
        REMOTE_MODULE.tables.deconstruction_recipe_desc
      )
    )
  }

  get deployableCollectibleState(): DeployableCollectibleStateTableHandle {
    return new DeployableCollectibleStateTableHandle(
      this.connection.clientCache.getOrCreateTable<DeployableCollectibleState>(
        REMOTE_MODULE.tables.deployable_collectible_state
      )
    )
  }

  get deployableDesc(): DeployableDescTableHandle {
    return new DeployableDescTableHandle(
      this.connection.clientCache.getOrCreateTable<DeployableDesc>(REMOTE_MODULE.tables.deployable_desc)
    )
  }

  get deployableState(): DeployableStateTableHandle {
    return new DeployableStateTableHandle(
      this.connection.clientCache.getOrCreateTable<DeployableState>(REMOTE_MODULE.tables.deployable_state)
    )
  }

  get dimensionDescriptionState(): DimensionDescriptionStateTableHandle {
    return new DimensionDescriptionStateTableHandle(
      this.connection.clientCache.getOrCreateTable<DimensionDescriptionState>(
        REMOTE_MODULE.tables.dimension_description_state
      )
    )
  }

  get dimensionNetworkState(): DimensionNetworkStateTableHandle {
    return new DimensionNetworkStateTableHandle(
      this.connection.clientCache.getOrCreateTable<DimensionNetworkState>(REMOTE_MODULE.tables.dimension_network_state)
    )
  }

  get distantVisibleEntity(): DistantVisibleEntityTableHandle {
    return new DistantVisibleEntityTableHandle(
      this.connection.clientCache.getOrCreateTable<DistantVisibleEntity>(REMOTE_MODULE.tables.distant_visible_entity)
    )
  }

  get distantVisibleEntityDesc(): DistantVisibleEntityDescTableHandle {
    return new DistantVisibleEntityDescTableHandle(
      this.connection.clientCache.getOrCreateTable<DistantVisibleEntityDesc>(
        REMOTE_MODULE.tables.distant_visible_entity_desc
      )
    )
  }

  get droppedInventoryState(): DroppedInventoryStateTableHandle {
    return new DroppedInventoryStateTableHandle(
      this.connection.clientCache.getOrCreateTable<DroppedInventoryState>(REMOTE_MODULE.tables.dropped_inventory_state)
    )
  }

  get duelState(): DuelStateTableHandle {
    return new DuelStateTableHandle(
      this.connection.clientCache.getOrCreateTable<DuelState>(REMOTE_MODULE.tables.duel_state)
    )
  }

  get elevatorDesc(): ElevatorDescTableHandle {
    return new ElevatorDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ElevatorDesc>(REMOTE_MODULE.tables.elevator_desc)
    )
  }

  get emoteDesc(): EmoteDescTableHandle {
    return new EmoteDescTableHandle(
      this.connection.clientCache.getOrCreateTable<EmoteDesc>(REMOTE_MODULE.tables.emote_desc)
    )
  }

  get empireChunkState(): EmpireChunkStateTableHandle {
    return new EmpireChunkStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireChunkState>(REMOTE_MODULE.tables.empire_chunk_state)
    )
  }

  get empireColorDesc(): EmpireColorDescTableHandle {
    return new EmpireColorDescTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireColorDesc>(REMOTE_MODULE.tables.empire_color_desc)
    )
  }

  get empireCraftSuppliesTimer(): EmpireCraftSuppliesTimerTableHandle {
    return new EmpireCraftSuppliesTimerTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireCraftSuppliesTimer>(
        REMOTE_MODULE.tables.empire_craft_supplies_timer
      )
    )
  }

  get empireDecayLoopTimer(): EmpireDecayLoopTimerTableHandle {
    return new EmpireDecayLoopTimerTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireDecayLoopTimer>(REMOTE_MODULE.tables.empire_decay_loop_timer)
    )
  }

  get empireDirectiveState(): EmpireDirectiveStateTableHandle {
    return new EmpireDirectiveStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireDirectiveState>(REMOTE_MODULE.tables.empire_directive_state)
    )
  }

  get empireEmblemState(): EmpireEmblemStateTableHandle {
    return new EmpireEmblemStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireEmblemState>(REMOTE_MODULE.tables.empire_emblem_state)
    )
  }

  get empireExpansionState(): EmpireExpansionStateTableHandle {
    return new EmpireExpansionStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireExpansionState>(REMOTE_MODULE.tables.empire_expansion_state)
    )
  }

  get empireFoundryState(): EmpireFoundryStateTableHandle {
    return new EmpireFoundryStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireFoundryState>(REMOTE_MODULE.tables.empire_foundry_state)
    )
  }

  get empireIconDesc(): EmpireIconDescTableHandle {
    return new EmpireIconDescTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireIconDesc>(REMOTE_MODULE.tables.empire_icon_desc)
    )
  }

  get empireLogState(): EmpireLogStateTableHandle {
    return new EmpireLogStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireLogState>(REMOTE_MODULE.tables.empire_log_state)
    )
  }

  get empireNodeSiegeState(): EmpireNodeSiegeStateTableHandle {
    return new EmpireNodeSiegeStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireNodeSiegeState>(REMOTE_MODULE.tables.empire_node_siege_state)
    )
  }

  get empireNodeState(): EmpireNodeStateTableHandle {
    return new EmpireNodeStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireNodeState>(REMOTE_MODULE.tables.empire_node_state)
    )
  }

  get empireNotificationDesc(): EmpireNotificationDescTableHandle {
    return new EmpireNotificationDescTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireNotificationDesc>(
        REMOTE_MODULE.tables.empire_notification_desc
      )
    )
  }

  get empireNotificationState(): EmpireNotificationStateTableHandle {
    return new EmpireNotificationStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireNotificationState>(
        REMOTE_MODULE.tables.empire_notification_state
      )
    )
  }

  get empirePlayerDataState(): EmpirePlayerDataStateTableHandle {
    return new EmpirePlayerDataStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpirePlayerDataState>(REMOTE_MODULE.tables.empire_player_data_state)
    )
  }

  get empirePlayerLogState(): EmpirePlayerLogStateTableHandle {
    return new EmpirePlayerLogStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpirePlayerLogState>(REMOTE_MODULE.tables.empire_player_log_state)
    )
  }

  get empireRankDesc(): EmpireRankDescTableHandle {
    return new EmpireRankDescTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireRankDesc>(REMOTE_MODULE.tables.empire_rank_desc)
    )
  }

  get empireRankState(): EmpireRankStateTableHandle {
    return new EmpireRankStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireRankState>(REMOTE_MODULE.tables.empire_rank_state)
    )
  }

  get empireSettlementState(): EmpireSettlementStateTableHandle {
    return new EmpireSettlementStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireSettlementState>(REMOTE_MODULE.tables.empire_settlement_state)
    )
  }

  get empireSiegeEngineState(): EmpireSiegeEngineStateTableHandle {
    return new EmpireSiegeEngineStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireSiegeEngineState>(
        REMOTE_MODULE.tables.empire_siege_engine_state
      )
    )
  }

  get empireSiegeLoopTimer(): EmpireSiegeLoopTimerTableHandle {
    return new EmpireSiegeLoopTimerTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireSiegeLoopTimer>(REMOTE_MODULE.tables.empire_siege_loop_timer)
    )
  }

  get empireState(): EmpireStateTableHandle {
    return new EmpireStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireState>(REMOTE_MODULE.tables.empire_state)
    )
  }

  get empireSuppliesDesc(): EmpireSuppliesDescTableHandle {
    return new EmpireSuppliesDescTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireSuppliesDesc>(REMOTE_MODULE.tables.empire_supplies_desc)
    )
  }

  get empireTerritoryDesc(): EmpireTerritoryDescTableHandle {
    return new EmpireTerritoryDescTableHandle(
      this.connection.clientCache.getOrCreateTable<EmpireTerritoryDesc>(REMOTE_MODULE.tables.empire_territory_desc)
    )
  }

  get enemyAiParamsDesc(): EnemyAiParamsDescTableHandle {
    return new EnemyAiParamsDescTableHandle(
      this.connection.clientCache.getOrCreateTable<EnemyAiParamsDesc>(REMOTE_MODULE.tables.enemy_ai_params_desc)
    )
  }

  get enemyDesc(): EnemyDescTableHandle {
    return new EnemyDescTableHandle(
      this.connection.clientCache.getOrCreateTable<EnemyDesc>(REMOTE_MODULE.tables.enemy_desc)
    )
  }

  get enemyMobMonitorState(): EnemyMobMonitorStateTableHandle {
    return new EnemyMobMonitorStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EnemyMobMonitorState>(REMOTE_MODULE.tables.enemy_mob_monitor_state)
    )
  }

  get enemyState(): EnemyStateTableHandle {
    return new EnemyStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EnemyState>(REMOTE_MODULE.tables.enemy_state)
    )
  }

  get environmentDebuffDesc(): EnvironmentDebuffDescTableHandle {
    return new EnvironmentDebuffDescTableHandle(
      this.connection.clientCache.getOrCreateTable<EnvironmentDebuffDesc>(REMOTE_MODULE.tables.environment_debuff_desc)
    )
  }

  get equipmentDesc(): EquipmentDescTableHandle {
    return new EquipmentDescTableHandle(
      this.connection.clientCache.getOrCreateTable<EquipmentDesc>(REMOTE_MODULE.tables.equipment_desc)
    )
  }

  get equipmentState(): EquipmentStateTableHandle {
    return new EquipmentStateTableHandle(
      this.connection.clientCache.getOrCreateTable<EquipmentState>(REMOTE_MODULE.tables.equipment_state)
    )
  }

  get experienceState(): ExperienceStateTableHandle {
    return new ExperienceStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ExperienceState>(REMOTE_MODULE.tables.experience_state)
    )
  }

  get explorationChunksState(): ExplorationChunksStateTableHandle {
    return new ExplorationChunksStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ExplorationChunksState>(
        REMOTE_MODULE.tables.exploration_chunks_state
      )
    )
  }

  get extractOutcomeState(): ExtractOutcomeStateTableHandle {
    return new ExtractOutcomeStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ExtractOutcomeState>(REMOTE_MODULE.tables.extract_outcome_state)
    )
  }

  get extractionRecipeDesc(): ExtractionRecipeDescTableHandle {
    return new ExtractionRecipeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ExtractionRecipeDesc>(REMOTE_MODULE.tables.extraction_recipe_desc)
    )
  }

  get foodDesc(): FoodDescTableHandle {
    return new FoodDescTableHandle(
      this.connection.clientCache.getOrCreateTable<FoodDesc>(REMOTE_MODULE.tables.food_desc)
    )
  }

  get footprintTileState(): FootprintTileStateTableHandle {
    return new FootprintTileStateTableHandle(
      this.connection.clientCache.getOrCreateTable<FootprintTileState>(REMOTE_MODULE.tables.footprint_tile_state)
    )
  }

  get forceGenerateTypes(): ForceGenerateTypesTableHandle {
    return new ForceGenerateTypesTableHandle(
      this.connection.clientCache.getOrCreateTable<ForceGenerateTypes>(REMOTE_MODULE.tables.force_generate_types)
    )
  }

  get gateDesc(): GateDescTableHandle {
    return new GateDescTableHandle(
      this.connection.clientCache.getOrCreateTable<GateDesc>(REMOTE_MODULE.tables.gate_desc)
    )
  }

  get globalSearchState(): GlobalSearchStateTableHandle {
    return new GlobalSearchStateTableHandle(
      this.connection.clientCache.getOrCreateTable<GlobalSearchState>(REMOTE_MODULE.tables.global_search_state)
    )
  }

  get globals(): GlobalsTableHandle {
    return new GlobalsTableHandle(this.connection.clientCache.getOrCreateTable<Globals>(REMOTE_MODULE.tables.globals))
  }

  get grantedHubItemState(): GrantedHubItemStateTableHandle {
    return new GrantedHubItemStateTableHandle(
      this.connection.clientCache.getOrCreateTable<GrantedHubItemState>(REMOTE_MODULE.tables.granted_hub_item_state)
    )
  }

  get growthState(): GrowthStateTableHandle {
    return new GrowthStateTableHandle(
      this.connection.clientCache.getOrCreateTable<GrowthState>(REMOTE_MODULE.tables.growth_state)
    )
  }

  get healthState(): HealthStateTableHandle {
    return new HealthStateTableHandle(
      this.connection.clientCache.getOrCreateTable<HealthState>(REMOTE_MODULE.tables.health_state)
    )
  }

  get herdState(): HerdStateTableHandle {
    return new HerdStateTableHandle(
      this.connection.clientCache.getOrCreateTable<HerdState>(REMOTE_MODULE.tables.herd_state)
    )
  }

  get hexiteExchangeEntryDesc(): HexiteExchangeEntryDescTableHandle {
    return new HexiteExchangeEntryDescTableHandle(
      this.connection.clientCache.getOrCreateTable<HexiteExchangeEntryDesc>(
        REMOTE_MODULE.tables.hexite_exchange_entry_desc
      )
    )
  }

  get identityRole(): IdentityRoleTableHandle {
    return new IdentityRoleTableHandle(
      this.connection.clientCache.getOrCreateTable<IdentityRole>(REMOTE_MODULE.tables.identity_role)
    )
  }

  get interModuleMessage(): InterModuleMessageTableHandle {
    return new InterModuleMessageTableHandle(
      this.connection.clientCache.getOrCreateTable<InterModuleMessage>(REMOTE_MODULE.tables.inter_module_message)
    )
  }

  get interModuleMessageCounter(): InterModuleMessageCounterTableHandle {
    return new InterModuleMessageCounterTableHandle(
      this.connection.clientCache.getOrCreateTable<InterModuleMessageCounter>(
        REMOTE_MODULE.tables.inter_module_message_counter
      )
    )
  }

  get interModuleResponseMessageCounter(): InterModuleResponseMessageCounterTableHandle {
    return new InterModuleResponseMessageCounterTableHandle(
      this.connection.clientCache.getOrCreateTable<InterModuleResponseMessageCounter>(
        REMOTE_MODULE.tables.inter_module_response_message_counter
      )
    )
  }

  get interiorCollapseTriggerState(): InteriorCollapseTriggerStateTableHandle {
    return new InteriorCollapseTriggerStateTableHandle(
      this.connection.clientCache.getOrCreateTable<InteriorCollapseTriggerState>(
        REMOTE_MODULE.tables.interior_collapse_trigger_state
      )
    )
  }

  get interiorEnvironmentDesc(): InteriorEnvironmentDescTableHandle {
    return new InteriorEnvironmentDescTableHandle(
      this.connection.clientCache.getOrCreateTable<InteriorEnvironmentDesc>(
        REMOTE_MODULE.tables.interior_environment_desc
      )
    )
  }

  get interiorInstanceDesc(): InteriorInstanceDescTableHandle {
    return new InteriorInstanceDescTableHandle(
      this.connection.clientCache.getOrCreateTable<InteriorInstanceDesc>(REMOTE_MODULE.tables.interior_instance_desc)
    )
  }

  get interiorNetworkDesc(): InteriorNetworkDescTableHandle {
    return new InteriorNetworkDescTableHandle(
      this.connection.clientCache.getOrCreateTable<InteriorNetworkDesc>(REMOTE_MODULE.tables.interior_network_desc)
    )
  }

  get interiorPortalConnectionsDesc(): InteriorPortalConnectionsDescTableHandle {
    return new InteriorPortalConnectionsDescTableHandle(
      this.connection.clientCache.getOrCreateTable<InteriorPortalConnectionsDesc>(
        REMOTE_MODULE.tables.interior_portal_connections_desc
      )
    )
  }

  get interiorShapeDesc(): InteriorShapeDescTableHandle {
    return new InteriorShapeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<InteriorShapeDesc>(REMOTE_MODULE.tables.interior_shape_desc)
    )
  }

  get interiorSpawnDesc(): InteriorSpawnDescTableHandle {
    return new InteriorSpawnDescTableHandle(
      this.connection.clientCache.getOrCreateTable<InteriorSpawnDesc>(REMOTE_MODULE.tables.interior_spawn_desc)
    )
  }

  get inventoryState(): InventoryStateTableHandle {
    return new InventoryStateTableHandle(
      this.connection.clientCache.getOrCreateTable<InventoryState>(REMOTE_MODULE.tables.inventory_state)
    )
  }

  get itemConversionRecipeDesc(): ItemConversionRecipeDescTableHandle {
    return new ItemConversionRecipeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ItemConversionRecipeDesc>(
        REMOTE_MODULE.tables.item_conversion_recipe_desc
      )
    )
  }

  get itemDesc(): ItemDescTableHandle {
    return new ItemDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ItemDesc>(REMOTE_MODULE.tables.item_desc)
    )
  }

  get itemListDesc(): ItemListDescTableHandle {
    return new ItemListDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ItemListDesc>(REMOTE_MODULE.tables.item_list_desc)
    )
  }

  get knowledgeAchievementState(): KnowledgeAchievementStateTableHandle {
    return new KnowledgeAchievementStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeAchievementState>(
        REMOTE_MODULE.tables.knowledge_achievement_state
      )
    )
  }

  get knowledgeBattleActionState(): KnowledgeBattleActionStateTableHandle {
    return new KnowledgeBattleActionStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeBattleActionState>(
        REMOTE_MODULE.tables.knowledge_battle_action_state
      )
    )
  }

  get knowledgeBuildingState(): KnowledgeBuildingStateTableHandle {
    return new KnowledgeBuildingStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeBuildingState>(
        REMOTE_MODULE.tables.knowledge_building_state
      )
    )
  }

  get knowledgeCargoState(): KnowledgeCargoStateTableHandle {
    return new KnowledgeCargoStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeCargoState>(REMOTE_MODULE.tables.knowledge_cargo_state)
    )
  }

  get knowledgeClaimState(): KnowledgeClaimStateTableHandle {
    return new KnowledgeClaimStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeClaimState>(REMOTE_MODULE.tables.knowledge_claim_state)
    )
  }

  get knowledgeConstructionState(): KnowledgeConstructionStateTableHandle {
    return new KnowledgeConstructionStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeConstructionState>(
        REMOTE_MODULE.tables.knowledge_construction_state
      )
    )
  }

  get knowledgeCraftState(): KnowledgeCraftStateTableHandle {
    return new KnowledgeCraftStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeCraftState>(REMOTE_MODULE.tables.knowledge_craft_state)
    )
  }

  get knowledgeDeployableState(): KnowledgeDeployableStateTableHandle {
    return new KnowledgeDeployableStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeDeployableState>(
        REMOTE_MODULE.tables.knowledge_deployable_state
      )
    )
  }

  get knowledgeEnemyState(): KnowledgeEnemyStateTableHandle {
    return new KnowledgeEnemyStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeEnemyState>(REMOTE_MODULE.tables.knowledge_enemy_state)
    )
  }

  get knowledgeExtractState(): KnowledgeExtractStateTableHandle {
    return new KnowledgeExtractStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeExtractState>(REMOTE_MODULE.tables.knowledge_extract_state)
    )
  }

  get knowledgeItemState(): KnowledgeItemStateTableHandle {
    return new KnowledgeItemStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeItemState>(REMOTE_MODULE.tables.knowledge_item_state)
    )
  }

  get knowledgeLoreState(): KnowledgeLoreStateTableHandle {
    return new KnowledgeLoreStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeLoreState>(REMOTE_MODULE.tables.knowledge_lore_state)
    )
  }

  get knowledgeNpcState(): KnowledgeNpcStateTableHandle {
    return new KnowledgeNpcStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeNpcState>(REMOTE_MODULE.tables.knowledge_npc_state)
    )
  }

  get knowledgePavingState(): KnowledgePavingStateTableHandle {
    return new KnowledgePavingStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgePavingState>(REMOTE_MODULE.tables.knowledge_paving_state)
    )
  }

  get knowledgePillarShapingState(): KnowledgePillarShapingStateTableHandle {
    return new KnowledgePillarShapingStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgePillarShapingState>(
        REMOTE_MODULE.tables.knowledge_pillar_shaping_state
      )
    )
  }

  get knowledgeResourcePlacementState(): KnowledgeResourcePlacementStateTableHandle {
    return new KnowledgeResourcePlacementStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeResourcePlacementState>(
        REMOTE_MODULE.tables.knowledge_resource_placement_state
      )
    )
  }

  get knowledgeResourceState(): KnowledgeResourceStateTableHandle {
    return new KnowledgeResourceStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeResourceState>(
        REMOTE_MODULE.tables.knowledge_resource_state
      )
    )
  }

  get knowledgeRuinsState(): KnowledgeRuinsStateTableHandle {
    return new KnowledgeRuinsStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeRuinsState>(REMOTE_MODULE.tables.knowledge_ruins_state)
    )
  }

  get knowledgeScrollDesc(): KnowledgeScrollDescTableHandle {
    return new KnowledgeScrollDescTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeScrollDesc>(REMOTE_MODULE.tables.knowledge_scroll_desc)
    )
  }

  get knowledgeScrollTypeDesc(): KnowledgeScrollTypeDescTableHandle {
    return new KnowledgeScrollTypeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeScrollTypeDesc>(
        REMOTE_MODULE.tables.knowledge_scroll_type_desc
      )
    )
  }

  get knowledgeSecondaryState(): KnowledgeSecondaryStateTableHandle {
    return new KnowledgeSecondaryStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeSecondaryState>(
        REMOTE_MODULE.tables.knowledge_secondary_state
      )
    )
  }

  get knowledgeStatModifierDesc(): KnowledgeStatModifierDescTableHandle {
    return new KnowledgeStatModifierDescTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeStatModifierDesc>(
        REMOTE_MODULE.tables.knowledge_stat_modifier_desc
      )
    )
  }

  get knowledgeVaultState(): KnowledgeVaultStateTableHandle {
    return new KnowledgeVaultStateTableHandle(
      this.connection.clientCache.getOrCreateTable<KnowledgeVaultState>(REMOTE_MODULE.tables.knowledge_vault_state)
    )
  }

  get lightSourceState(): LightSourceStateTableHandle {
    return new LightSourceStateTableHandle(
      this.connection.clientCache.getOrCreateTable<LightSourceState>(REMOTE_MODULE.tables.light_source_state)
    )
  }

  get locationState(): LocationStateTableHandle {
    return new LocationStateTableHandle(
      this.connection.clientCache.getOrCreateTable<LocationState>(REMOTE_MODULE.tables.location_state)
    )
  }

  get lootChestDesc(): LootChestDescTableHandle {
    return new LootChestDescTableHandle(
      this.connection.clientCache.getOrCreateTable<LootChestDesc>(REMOTE_MODULE.tables.loot_chest_desc)
    )
  }

  get lootChestState(): LootChestStateTableHandle {
    return new LootChestStateTableHandle(
      this.connection.clientCache.getOrCreateTable<LootChestState>(REMOTE_MODULE.tables.loot_chest_state)
    )
  }

  get lootRarityDesc(): LootRarityDescTableHandle {
    return new LootRarityDescTableHandle(
      this.connection.clientCache.getOrCreateTable<LootRarityDesc>(REMOTE_MODULE.tables.loot_rarity_desc)
    )
  }

  get lootTableDesc(): LootTableDescTableHandle {
    return new LootTableDescTableHandle(
      this.connection.clientCache.getOrCreateTable<LootTableDesc>(REMOTE_MODULE.tables.loot_table_desc)
    )
  }

  get lostItemsState(): LostItemsStateTableHandle {
    return new LostItemsStateTableHandle(
      this.connection.clientCache.getOrCreateTable<LostItemsState>(REMOTE_MODULE.tables.lost_items_state)
    )
  }

  get mobileEntityState(): MobileEntityStateTableHandle {
    return new MobileEntityStateTableHandle(
      this.connection.clientCache.getOrCreateTable<MobileEntityState>(REMOTE_MODULE.tables.mobile_entity_state)
    )
  }

  get mountingState(): MountingStateTableHandle {
    return new MountingStateTableHandle(
      this.connection.clientCache.getOrCreateTable<MountingState>(REMOTE_MODULE.tables.mounting_state)
    )
  }

  get moveValidationStrikeCounterState(): MoveValidationStrikeCounterStateTableHandle {
    return new MoveValidationStrikeCounterStateTableHandle(
      this.connection.clientCache.getOrCreateTable<MoveValidationStrikeCounterState>(
        REMOTE_MODULE.tables.move_validation_strike_counter_state
      )
    )
  }

  get npcDesc(): NpcDescTableHandle {
    return new NpcDescTableHandle(this.connection.clientCache.getOrCreateTable<NpcDesc>(REMOTE_MODULE.tables.npc_desc))
  }

  get npcState(): NpcStateTableHandle {
    return new NpcStateTableHandle(
      this.connection.clientCache.getOrCreateTable<NpcState>(REMOTE_MODULE.tables.npc_state)
    )
  }

  get onboardingRewardDesc(): OnboardingRewardDescTableHandle {
    return new OnboardingRewardDescTableHandle(
      this.connection.clientCache.getOrCreateTable<OnboardingRewardDesc>(REMOTE_MODULE.tables.onboarding_reward_desc)
    )
  }

  get onboardingState(): OnboardingStateTableHandle {
    return new OnboardingStateTableHandle(
      this.connection.clientCache.getOrCreateTable<OnboardingState>(REMOTE_MODULE.tables.onboarding_state)
    )
  }

  get parametersDesc(): ParametersDescTableHandle {
    return new ParametersDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ParametersDesc>(REMOTE_MODULE.tables.parameters_desc)
    )
  }

  get parametersPlayerMoveDesc(): ParametersPlayerMoveDescTableHandle {
    return new ParametersPlayerMoveDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ParametersPlayerMoveDesc>(
        REMOTE_MODULE.tables.parameters_player_move_desc
      )
    )
  }

  get passiveCraftState(): PassiveCraftStateTableHandle {
    return new PassiveCraftStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PassiveCraftState>(REMOTE_MODULE.tables.passive_craft_state)
    )
  }

  get pathfindingDesc(): PathfindingDescTableHandle {
    return new PathfindingDescTableHandle(
      this.connection.clientCache.getOrCreateTable<PathfindingDesc>(REMOTE_MODULE.tables.pathfinding_desc)
    )
  }

  get pavedTileState(): PavedTileStateTableHandle {
    return new PavedTileStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PavedTileState>(REMOTE_MODULE.tables.paved_tile_state)
    )
  }

  get pavingTileDesc(): PavingTileDescTableHandle {
    return new PavingTileDescTableHandle(
      this.connection.clientCache.getOrCreateTable<PavingTileDesc>(REMOTE_MODULE.tables.paving_tile_desc)
    )
  }

  get permissionState(): PermissionStateTableHandle {
    return new PermissionStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PermissionState>(REMOTE_MODULE.tables.permission_state)
    )
  }

  get pillarShapingDesc(): PillarShapingDescTableHandle {
    return new PillarShapingDescTableHandle(
      this.connection.clientCache.getOrCreateTable<PillarShapingDesc>(REMOTE_MODULE.tables.pillar_shaping_desc)
    )
  }

  get pillarShapingState(): PillarShapingStateTableHandle {
    return new PillarShapingStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PillarShapingState>(REMOTE_MODULE.tables.pillar_shaping_state)
    )
  }

  get playerActionDesc(): PlayerActionDescTableHandle {
    return new PlayerActionDescTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerActionDesc>(REMOTE_MODULE.tables.player_action_desc)
    )
  }

  get playerActionState(): PlayerActionStateTableHandle {
    return new PlayerActionStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerActionState>(REMOTE_MODULE.tables.player_action_state)
    )
  }

  get playerDeveloperNotificationState(): PlayerDeveloperNotificationStateTableHandle {
    return new PlayerDeveloperNotificationStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerDeveloperNotificationState>(
        REMOTE_MODULE.tables.player_developer_notification_state
      )
    )
  }

  get playerHousingDesc(): PlayerHousingDescTableHandle {
    return new PlayerHousingDescTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerHousingDesc>(REMOTE_MODULE.tables.player_housing_desc)
    )
  }

  get playerHousingState(): PlayerHousingStateTableHandle {
    return new PlayerHousingStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerHousingState>(REMOTE_MODULE.tables.player_housing_state)
    )
  }

  get playerLowercaseUsernameState(): PlayerLowercaseUsernameStateTableHandle {
    return new PlayerLowercaseUsernameStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerLowercaseUsernameState>(
        REMOTE_MODULE.tables.player_lowercase_username_state
      )
    )
  }

  get playerNoteState(): PlayerNoteStateTableHandle {
    return new PlayerNoteStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerNoteState>(REMOTE_MODULE.tables.player_note_state)
    )
  }

  get playerNotificationEvent(): PlayerNotificationEventTableHandle {
    return new PlayerNotificationEventTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerNotificationEvent>(
        REMOTE_MODULE.tables.player_notification_event
      )
    )
  }

  get playerPrefsState(): PlayerPrefsStateTableHandle {
    return new PlayerPrefsStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerPrefsState>(REMOTE_MODULE.tables.player_prefs_state)
    )
  }

  get playerQueueState(): PlayerQueueStateTableHandle {
    return new PlayerQueueStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerQueueState>(REMOTE_MODULE.tables.player_queue_state)
    )
  }

  get playerReportState(): PlayerReportStateTableHandle {
    return new PlayerReportStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerReportState>(REMOTE_MODULE.tables.player_report_state)
    )
  }

  get playerReportStateTimestamp(): PlayerReportStateTimestampTableHandle {
    return new PlayerReportStateTimestampTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerReportStateTimestamp>(
        REMOTE_MODULE.tables.player_report_state_timestamp
      )
    )
  }

  get playerShardState(): PlayerShardStateTableHandle {
    return new PlayerShardStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerShardState>(REMOTE_MODULE.tables.player_shard_state)
    )
  }

  get playerState(): PlayerStateTableHandle {
    return new PlayerStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerState>(REMOTE_MODULE.tables.player_state)
    )
  }

  get playerTimestampState(): PlayerTimestampStateTableHandle {
    return new PlayerTimestampStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerTimestampState>(REMOTE_MODULE.tables.player_timestamp_state)
    )
  }

  get playerUsernameState(): PlayerUsernameStateTableHandle {
    return new PlayerUsernameStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerUsernameState>(REMOTE_MODULE.tables.player_username_state)
    )
  }

  get playerVoteConcludeTimer(): PlayerVoteConcludeTimerTableHandle {
    return new PlayerVoteConcludeTimerTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerVoteConcludeTimer>(
        REMOTE_MODULE.tables.player_vote_conclude_timer
      )
    )
  }

  get playerVoteState(): PlayerVoteStateTableHandle {
    return new PlayerVoteStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PlayerVoteState>(REMOTE_MODULE.tables.player_vote_state)
    )
  }

  get portalState(): PortalStateTableHandle {
    return new PortalStateTableHandle(
      this.connection.clientCache.getOrCreateTable<PortalState>(REMOTE_MODULE.tables.portal_state)
    )
  }

  get privateParametersDesc(): PrivateParametersDescTableHandle {
    return new PrivateParametersDescTableHandle(
      this.connection.clientCache.getOrCreateTable<PrivateParametersDesc>(REMOTE_MODULE.tables.private_parameters_desc)
    )
  }

  get progressiveActionState(): ProgressiveActionStateTableHandle {
    return new ProgressiveActionStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ProgressiveActionState>(
        REMOTE_MODULE.tables.progressive_action_state
      )
    )
  }

  get projectSiteState(): ProjectSiteStateTableHandle {
    return new ProjectSiteStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ProjectSiteState>(REMOTE_MODULE.tables.project_site_state)
    )
  }

  get regionConnectionInfo(): RegionConnectionInfoTableHandle {
    return new RegionConnectionInfoTableHandle(
      this.connection.clientCache.getOrCreateTable<RegionConnectionInfo>(REMOTE_MODULE.tables.region_connection_info)
    )
  }

  get regionPopulationInfo(): RegionPopulationInfoTableHandle {
    return new RegionPopulationInfoTableHandle(
      this.connection.clientCache.getOrCreateTable<RegionPopulationInfo>(REMOTE_MODULE.tables.region_population_info)
    )
  }

  get regionSignInParameters(): RegionSignInParametersTableHandle {
    return new RegionSignInParametersTableHandle(
      this.connection.clientCache.getOrCreateTable<RegionSignInParameters>(
        REMOTE_MODULE.tables.region_sign_in_parameters
      )
    )
  }

  get rentState(): RentStateTableHandle {
    return new RentStateTableHandle(
      this.connection.clientCache.getOrCreateTable<RentState>(REMOTE_MODULE.tables.rent_state)
    )
  }

  get reservedNameDesc(): ReservedNameDescTableHandle {
    return new ReservedNameDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ReservedNameDesc>(REMOTE_MODULE.tables.reserved_name_desc)
    )
  }

  get resourceClumpDesc(): ResourceClumpDescTableHandle {
    return new ResourceClumpDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ResourceClumpDesc>(REMOTE_MODULE.tables.resource_clump_desc)
    )
  }

  get resourceCount(): ResourceCountTableHandle {
    return new ResourceCountTableHandle(
      this.connection.clientCache.getOrCreateTable<ResourceCount>(REMOTE_MODULE.tables.resource_count)
    )
  }

  get resourceDesc(): ResourceDescTableHandle {
    return new ResourceDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ResourceDesc>(REMOTE_MODULE.tables.resource_desc)
    )
  }

  get resourceGrowthRecipeDesc(): ResourceGrowthRecipeDescTableHandle {
    return new ResourceGrowthRecipeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ResourceGrowthRecipeDesc>(
        REMOTE_MODULE.tables.resource_growth_recipe_desc
      )
    )
  }

  get resourceHealthState(): ResourceHealthStateTableHandle {
    return new ResourceHealthStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ResourceHealthState>(REMOTE_MODULE.tables.resource_health_state)
    )
  }

  get resourcePlacementRecipeDesc(): ResourcePlacementRecipeDescTableHandle {
    return new ResourcePlacementRecipeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ResourcePlacementRecipeDesc>(
        REMOTE_MODULE.tables.resource_placement_recipe_desc
      )
    )
  }

  get resourceState(): ResourceStateTableHandle {
    return new ResourceStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ResourceState>(REMOTE_MODULE.tables.resource_state)
    )
  }

  get rezSickLongTermState(): RezSickLongTermStateTableHandle {
    return new RezSickLongTermStateTableHandle(
      this.connection.clientCache.getOrCreateTable<RezSickLongTermState>(REMOTE_MODULE.tables.rez_sick_long_term_state)
    )
  }

  get satiationState(): SatiationStateTableHandle {
    return new SatiationStateTableHandle(
      this.connection.clientCache.getOrCreateTable<SatiationState>(REMOTE_MODULE.tables.satiation_state)
    )
  }

  get secondaryKnowledgeDesc(): SecondaryKnowledgeDescTableHandle {
    return new SecondaryKnowledgeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<SecondaryKnowledgeDesc>(
        REMOTE_MODULE.tables.secondary_knowledge_desc
      )
    )
  }

  get sellOrderState(): SellOrderStateTableHandle {
    return new SellOrderStateTableHandle(
      this.connection.clientCache.getOrCreateTable<AuctionListingState>(REMOTE_MODULE.tables.sell_order_state)
    )
  }

  get serverIdentity(): ServerIdentityTableHandle {
    return new ServerIdentityTableHandle(
      this.connection.clientCache.getOrCreateTable<ServerIdentity>(REMOTE_MODULE.tables.server_identity)
    )
  }

  get signedInPlayerState(): SignedInPlayerStateTableHandle {
    return new SignedInPlayerStateTableHandle(
      this.connection.clientCache.getOrCreateTable<SignedInPlayerState>(REMOTE_MODULE.tables.signed_in_player_state)
    )
  }

  get singleResourceToClumpDesc(): SingleResourceToClumpDescTableHandle {
    return new SingleResourceToClumpDescTableHandle(
      this.connection.clientCache.getOrCreateTable<SingleResourceToClumpDesc>(
        REMOTE_MODULE.tables.single_resource_to_clump_desc
      )
    )
  }

  get skillDesc(): SkillDescTableHandle {
    return new SkillDescTableHandle(
      this.connection.clientCache.getOrCreateTable<SkillDesc>(REMOTE_MODULE.tables.skill_desc)
    )
  }

  get stagedStaticData(): StagedStaticDataTableHandle {
    return new StagedStaticDataTableHandle(
      this.connection.clientCache.getOrCreateTable<StagedStaticData>(REMOTE_MODULE.tables.staged_static_data)
    )
  }

  get staminaState(): StaminaStateTableHandle {
    return new StaminaStateTableHandle(
      this.connection.clientCache.getOrCreateTable<StaminaState>(REMOTE_MODULE.tables.stamina_state)
    )
  }

  get starvingPlayerState(): StarvingPlayerStateTableHandle {
    return new StarvingPlayerStateTableHandle(
      this.connection.clientCache.getOrCreateTable<StarvingPlayerState>(REMOTE_MODULE.tables.starving_player_state)
    )
  }

  get targetState(): TargetStateTableHandle {
    return new TargetStateTableHandle(
      this.connection.clientCache.getOrCreateTable<TargetState>(REMOTE_MODULE.tables.target_state)
    )
  }

  get targetableState(): TargetableStateTableHandle {
    return new TargetableStateTableHandle(
      this.connection.clientCache.getOrCreateTable<TargetableState>(REMOTE_MODULE.tables.targetable_state)
    )
  }

  get targetingMatrixDesc(): TargetingMatrixDescTableHandle {
    return new TargetingMatrixDescTableHandle(
      this.connection.clientCache.getOrCreateTable<TargetingMatrixDesc>(REMOTE_MODULE.tables.targeting_matrix_desc)
    )
  }

  get teleportItemDesc(): TeleportItemDescTableHandle {
    return new TeleportItemDescTableHandle(
      this.connection.clientCache.getOrCreateTable<TeleportItemDesc>(REMOTE_MODULE.tables.teleport_item_desc)
    )
  }

  get teleportationEnergyState(): TeleportationEnergyStateTableHandle {
    return new TeleportationEnergyStateTableHandle(
      this.connection.clientCache.getOrCreateTable<TeleportationEnergyState>(
        REMOTE_MODULE.tables.teleportation_energy_state
      )
    )
  }

  get terraformProgressState(): TerraformProgressStateTableHandle {
    return new TerraformProgressStateTableHandle(
      this.connection.clientCache.getOrCreateTable<TerraformProgressState>(
        REMOTE_MODULE.tables.terraform_progress_state
      )
    )
  }

  get terraformRecipeDesc(): TerraformRecipeDescTableHandle {
    return new TerraformRecipeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<TerraformRecipeDesc>(REMOTE_MODULE.tables.terraform_recipe_desc)
    )
  }

  get terrainChunkState(): TerrainChunkStateTableHandle {
    return new TerrainChunkStateTableHandle(
      this.connection.clientCache.getOrCreateTable<TerrainChunkState>(REMOTE_MODULE.tables.terrain_chunk_state)
    )
  }

  get theGreatPlaceholderTable(): TheGreatPlaceholderTableTableHandle {
    return new TheGreatPlaceholderTableTableHandle(
      this.connection.clientCache.getOrCreateTable<TheGreatPlaceHolderTable>(
        REMOTE_MODULE.tables.the_great_placeholder_table
      )
    )
  }

  get threatState(): ThreatStateTableHandle {
    return new ThreatStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ThreatState>(REMOTE_MODULE.tables.threat_state)
    )
  }

  get toolDesc(): ToolDescTableHandle {
    return new ToolDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ToolDesc>(REMOTE_MODULE.tables.tool_desc)
    )
  }

  get toolTypeDesc(): ToolTypeDescTableHandle {
    return new ToolTypeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<ToolTypeDesc>(REMOTE_MODULE.tables.tool_type_desc)
    )
  }

  get toolbarState(): ToolbarStateTableHandle {
    return new ToolbarStateTableHandle(
      this.connection.clientCache.getOrCreateTable<ToolbarState>(REMOTE_MODULE.tables.toolbar_state)
    )
  }

  get tradeOrderState(): TradeOrderStateTableHandle {
    return new TradeOrderStateTableHandle(
      this.connection.clientCache.getOrCreateTable<TradeOrderState>(REMOTE_MODULE.tables.trade_order_state)
    )
  }

  get tradeSessionState(): TradeSessionStateTableHandle {
    return new TradeSessionStateTableHandle(
      this.connection.clientCache.getOrCreateTable<TradeSessionState>(REMOTE_MODULE.tables.trade_session_state)
    )
  }

  get travelerTaskDesc(): TravelerTaskDescTableHandle {
    return new TravelerTaskDescTableHandle(
      this.connection.clientCache.getOrCreateTable<TravelerTaskDesc>(REMOTE_MODULE.tables.traveler_task_desc)
    )
  }

  get travelerTaskState(): TravelerTaskStateTableHandle {
    return new TravelerTaskStateTableHandle(
      this.connection.clientCache.getOrCreateTable<TravelerTaskState>(REMOTE_MODULE.tables.traveler_task_state)
    )
  }

  get travelerTradeOrderDesc(): TravelerTradeOrderDescTableHandle {
    return new TravelerTradeOrderDescTableHandle(
      this.connection.clientCache.getOrCreateTable<TravelerTradeOrderDesc>(
        REMOTE_MODULE.tables.traveler_trade_order_desc
      )
    )
  }

  get unclaimedCollectiblesState(): UnclaimedCollectiblesStateTableHandle {
    return new UnclaimedCollectiblesStateTableHandle(
      this.connection.clientCache.getOrCreateTable<UnclaimedCollectiblesState>(
        REMOTE_MODULE.tables.unclaimed_collectibles_state
      )
    )
  }

  get unclaimedShardsState(): UnclaimedShardsStateTableHandle {
    return new UnclaimedShardsStateTableHandle(
      this.connection.clientCache.getOrCreateTable<UnclaimedShardsState>(REMOTE_MODULE.tables.unclaimed_shards_state)
    )
  }

  get userAuthenticationState(): UserAuthenticationStateTableHandle {
    return new UserAuthenticationStateTableHandle(
      this.connection.clientCache.getOrCreateTable<UserAuthenticationState>(
        REMOTE_MODULE.tables.user_authentication_state
      )
    )
  }

  get userModerationState(): UserModerationStateTableHandle {
    return new UserModerationStateTableHandle(
      this.connection.clientCache.getOrCreateTable<UserModerationState>(REMOTE_MODULE.tables.user_moderation_state)
    )
  }

  get userPreviousRegionState(): UserPreviousRegionStateTableHandle {
    return new UserPreviousRegionStateTableHandle(
      this.connection.clientCache.getOrCreateTable<UserPreviousRegionState>(
        REMOTE_MODULE.tables.user_previous_region_state
      )
    )
  }

  get userRegionState(): UserRegionStateTableHandle {
    return new UserRegionStateTableHandle(
      this.connection.clientCache.getOrCreateTable<UserRegionState>(REMOTE_MODULE.tables.user_region_state)
    )
  }

  get userState(): UserStateTableHandle {
    return new UserStateTableHandle(
      this.connection.clientCache.getOrCreateTable<UserState>(REMOTE_MODULE.tables.user_state)
    )
  }

  get vaultState(): VaultStateTableHandle {
    return new VaultStateTableHandle(
      this.connection.clientCache.getOrCreateTable<VaultState>(REMOTE_MODULE.tables.vault_state)
    )
  }

  get wallDesc(): WallDescTableHandle {
    return new WallDescTableHandle(
      this.connection.clientCache.getOrCreateTable<WallDesc>(REMOTE_MODULE.tables.wall_desc)
    )
  }

  get weaponDesc(): WeaponDescTableHandle {
    return new WeaponDescTableHandle(
      this.connection.clientCache.getOrCreateTable<WeaponDesc>(REMOTE_MODULE.tables.weapon_desc)
    )
  }

  get weaponTypeDesc(): WeaponTypeDescTableHandle {
    return new WeaponTypeDescTableHandle(
      this.connection.clientCache.getOrCreateTable<WeaponTypeDesc>(REMOTE_MODULE.tables.weapon_type_desc)
    )
  }

  get worldRegionNameState(): WorldRegionNameStateTableHandle {
    return new WorldRegionNameStateTableHandle(
      this.connection.clientCache.getOrCreateTable<WorldRegionNameState>(REMOTE_MODULE.tables.world_region_name_state)
    )
  }

  get worldRegionState(): WorldRegionStateTableHandle {
    return new WorldRegionStateTableHandle(
      this.connection.clientCache.getOrCreateTable<WorldRegionState>(REMOTE_MODULE.tables.world_region_state)
    )
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> {}

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(
      REMOTE_MODULE,
      (imp: DbConnectionImpl) => imp as DbConnection
    )
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this)
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>
