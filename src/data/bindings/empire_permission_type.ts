// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { AlgebraicType, BinaryReader, BinaryWriter, SumTypeVariant } from '@clockworklabs/spacetimedb-sdk'
// A namespace for generated variants and helper functions.
export namespace EmpirePermission {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type SupplyNode = { tag: 'SupplyNode' }
  export type CollectHexiteCapsule = { tag: 'CollectHexiteCapsule' }
  export type BuildWatchtower = { tag: 'BuildWatchtower' }
  export type InviteSettlementToEmpire = { tag: 'InviteSettlementToEmpire' }
  export type FlagWatchtowerToSiege = { tag: 'FlagWatchtowerToSiege' }
  export type AproveEmpireSubmissions = { tag: 'AproveEmpireSubmissions' }
  export type PromoteLesserRanks = { tag: 'PromoteLesserRanks' }
  export type MarkAreaForExpansion = { tag: 'MarkAreaForExpansion' }
  export type CraftHexiteCapsule = { tag: 'CraftHexiteCapsule' }
  export type Count = { tag: 'Count' }

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const SupplyNode = { tag: 'SupplyNode' }
  export const CollectHexiteCapsule = { tag: 'CollectHexiteCapsule' }
  export const BuildWatchtower = { tag: 'BuildWatchtower' }
  export const InviteSettlementToEmpire = { tag: 'InviteSettlementToEmpire' }
  export const FlagWatchtowerToSiege = { tag: 'FlagWatchtowerToSiege' }
  export const AproveEmpireSubmissions = { tag: 'AproveEmpireSubmissions' }
  export const PromoteLesserRanks = { tag: 'PromoteLesserRanks' }
  export const MarkAreaForExpansion = { tag: 'MarkAreaForExpansion' }
  export const CraftHexiteCapsule = { tag: 'CraftHexiteCapsule' }
  export const Count = { tag: 'Count' }

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant('SupplyNode', AlgebraicType.createProductType([])),
      new SumTypeVariant('CollectHexiteCapsule', AlgebraicType.createProductType([])),
      new SumTypeVariant('BuildWatchtower', AlgebraicType.createProductType([])),
      new SumTypeVariant('InviteSettlementToEmpire', AlgebraicType.createProductType([])),
      new SumTypeVariant('FlagWatchtowerToSiege', AlgebraicType.createProductType([])),
      new SumTypeVariant('AproveEmpireSubmissions', AlgebraicType.createProductType([])),
      new SumTypeVariant('PromoteLesserRanks', AlgebraicType.createProductType([])),
      new SumTypeVariant('MarkAreaForExpansion', AlgebraicType.createProductType([])),
      new SumTypeVariant('CraftHexiteCapsule', AlgebraicType.createProductType([])),
      new SumTypeVariant('Count', AlgebraicType.createProductType([]))
    ])
  }

  export function serialize(writer: BinaryWriter, value: EmpirePermission): void {
    EmpirePermission.getTypeScriptAlgebraicType().serialize(writer, value)
  }

  export function deserialize(reader: BinaryReader): EmpirePermission {
    return EmpirePermission.getTypeScriptAlgebraicType().deserialize(reader)
  }
}

// The tagged union or sum type for the algebraic type `EmpirePermission`.
export type EmpirePermission =
  | EmpirePermission.SupplyNode
  | EmpirePermission.CollectHexiteCapsule
  | EmpirePermission.BuildWatchtower
  | EmpirePermission.InviteSettlementToEmpire
  | EmpirePermission.FlagWatchtowerToSiege
  | EmpirePermission.AproveEmpireSubmissions
  | EmpirePermission.PromoteLesserRanks
  | EmpirePermission.MarkAreaForExpansion
  | EmpirePermission.CraftHexiteCapsule
  | EmpirePermission.Count

export default EmpirePermission
