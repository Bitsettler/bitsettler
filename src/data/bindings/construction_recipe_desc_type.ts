// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  BinaryReader,
  BinaryWriter,
  ProductTypeElement
} from '@clockworklabs/spacetimedb-sdk'
import { ExperienceStackF32 as __ExperienceStackF32 } from './experience_stack_f_32_type'
import { InputItemStack as __InputItemStack } from './input_item_stack_type'
import { LevelRequirement as __LevelRequirement } from './level_requirement_type'
import { ToolRequirement as __ToolRequirement } from './tool_requirement_type'

export type ConstructionRecipeDesc = {
  id: number
  name: string
  timeRequirement: number
  staminaRequirement: number
  consumedBuilding: number
  requiredInteriorTier: number
  levelRequirements: __LevelRequirement[]
  toolRequirements: __ToolRequirement[]
  consumedItemStacks: __InputItemStack[]
  consumedCargoStacks: __InputItemStack[]
  consumedShards: number
  experiencePerProgress: __ExperienceStackF32[]
  discoveryTriggers: number[]
  requiredKnowledges: number[]
  requiredClaimTechId: number
  fullDiscoveryScore: number
  toolMeshIndex: number
  buildingDescriptionId: number
  requiredPavingTier: number
  actionsRequired: number
  instantlyBuilt: boolean
  recipePerformanceId: number
}

/**
 * A namespace for generated helper functions.
 */
export namespace ConstructionRecipeDesc {
  /**
   * A function which returns this type represented as an AlgebraicType.
   * This function is derived from the AlgebraicType used to generate this type.
   */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement('id', AlgebraicType.createI32Type()),
      new ProductTypeElement('name', AlgebraicType.createStringType()),
      new ProductTypeElement('timeRequirement', AlgebraicType.createF32Type()),
      new ProductTypeElement(
        'staminaRequirement',
        AlgebraicType.createF32Type()
      ),
      new ProductTypeElement('consumedBuilding', AlgebraicType.createI32Type()),
      new ProductTypeElement(
        'requiredInteriorTier',
        AlgebraicType.createI32Type()
      ),
      new ProductTypeElement(
        'levelRequirements',
        AlgebraicType.createArrayType(
          __LevelRequirement.getTypeScriptAlgebraicType()
        )
      ),
      new ProductTypeElement(
        'toolRequirements',
        AlgebraicType.createArrayType(
          __ToolRequirement.getTypeScriptAlgebraicType()
        )
      ),
      new ProductTypeElement(
        'consumedItemStacks',
        AlgebraicType.createArrayType(
          __InputItemStack.getTypeScriptAlgebraicType()
        )
      ),
      new ProductTypeElement(
        'consumedCargoStacks',
        AlgebraicType.createArrayType(
          __InputItemStack.getTypeScriptAlgebraicType()
        )
      ),
      new ProductTypeElement('consumedShards', AlgebraicType.createI32Type()),
      new ProductTypeElement(
        'experiencePerProgress',
        AlgebraicType.createArrayType(
          __ExperienceStackF32.getTypeScriptAlgebraicType()
        )
      ),
      new ProductTypeElement(
        'discoveryTriggers',
        AlgebraicType.createArrayType(AlgebraicType.createI32Type())
      ),
      new ProductTypeElement(
        'requiredKnowledges',
        AlgebraicType.createArrayType(AlgebraicType.createI32Type())
      ),
      new ProductTypeElement(
        'requiredClaimTechId',
        AlgebraicType.createI32Type()
      ),
      new ProductTypeElement(
        'fullDiscoveryScore',
        AlgebraicType.createI32Type()
      ),
      new ProductTypeElement('toolMeshIndex', AlgebraicType.createI32Type()),
      new ProductTypeElement(
        'buildingDescriptionId',
        AlgebraicType.createI32Type()
      ),
      new ProductTypeElement(
        'requiredPavingTier',
        AlgebraicType.createI32Type()
      ),
      new ProductTypeElement('actionsRequired', AlgebraicType.createI32Type()),
      new ProductTypeElement('instantlyBuilt', AlgebraicType.createBoolType()),
      new ProductTypeElement(
        'recipePerformanceId',
        AlgebraicType.createI32Type()
      )
    ])
  }

  export function serialize(
    writer: BinaryWriter,
    value: ConstructionRecipeDesc
  ): void {
    ConstructionRecipeDesc.getTypeScriptAlgebraicType().serialize(writer, value)
  }

  export function deserialize(reader: BinaryReader): ConstructionRecipeDesc {
    return ConstructionRecipeDesc.getTypeScriptAlgebraicType().deserialize(
      reader
    )
  }
}
