// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { TableCache, deepEqual } from '@clockworklabs/spacetimedb-sdk'
import { TravelerTradeOrderDesc } from './traveler_trade_order_desc_type'

import { type EventContext } from '.'

/**
 * Table handle for the table `traveler_trade_order_desc`.
 *
 * Obtain a handle from the [`travelerTradeOrderDesc`] property on [`RemoteTables`],
 * like `ctx.db.travelerTradeOrderDesc`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.travelerTradeOrderDesc.on_insert(...)`.
 */
export class TravelerTradeOrderDescTableHandle {
  tableCache: TableCache<TravelerTradeOrderDesc>

  constructor(tableCache: TableCache<TravelerTradeOrderDesc>) {
    this.tableCache = tableCache
  }

  count(): number {
    return this.tableCache.count()
  }

  iter(): Iterable<TravelerTradeOrderDesc> {
    return this.tableCache.iter()
  }
  /**
   * Access to the `id` unique index on the table `traveler_trade_order_desc`,
   * which allows point queries on the field of the same name
   * via the [`TravelerTradeOrderDescIdUnique.find`] method.
   *
   * Users are encouraged not to explicitly reference this type,
   * but to directly chain method calls,
   * like `ctx.db.travelerTradeOrderDesc.id().find(...)`.
   *
   * Get a handle on the `id` unique index on the table `traveler_trade_order_desc`.
   */
  id = {
    // Find the subscribed row whose `id` column value is equal to `col_val`,
    // if such a row is present in the client cache.
    find: (col_val: number): TravelerTradeOrderDesc | undefined => {
      for (let row of this.tableCache.iter()) {
        if (deepEqual(row.id, col_val)) {
          return row
        }
      }
    }
  }

  onInsert = (cb: (ctx: EventContext, row: TravelerTradeOrderDesc) => void) => {
    return this.tableCache.onInsert(cb)
  }

  removeOnInsert = (
    cb: (ctx: EventContext, row: TravelerTradeOrderDesc) => void
  ) => {
    return this.tableCache.removeOnInsert(cb)
  }

  onDelete = (cb: (ctx: EventContext, row: TravelerTradeOrderDesc) => void) => {
    return this.tableCache.onDelete(cb)
  }

  removeOnDelete = (
    cb: (ctx: EventContext, row: TravelerTradeOrderDesc) => void
  ) => {
    return this.tableCache.removeOnDelete(cb)
  }

  // Updates are only defined for tables with primary keys.
  onUpdate = (
    cb: (
      ctx: EventContext,
      oldRow: TravelerTradeOrderDesc,
      newRow: TravelerTradeOrderDesc
    ) => void
  ) => {
    return this.tableCache.onUpdate(cb)
  }

  removeOnUpdate = (
    cb: (
      ctx: EventContext,
      onRow: TravelerTradeOrderDesc,
      newRow: TravelerTradeOrderDesc
    ) => void
  ) => {
    return this.tableCache.removeOnUpdate(cb)
  }
}
